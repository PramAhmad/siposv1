import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-JEXKZRFY.js";

// browser-external:os
var require_os = __commonJS({
  "browser-external:os"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "os" has been externalized for browser compatibility. Cannot access "os.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/events/events.js
var require_events = __commonJS({
  "node_modules/events/events.js"(exports, module) {
    "use strict";
    var R = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R && typeof R.ownKeys === "function") {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn)
        console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter2() {
      EventEmitter2.init.call(this);
    }
    module.exports = EventEmitter2;
    module.exports.once = once;
    EventEmitter2.EventEmitter = EventEmitter2;
    EventEmitter2.prototype._events = void 0;
    EventEmitter2.prototype._eventsCount = 0;
    EventEmitter2.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter2, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter2.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter2.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
      }
      this._maxListeners = n;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter2.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter2.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter2.prototype.emit = function emit(type2) {
      var args = [];
      for (var i = 1; i < arguments.length; i++)
        args.push(arguments[i]);
      var doError = type2 === "error";
      var events = this._events;
      if (events !== void 0)
        doError = doError && events.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          throw er;
        }
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err;
      }
      var handler = events[type2];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }
      return true;
    };
    function _addListener(target, type2, listener, prepend) {
      var m;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;
      if (events === void 0) {
        events = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events.newListener !== void 0) {
          target.emit(
            "newListener",
            type2,
            listener.listener ? listener.listener : listener
          );
          events = target._events;
        }
        existing = events[type2];
      }
      if (existing === void 0) {
        existing = events[type2] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events[type2] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type2) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w.name = "MaxListenersExceededWarning";
          w.emitter = target;
          w.type = type2;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }
      return target;
    }
    EventEmitter2.prototype.addListener = function addListener(type2, listener) {
      return _addListener(this, type2, listener, false);
    };
    EventEmitter2.prototype.on = EventEmitter2.prototype.addListener;
    EventEmitter2.prototype.prependListener = function prependListener(type2, listener) {
      return _addListener(this, type2, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type2, listener) {
      var state = { fired: false, wrapFn: void 0, target, type: type2, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter2.prototype.once = function once2(type2, listener) {
      checkListener(listener);
      this.on(type2, _onceWrap(this, type2, listener));
      return this;
    };
    EventEmitter2.prototype.prependOnceListener = function prependOnceListener(type2, listener) {
      checkListener(listener);
      this.prependListener(type2, _onceWrap(this, type2, listener));
      return this;
    };
    EventEmitter2.prototype.removeListener = function removeListener(type2, listener) {
      var list, events, position, i, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === void 0)
        return this;
      list = events[type2];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events[type2];
          if (events.removeListener)
            this.emit("removeListener", type2, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type2] = list[0];
        if (events.removeListener !== void 0)
          this.emit("removeListener", type2, originalListener || listener);
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(type2) {
      var listeners, events, i;
      events = this._events;
      if (events === void 0)
        return this;
      if (events.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events[type2] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events[type2];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === "removeListener")
            continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type2];
      if (typeof listeners === "function") {
        this.removeListener(type2, listeners);
      } else if (listeners !== void 0) {
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type2, listeners[i]);
        }
      }
      return this;
    };
    function _listeners(target, type2, unwrap) {
      var events = target._events;
      if (events === void 0)
        return [];
      var evlistener = events[type2];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter2.prototype.listeners = function listeners(type2) {
      return _listeners(this, type2, true);
    };
    EventEmitter2.prototype.rawListeners = function rawListeners(type2) {
      return _listeners(this, type2, false);
    };
    EventEmitter2.listenerCount = function(emitter, type2) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type2);
      } else {
        return listenerCount.call(emitter, type2);
      }
    };
    EventEmitter2.prototype.listenerCount = listenerCount;
    function listenerCount(type2) {
      var events = this._events;
      if (events !== void 0) {
        var evlistener = events[type2];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }
    function once(emitter, name) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// node_modules/@azure/core-http/dist-esm/src/httpHeaders.js
function getHeaderKey(headerName) {
  return headerName.toLowerCase();
}
function isHttpHeadersLike(object) {
  if (object && typeof object === "object") {
    const castObject = object;
    if (typeof castObject.rawHeaders === "function" && typeof castObject.clone === "function" && typeof castObject.get === "function" && typeof castObject.set === "function" && typeof castObject.contains === "function" && typeof castObject.remove === "function" && typeof castObject.headersArray === "function" && typeof castObject.headerValues === "function" && typeof castObject.headerNames === "function" && typeof castObject.toJson === "function") {
      return true;
    }
  }
  return false;
}
var HttpHeaders = class {
  constructor(rawHeaders) {
    this._headersMap = {};
    if (rawHeaders) {
      for (const headerName in rawHeaders) {
        this.set(headerName, rawHeaders[headerName]);
      }
    }
  }
  /**
   * Set a header in this collection with the provided name and value. The name is
   * case-insensitive.
   * @param headerName - The name of the header to set. This value is case-insensitive.
   * @param headerValue - The value of the header to set.
   */
  set(headerName, headerValue) {
    this._headersMap[getHeaderKey(headerName)] = {
      name: headerName,
      value: headerValue.toString()
    };
  }
  /**
   * Get the header value for the provided header name, or undefined if no header exists in this
   * collection with the provided name.
   * @param headerName - The name of the header.
   */
  get(headerName) {
    const header = this._headersMap[getHeaderKey(headerName)];
    return !header ? void 0 : header.value;
  }
  /**
   * Get whether or not this header collection contains a header entry for the provided header name.
   */
  contains(headerName) {
    return !!this._headersMap[getHeaderKey(headerName)];
  }
  /**
   * Remove the header with the provided headerName. Return whether or not the header existed and
   * was removed.
   * @param headerName - The name of the header to remove.
   */
  remove(headerName) {
    const result = this.contains(headerName);
    delete this._headersMap[getHeaderKey(headerName)];
    return result;
  }
  /**
   * Get the headers that are contained this collection as an object.
   */
  rawHeaders() {
    return this.toJson({ preserveCase: true });
  }
  /**
   * Get the headers that are contained in this collection as an array.
   */
  headersArray() {
    const headers = [];
    for (const headerKey in this._headersMap) {
      headers.push(this._headersMap[headerKey]);
    }
    return headers;
  }
  /**
   * Get the header names that are contained in this collection.
   */
  headerNames() {
    const headerNames = [];
    const headers = this.headersArray();
    for (let i = 0; i < headers.length; ++i) {
      headerNames.push(headers[i].name);
    }
    return headerNames;
  }
  /**
   * Get the header values that are contained in this collection.
   */
  headerValues() {
    const headerValues = [];
    const headers = this.headersArray();
    for (let i = 0; i < headers.length; ++i) {
      headerValues.push(headers[i].value);
    }
    return headerValues;
  }
  /**
   * Get the JSON object representation of this HTTP header collection.
   */
  toJson(options = {}) {
    const result = {};
    if (options.preserveCase) {
      for (const headerKey in this._headersMap) {
        const header = this._headersMap[headerKey];
        result[header.name] = header.value;
      }
    } else {
      for (const headerKey in this._headersMap) {
        const header = this._headersMap[headerKey];
        result[getHeaderKey(header.name)] = header.value;
      }
    }
    return result;
  }
  /**
   * Get the string representation of this HTTP header collection.
   */
  toString() {
    return JSON.stringify(this.toJson({ preserveCase: true }));
  }
  /**
   * Create a deep clone/copy of this HttpHeaders collection.
   */
  clone() {
    const resultPreservingCasing = {};
    for (const headerKey in this._headersMap) {
      const header = this._headersMap[headerKey];
      resultPreservingCasing[header.name] = header.value;
    }
    return new HttpHeaders(resultPreservingCasing);
  }
};

// node_modules/@azure/core-http/dist-esm/src/util/base64.browser.js
function encodeByteArray(value) {
  let str = "";
  for (let i = 0; i < value.length; i++) {
    str += String.fromCharCode(value[i]);
  }
  return btoa(str);
}
function decodeString(value) {
  const byteString = atob(value);
  const arr = new Uint8Array(byteString.length);
  for (let i = 0; i < byteString.length; i++) {
    arr[i] = byteString.charCodeAt(i);
  }
  return arr;
}

// node_modules/@azure/core-http/dist-esm/src/util/constants.js
var Constants = {
  /**
   * The core-http version
   */
  coreHttpVersion: "3.0.3",
  /**
   * Specifies HTTP.
   */
  HTTP: "http:",
  /**
   * Specifies HTTPS.
   */
  HTTPS: "https:",
  /**
   * Specifies HTTP Proxy.
   */
  HTTP_PROXY: "HTTP_PROXY",
  /**
   * Specifies HTTPS Proxy.
   */
  HTTPS_PROXY: "HTTPS_PROXY",
  /**
   * Specifies NO Proxy.
   */
  NO_PROXY: "NO_PROXY",
  /**
   * Specifies ALL Proxy.
   */
  ALL_PROXY: "ALL_PROXY",
  HttpConstants: {
    /**
     * Http Verbs
     */
    HttpVerbs: {
      PUT: "PUT",
      GET: "GET",
      DELETE: "DELETE",
      POST: "POST",
      MERGE: "MERGE",
      HEAD: "HEAD",
      PATCH: "PATCH"
    },
    StatusCodes: {
      TooManyRequests: 429,
      ServiceUnavailable: 503
    }
  },
  /**
   * Defines constants for use with HTTP headers.
   */
  HeaderConstants: {
    /**
     * The Authorization header.
     */
    AUTHORIZATION: "authorization",
    AUTHORIZATION_SCHEME: "Bearer",
    /**
     * The Retry-After response-header field can be used with a 503 (Service
     * Unavailable) or 349 (Too Many Requests) responses to indicate how long
     * the service is expected to be unavailable to the requesting client.
     */
    RETRY_AFTER: "Retry-After",
    /**
     * The UserAgent header.
     */
    USER_AGENT: "User-Agent"
  }
};

// node_modules/@azure/core-http/dist-esm/src/util/serializer.common.js
var XML_ATTRKEY = "$";
var XML_CHARKEY = "_";

// node_modules/@azure/core-http/node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/@azure/core-http/node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/@azure/core-http/node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/@azure/core-http/node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).substr(1));
}
var i;
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var stringify_default = stringify;

// node_modules/@azure/core-http/node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  var v;
  var arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default = parse;

// node_modules/@azure/core-http/node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  var bytes = [];
  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35_default(name, version2, hashfunc) {
  function generateUUID2(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID2.name = name;
  } catch (err) {
  }
  generateUUID2.DNS = DNS;
  generateUUID2.URL = URL2;
  return generateUUID2;
}

// node_modules/@azure/core-http/node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = "0123456789abcdef";
  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 255;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
  x[len >> 5] |= 128 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;
  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return [a, b, c, d];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));
  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 255) << i % 32;
  }
  return output;
}
function safeAdd(x, y) {
  var lsw = (x & 65535) + (y & 65535);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
var md5_default = md5;

// node_modules/@azure/core-http/node_modules/uuid/dist/esm-browser/v3.js
var v3 = v35_default("v3", 48, md5_default);

// node_modules/@azure/core-http/node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default = v4;

// node_modules/@azure/core-http/node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  var K = [1518500249, 1859775393, 2400959708, 3395469782];
  var H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);
  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);
    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }
    M[_i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);
    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }
    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }
    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];
    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default = sha1;

// node_modules/@azure/core-http/node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35_default("v5", 80, sha1_default);

// node_modules/@azure/core-http/dist-esm/src/util/utils.js
var validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;
function isValidUuid(uuid) {
  return validUuidRegex.test(uuid);
}
function generateUuid() {
  return v4_default();
}
function prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {
  if (!Array.isArray(obj)) {
    obj = [obj];
  }
  if (!xmlNamespaceKey || !xmlNamespace) {
    return { [elementName]: obj };
  }
  const result = { [elementName]: obj };
  result[XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };
  return result;
}
var validateISODuration = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
function isDuration(value) {
  return validateISODuration.test(value);
}
function replaceAll(value, searchValue, replaceValue) {
  return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || "");
}
function isPrimitiveType(value) {
  return typeof value !== "object" && typeof value !== "function" || value === null;
}
function isObject(input) {
  return typeof input === "object" && input !== null && !Array.isArray(input) && !(input instanceof RegExp) && !(input instanceof Date);
}

// node_modules/@azure/core-http/dist-esm/src/serializer.js
var Serializer = class {
  constructor(modelMappers = {}, isXML) {
    this.modelMappers = modelMappers;
    this.isXML = isXML;
  }
  /**
   * Validates constraints, if any. This function will throw if the provided value does not respect those constraints.
   * @param mapper - The definition of data models.
   * @param value - The value.
   * @param objectName - Name of the object. Used in the error messages.
   * @deprecated Removing the constraints validation on client side.
   */
  validateConstraints(mapper, value, objectName) {
    const failValidation = (constraintName, constraintValue) => {
      throw new Error(`"${objectName}" with value "${value}" should satisfy the constraint "${constraintName}": ${constraintValue}.`);
    };
    if (mapper.constraints && value != void 0) {
      const valueAsNumber = value;
      const { ExclusiveMaximum, ExclusiveMinimum, InclusiveMaximum, InclusiveMinimum, MaxItems, MaxLength, MinItems, MinLength, MultipleOf, Pattern, UniqueItems } = mapper.constraints;
      if (ExclusiveMaximum != void 0 && valueAsNumber >= ExclusiveMaximum) {
        failValidation("ExclusiveMaximum", ExclusiveMaximum);
      }
      if (ExclusiveMinimum != void 0 && valueAsNumber <= ExclusiveMinimum) {
        failValidation("ExclusiveMinimum", ExclusiveMinimum);
      }
      if (InclusiveMaximum != void 0 && valueAsNumber > InclusiveMaximum) {
        failValidation("InclusiveMaximum", InclusiveMaximum);
      }
      if (InclusiveMinimum != void 0 && valueAsNumber < InclusiveMinimum) {
        failValidation("InclusiveMinimum", InclusiveMinimum);
      }
      const valueAsArray = value;
      if (MaxItems != void 0 && valueAsArray.length > MaxItems) {
        failValidation("MaxItems", MaxItems);
      }
      if (MaxLength != void 0 && valueAsArray.length > MaxLength) {
        failValidation("MaxLength", MaxLength);
      }
      if (MinItems != void 0 && valueAsArray.length < MinItems) {
        failValidation("MinItems", MinItems);
      }
      if (MinLength != void 0 && valueAsArray.length < MinLength) {
        failValidation("MinLength", MinLength);
      }
      if (MultipleOf != void 0 && valueAsNumber % MultipleOf !== 0) {
        failValidation("MultipleOf", MultipleOf);
      }
      if (Pattern) {
        const pattern = typeof Pattern === "string" ? new RegExp(Pattern) : Pattern;
        if (typeof value !== "string" || value.match(pattern) === null) {
          failValidation("Pattern", Pattern);
        }
      }
      if (UniqueItems && valueAsArray.some((item, i, ar) => ar.indexOf(item) !== i)) {
        failValidation("UniqueItems", UniqueItems);
      }
    }
  }
  /**
   * Serialize the given object based on its metadata defined in the mapper.
   *
   * @param mapper - The mapper which defines the metadata of the serializable object.
   * @param object - A valid Javascript object to be serialized.
   * @param objectName - Name of the serialized object.
   * @param options - additional options to deserialization.
   * @returns A valid serialized Javascript object.
   */
  serialize(mapper, object, objectName, options = {}) {
    var _a3, _b2, _c2;
    const updatedOptions = {
      rootName: (_a3 = options.rootName) !== null && _a3 !== void 0 ? _a3 : "",
      includeRoot: (_b2 = options.includeRoot) !== null && _b2 !== void 0 ? _b2 : false,
      xmlCharKey: (_c2 = options.xmlCharKey) !== null && _c2 !== void 0 ? _c2 : XML_CHARKEY
    };
    let payload = {};
    const mapperType = mapper.type.name;
    if (!objectName) {
      objectName = mapper.serializedName;
    }
    if (mapperType.match(/^Sequence$/i) !== null) {
      payload = [];
    }
    if (mapper.isConstant) {
      object = mapper.defaultValue;
    }
    const { required, nullable } = mapper;
    if (required && nullable && object === void 0) {
      throw new Error(`${objectName} cannot be undefined.`);
    }
    if (required && !nullable && object == void 0) {
      throw new Error(`${objectName} cannot be null or undefined.`);
    }
    if (!required && nullable === false && object === null) {
      throw new Error(`${objectName} cannot be null.`);
    }
    if (object == void 0) {
      payload = object;
    } else {
      if (mapperType.match(/^any$/i) !== null) {
        payload = object;
      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {
        payload = serializeBasicTypes(mapperType, objectName, object);
      } else if (mapperType.match(/^Enum$/i) !== null) {
        const enumMapper = mapper;
        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);
      } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {
        payload = serializeDateTypes(mapperType, object, objectName);
      } else if (mapperType.match(/^ByteArray$/i) !== null) {
        payload = serializeByteArrayType(objectName, object);
      } else if (mapperType.match(/^Base64Url$/i) !== null) {
        payload = serializeBase64UrlType(objectName, object);
      } else if (mapperType.match(/^Sequence$/i) !== null) {
        payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
      } else if (mapperType.match(/^Dictionary$/i) !== null) {
        payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
      } else if (mapperType.match(/^Composite$/i) !== null) {
        payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
      }
    }
    return payload;
  }
  /**
   * Deserialize the given object based on its metadata defined in the mapper.
   *
   * @param mapper - The mapper which defines the metadata of the serializable object.
   * @param responseBody - A valid Javascript entity to be deserialized.
   * @param objectName - Name of the deserialized object.
   * @param options - Controls behavior of XML parser and builder.
   * @returns A valid deserialized Javascript object.
   */
  deserialize(mapper, responseBody, objectName, options = {}) {
    var _a3, _b2, _c2;
    const updatedOptions = {
      rootName: (_a3 = options.rootName) !== null && _a3 !== void 0 ? _a3 : "",
      includeRoot: (_b2 = options.includeRoot) !== null && _b2 !== void 0 ? _b2 : false,
      xmlCharKey: (_c2 = options.xmlCharKey) !== null && _c2 !== void 0 ? _c2 : XML_CHARKEY
    };
    if (responseBody == void 0) {
      if (this.isXML && mapper.type.name === "Sequence" && !mapper.xmlIsWrapped) {
        responseBody = [];
      }
      if (mapper.defaultValue !== void 0) {
        responseBody = mapper.defaultValue;
      }
      return responseBody;
    }
    let payload;
    const mapperType = mapper.type.name;
    if (!objectName) {
      objectName = mapper.serializedName;
    }
    if (mapperType.match(/^Composite$/i) !== null) {
      payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);
    } else {
      if (this.isXML) {
        const xmlCharKey = updatedOptions.xmlCharKey;
        const castResponseBody = responseBody;
        if (castResponseBody[XML_ATTRKEY] != void 0 && castResponseBody[xmlCharKey] != void 0) {
          responseBody = castResponseBody[xmlCharKey];
        }
      }
      if (mapperType.match(/^Number$/i) !== null) {
        payload = parseFloat(responseBody);
        if (isNaN(payload)) {
          payload = responseBody;
        }
      } else if (mapperType.match(/^Boolean$/i) !== null) {
        if (responseBody === "true") {
          payload = true;
        } else if (responseBody === "false") {
          payload = false;
        } else {
          payload = responseBody;
        }
      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {
        payload = responseBody;
      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {
        payload = new Date(responseBody);
      } else if (mapperType.match(/^UnixTime$/i) !== null) {
        payload = unixTimeToDate(responseBody);
      } else if (mapperType.match(/^ByteArray$/i) !== null) {
        payload = decodeString(responseBody);
      } else if (mapperType.match(/^Base64Url$/i) !== null) {
        payload = base64UrlToByteArray(responseBody);
      } else if (mapperType.match(/^Sequence$/i) !== null) {
        payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);
      } else if (mapperType.match(/^Dictionary$/i) !== null) {
        payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);
      }
    }
    if (mapper.isConstant) {
      payload = mapper.defaultValue;
    }
    return payload;
  }
};
function trimEnd(str, ch) {
  let len = str.length;
  while (len - 1 >= 0 && str[len - 1] === ch) {
    --len;
  }
  return str.substr(0, len);
}
function bufferToBase64Url(buffer) {
  if (!buffer) {
    return void 0;
  }
  if (!(buffer instanceof Uint8Array)) {
    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);
  }
  const str = encodeByteArray(buffer);
  return trimEnd(str, "=").replace(/\+/g, "-").replace(/\//g, "_");
}
function base64UrlToByteArray(str) {
  if (!str) {
    return void 0;
  }
  if (str && typeof str.valueOf() !== "string") {
    throw new Error("Please provide an input of type string for converting to Uint8Array");
  }
  str = str.replace(/-/g, "+").replace(/_/g, "/");
  return decodeString(str);
}
function splitSerializeName(prop) {
  const classes = [];
  let partialclass = "";
  if (prop) {
    const subwords = prop.split(".");
    for (const item of subwords) {
      if (item.charAt(item.length - 1) === "\\") {
        partialclass += item.substr(0, item.length - 1) + ".";
      } else {
        partialclass += item;
        classes.push(partialclass);
        partialclass = "";
      }
    }
  }
  return classes;
}
function dateToUnixTime(d) {
  if (!d) {
    return void 0;
  }
  if (typeof d.valueOf() === "string") {
    d = new Date(d);
  }
  return Math.floor(d.getTime() / 1e3);
}
function unixTimeToDate(n) {
  if (!n) {
    return void 0;
  }
  return new Date(n * 1e3);
}
function serializeBasicTypes(typeName, objectName, value) {
  if (value !== null && value !== void 0) {
    if (typeName.match(/^Number$/i) !== null) {
      if (typeof value !== "number") {
        throw new Error(`${objectName} with value ${value} must be of type number.`);
      }
    } else if (typeName.match(/^String$/i) !== null) {
      if (typeof value.valueOf() !== "string") {
        throw new Error(`${objectName} with value "${value}" must be of type string.`);
      }
    } else if (typeName.match(/^Uuid$/i) !== null) {
      if (!(typeof value.valueOf() === "string" && isValidUuid(value))) {
        throw new Error(`${objectName} with value "${value}" must be of type string and a valid uuid.`);
      }
    } else if (typeName.match(/^Boolean$/i) !== null) {
      if (typeof value !== "boolean") {
        throw new Error(`${objectName} with value ${value} must be of type boolean.`);
      }
    } else if (typeName.match(/^Stream$/i) !== null) {
      const objectType = typeof value;
      if (objectType !== "string" && objectType !== "function" && !(value instanceof ArrayBuffer) && !ArrayBuffer.isView(value) && !((typeof Blob === "function" || typeof Blob === "object") && value instanceof Blob)) {
        throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream.`);
      }
    }
  }
  return value;
}
function serializeEnumType(objectName, allowedValues, value) {
  if (!allowedValues) {
    throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);
  }
  const isPresent = allowedValues.some((item) => {
    if (typeof item.valueOf() === "string") {
      return item.toLowerCase() === value.toLowerCase();
    }
    return item === value;
  });
  if (!isPresent) {
    throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);
  }
  return value;
}
function serializeByteArrayType(objectName, value) {
  let returnValue = "";
  if (value != void 0) {
    if (!(value instanceof Uint8Array)) {
      throw new Error(`${objectName} must be of type Uint8Array.`);
    }
    returnValue = encodeByteArray(value);
  }
  return returnValue;
}
function serializeBase64UrlType(objectName, value) {
  let returnValue = "";
  if (value != void 0) {
    if (!(value instanceof Uint8Array)) {
      throw new Error(`${objectName} must be of type Uint8Array.`);
    }
    returnValue = bufferToBase64Url(value) || "";
  }
  return returnValue;
}
function serializeDateTypes(typeName, value, objectName) {
  if (value != void 0) {
    if (typeName.match(/^Date$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);
      }
      value = value instanceof Date ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);
    } else if (typeName.match(/^DateTime$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);
      }
      value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();
    } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);
      }
      value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();
    } else if (typeName.match(/^UnixTime$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format for it to be serialized in UnixTime/Epoch format.`);
      }
      value = dateToUnixTime(value);
    } else if (typeName.match(/^TimeSpan$/i) !== null) {
      if (!isDuration(value)) {
        throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was "${value}".`);
      }
    }
  }
  return value;
}
function serializeSequenceType(serializer4, mapper, object, objectName, isXml, options) {
  if (!Array.isArray(object)) {
    throw new Error(`${objectName} must be of type Array.`);
  }
  const elementType = mapper.type.element;
  if (!elementType || typeof elementType !== "object") {
    throw new Error(`element" metadata for an Array must be defined in the mapper and it must of type "object" in ${objectName}.`);
  }
  const tempArray = [];
  for (let i = 0; i < object.length; i++) {
    const serializedValue = serializer4.serialize(elementType, object[i], objectName, options);
    if (isXml && elementType.xmlNamespace) {
      const xmlnsKey = elementType.xmlNamespacePrefix ? `xmlns:${elementType.xmlNamespacePrefix}` : "xmlns";
      if (elementType.type.name === "Composite") {
        tempArray[i] = Object.assign({}, serializedValue);
        tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };
      } else {
        tempArray[i] = {};
        tempArray[i][options.xmlCharKey] = serializedValue;
        tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };
      }
    } else {
      tempArray[i] = serializedValue;
    }
  }
  return tempArray;
}
function serializeDictionaryType(serializer4, mapper, object, objectName, isXml, options) {
  if (typeof object !== "object") {
    throw new Error(`${objectName} must be of type object.`);
  }
  const valueType = mapper.type.value;
  if (!valueType || typeof valueType !== "object") {
    throw new Error(`"value" metadata for a Dictionary must be defined in the mapper and it must of type "object" in ${objectName}.`);
  }
  const tempDictionary = {};
  for (const key of Object.keys(object)) {
    const serializedValue = serializer4.serialize(valueType, object[key], objectName, options);
    tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);
  }
  if (isXml && mapper.xmlNamespace) {
    const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : "xmlns";
    const result = tempDictionary;
    result[XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };
    return result;
  }
  return tempDictionary;
}
function resolveAdditionalProperties(serializer4, mapper, objectName) {
  const additionalProperties = mapper.type.additionalProperties;
  if (!additionalProperties && mapper.type.className) {
    const modelMapper = resolveReferencedMapper(serializer4, mapper, objectName);
    return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;
  }
  return additionalProperties;
}
function resolveReferencedMapper(serializer4, mapper, objectName) {
  const className = mapper.type.className;
  if (!className) {
    throw new Error(`Class name for model "${objectName}" is not provided in the mapper "${JSON.stringify(mapper, void 0, 2)}".`);
  }
  return serializer4.modelMappers[className];
}
function resolveModelProperties(serializer4, mapper, objectName) {
  let modelProps = mapper.type.modelProperties;
  if (!modelProps) {
    const modelMapper = resolveReferencedMapper(serializer4, mapper, objectName);
    if (!modelMapper) {
      throw new Error(`mapper() cannot be null or undefined for model "${mapper.type.className}".`);
    }
    modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;
    if (!modelProps) {
      throw new Error(`modelProperties cannot be null or undefined in the mapper "${JSON.stringify(modelMapper)}" of type "${mapper.type.className}" for object "${objectName}".`);
    }
  }
  return modelProps;
}
function serializeCompositeType(serializer4, mapper, object, objectName, isXml, options) {
  if (getPolymorphicDiscriminatorRecursively(serializer4, mapper)) {
    mapper = getPolymorphicMapper(serializer4, mapper, object, "clientName");
  }
  if (object != void 0) {
    const payload = {};
    const modelProps = resolveModelProperties(serializer4, mapper, objectName);
    for (const key of Object.keys(modelProps)) {
      const propertyMapper = modelProps[key];
      if (propertyMapper.readOnly) {
        continue;
      }
      let propName;
      let parentObject = payload;
      if (serializer4.isXML) {
        if (propertyMapper.xmlIsWrapped) {
          propName = propertyMapper.xmlName;
        } else {
          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;
        }
      } else {
        const paths = splitSerializeName(propertyMapper.serializedName);
        propName = paths.pop();
        for (const pathName of paths) {
          const childObject = parentObject[pathName];
          if (childObject == void 0 && (object[key] != void 0 || propertyMapper.defaultValue !== void 0)) {
            parentObject[pathName] = {};
          }
          parentObject = parentObject[pathName];
        }
      }
      if (parentObject != void 0) {
        if (isXml && mapper.xmlNamespace) {
          const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : "xmlns";
          parentObject[XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[XML_ATTRKEY]), { [xmlnsKey]: mapper.xmlNamespace });
        }
        const propertyObjectName = propertyMapper.serializedName !== "" ? objectName + "." + propertyMapper.serializedName : objectName;
        let toSerialize = object[key];
        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer4, mapper);
        if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && toSerialize == void 0) {
          toSerialize = mapper.serializedName;
        }
        const serializedValue = serializer4.serialize(propertyMapper, toSerialize, propertyObjectName, options);
        if (serializedValue !== void 0 && propName != void 0) {
          const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);
          if (isXml && propertyMapper.xmlIsAttribute) {
            parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};
            parentObject[XML_ATTRKEY][propName] = serializedValue;
          } else if (isXml && propertyMapper.xmlIsWrapped) {
            parentObject[propName] = { [propertyMapper.xmlElementName]: value };
          } else {
            parentObject[propName] = value;
          }
        }
      }
    }
    const additionalPropertiesMapper = resolveAdditionalProperties(serializer4, mapper, objectName);
    if (additionalPropertiesMapper) {
      const propNames = Object.keys(modelProps);
      for (const clientPropName in object) {
        const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);
        if (isAdditionalProperty) {
          payload[clientPropName] = serializer4.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '["' + clientPropName + '"]', options);
        }
      }
    }
    return payload;
  }
  return object;
}
function getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {
  if (!isXml || !propertyMapper.xmlNamespace) {
    return serializedValue;
  }
  const xmlnsKey = propertyMapper.xmlNamespacePrefix ? `xmlns:${propertyMapper.xmlNamespacePrefix}` : "xmlns";
  const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };
  if (["Composite"].includes(propertyMapper.type.name)) {
    if (serializedValue[XML_ATTRKEY]) {
      return serializedValue;
    } else {
      const result2 = Object.assign({}, serializedValue);
      result2[XML_ATTRKEY] = xmlNamespace;
      return result2;
    }
  }
  const result = {};
  result[options.xmlCharKey] = serializedValue;
  result[XML_ATTRKEY] = xmlNamespace;
  return result;
}
function isSpecialXmlProperty(propertyName, options) {
  return [XML_ATTRKEY, options.xmlCharKey].includes(propertyName);
}
function deserializeCompositeType(serializer4, mapper, responseBody, objectName, options) {
  var _a3, _b2;
  const xmlCharKey = (_a3 = options.xmlCharKey) !== null && _a3 !== void 0 ? _a3 : XML_CHARKEY;
  if (getPolymorphicDiscriminatorRecursively(serializer4, mapper)) {
    mapper = getPolymorphicMapper(serializer4, mapper, responseBody, "serializedName");
  }
  const modelProps = resolveModelProperties(serializer4, mapper, objectName);
  let instance = {};
  const handledPropertyNames = [];
  for (const key of Object.keys(modelProps)) {
    const propertyMapper = modelProps[key];
    const paths = splitSerializeName(modelProps[key].serializedName);
    handledPropertyNames.push(paths[0]);
    const { serializedName, xmlName, xmlElementName } = propertyMapper;
    let propertyObjectName = objectName;
    if (serializedName !== "" && serializedName !== void 0) {
      propertyObjectName = objectName + "." + serializedName;
    }
    const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;
    if (headerCollectionPrefix) {
      const dictionary = {};
      for (const headerKey of Object.keys(responseBody)) {
        if (headerKey.startsWith(headerCollectionPrefix)) {
          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer4.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);
        }
        handledPropertyNames.push(headerKey);
      }
      instance[key] = dictionary;
    } else if (serializer4.isXML) {
      if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {
        instance[key] = serializer4.deserialize(propertyMapper, responseBody[XML_ATTRKEY][xmlName], propertyObjectName, options);
      } else if (propertyMapper.xmlIsMsText) {
        if (responseBody[xmlCharKey] !== void 0) {
          instance[key] = responseBody[xmlCharKey];
        } else if (typeof responseBody === "string") {
          instance[key] = responseBody;
        }
      } else {
        const propertyName = xmlElementName || xmlName || serializedName;
        if (propertyMapper.xmlIsWrapped) {
          const wrapped = responseBody[xmlName];
          const elementList = (_b2 = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _b2 !== void 0 ? _b2 : [];
          instance[key] = serializer4.deserialize(propertyMapper, elementList, propertyObjectName, options);
          handledPropertyNames.push(xmlName);
        } else {
          const property = responseBody[propertyName];
          instance[key] = serializer4.deserialize(propertyMapper, property, propertyObjectName, options);
          handledPropertyNames.push(propertyName);
        }
      }
    } else {
      let propertyInstance;
      let res = responseBody;
      for (const item of paths) {
        if (!res)
          break;
        res = res[item];
      }
      propertyInstance = res;
      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;
      if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && propertyInstance == void 0) {
        propertyInstance = mapper.serializedName;
      }
      let serializedValue;
      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === "") {
        propertyInstance = responseBody[key];
        const arrayInstance = serializer4.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
        for (const [k, v] of Object.entries(instance)) {
          if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {
            arrayInstance[k] = v;
          }
        }
        instance = arrayInstance;
      } else if (propertyInstance !== void 0 || propertyMapper.defaultValue !== void 0) {
        serializedValue = serializer4.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
        instance[key] = serializedValue;
      }
    }
  }
  const additionalPropertiesMapper = mapper.type.additionalProperties;
  if (additionalPropertiesMapper) {
    const isAdditionalProperty = (responsePropName) => {
      for (const clientPropName in modelProps) {
        const paths = splitSerializeName(modelProps[clientPropName].serializedName);
        if (paths[0] === responsePropName) {
          return false;
        }
      }
      return true;
    };
    for (const responsePropName in responseBody) {
      if (isAdditionalProperty(responsePropName)) {
        instance[responsePropName] = serializer4.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '["' + responsePropName + '"]', options);
      }
    }
  } else if (responseBody) {
    for (const key of Object.keys(responseBody)) {
      if (instance[key] === void 0 && !handledPropertyNames.includes(key) && !isSpecialXmlProperty(key, options)) {
        instance[key] = responseBody[key];
      }
    }
  }
  return instance;
}
function deserializeDictionaryType(serializer4, mapper, responseBody, objectName, options) {
  const value = mapper.type.value;
  if (!value || typeof value !== "object") {
    throw new Error(`"value" metadata for a Dictionary must be defined in the mapper and it must of type "object" in ${objectName}`);
  }
  if (responseBody) {
    const tempDictionary = {};
    for (const key of Object.keys(responseBody)) {
      tempDictionary[key] = serializer4.deserialize(value, responseBody[key], objectName, options);
    }
    return tempDictionary;
  }
  return responseBody;
}
function deserializeSequenceType(serializer4, mapper, responseBody, objectName, options) {
  const element = mapper.type.element;
  if (!element || typeof element !== "object") {
    throw new Error(`element" metadata for an Array must be defined in the mapper and it must of type "object" in ${objectName}`);
  }
  if (responseBody) {
    if (!Array.isArray(responseBody)) {
      responseBody = [responseBody];
    }
    const tempArray = [];
    for (let i = 0; i < responseBody.length; i++) {
      tempArray[i] = serializer4.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);
    }
    return tempArray;
  }
  return responseBody;
}
function getPolymorphicMapper(serializer4, mapper, object, polymorphicPropertyName) {
  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer4, mapper);
  if (polymorphicDiscriminator) {
    const discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];
    if (discriminatorName != void 0) {
      const discriminatorValue = object[discriminatorName];
      if (discriminatorValue != void 0) {
        const typeName = mapper.type.uberParent || mapper.type.className;
        const indexDiscriminator = discriminatorValue === typeName ? discriminatorValue : typeName + "." + discriminatorValue;
        const polymorphicMapper = serializer4.modelMappers.discriminators[indexDiscriminator];
        if (polymorphicMapper) {
          mapper = polymorphicMapper;
        }
      }
    }
  }
  return mapper;
}
function getPolymorphicDiscriminatorRecursively(serializer4, mapper) {
  return mapper.type.polymorphicDiscriminator || getPolymorphicDiscriminatorSafely(serializer4, mapper.type.uberParent) || getPolymorphicDiscriminatorSafely(serializer4, mapper.type.className);
}
function getPolymorphicDiscriminatorSafely(serializer4, typeName) {
  return typeName && serializer4.modelMappers[typeName] && serializer4.modelMappers[typeName].type.polymorphicDiscriminator;
}
function strEnum(o) {
  const result = {};
  for (const key of o) {
    result[key] = key;
  }
  return result;
}
var MapperType = strEnum([
  "Base64Url",
  "Boolean",
  "ByteArray",
  "Composite",
  "Date",
  "DateTime",
  "DateTimeRfc1123",
  "Dictionary",
  "Enum",
  "Number",
  "Object",
  "Sequence",
  "String",
  "Stream",
  "TimeSpan",
  "UnixTime"
]);

// node_modules/@azure/core-http/dist-esm/src/webResource.js
function isWebResourceLike(object) {
  if (object && typeof object === "object") {
    const castObject = object;
    if (typeof castObject.url === "string" && typeof castObject.method === "string" && typeof castObject.headers === "object" && isHttpHeadersLike(castObject.headers) && typeof castObject.validateRequestProperties === "function" && typeof castObject.prepare === "function" && typeof castObject.clone === "function") {
      return true;
    }
  }
  return false;
}
var WebResource = class {
  constructor(url2, method, body2, query, headers, streamResponseBody, withCredentials, abortSignal2, timeout, onUploadProgress, onDownloadProgress, proxySettings, keepAlive, decompressResponse, streamResponseStatusCodes) {
    this.streamResponseBody = streamResponseBody;
    this.streamResponseStatusCodes = streamResponseStatusCodes;
    this.url = url2 || "";
    this.method = method || "GET";
    this.headers = isHttpHeadersLike(headers) ? headers : new HttpHeaders(headers);
    this.body = body2;
    this.query = query;
    this.formData = void 0;
    this.withCredentials = withCredentials || false;
    this.abortSignal = abortSignal2;
    this.timeout = timeout || 0;
    this.onUploadProgress = onUploadProgress;
    this.onDownloadProgress = onDownloadProgress;
    this.proxySettings = proxySettings;
    this.keepAlive = keepAlive;
    this.decompressResponse = decompressResponse;
    this.requestId = this.headers.get("x-ms-client-request-id") || generateUuid();
  }
  /**
   * Validates that the required properties such as method, url, headers["Content-Type"],
   * headers["accept-language"] are defined. It will throw an error if one of the above
   * mentioned properties are not defined.
   */
  validateRequestProperties() {
    if (!this.method) {
      throw new Error("WebResource.method is required.");
    }
    if (!this.url) {
      throw new Error("WebResource.url is required.");
    }
  }
  /**
   * Prepares the request.
   * @param options - Options to provide for preparing the request.
   * @returns Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.
   */
  prepare(options) {
    if (!options) {
      throw new Error("options object is required");
    }
    if (options.method === void 0 || options.method === null || typeof options.method.valueOf() !== "string") {
      throw new Error("options.method must be a string.");
    }
    if (options.url && options.pathTemplate) {
      throw new Error("options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.");
    }
    if ((options.pathTemplate === void 0 || options.pathTemplate === null || typeof options.pathTemplate.valueOf() !== "string") && (options.url === void 0 || options.url === null || typeof options.url.valueOf() !== "string")) {
      throw new Error("Please provide exactly one of options.pathTemplate or options.url.");
    }
    if (options.url) {
      if (typeof options.url !== "string") {
        throw new Error('options.url must be of type "string".');
      }
      this.url = options.url;
    }
    if (options.method) {
      const validMethods = ["GET", "PUT", "HEAD", "DELETE", "OPTIONS", "POST", "PATCH", "TRACE"];
      if (validMethods.indexOf(options.method.toUpperCase()) === -1) {
        throw new Error('The provided method "' + options.method + '" is invalid. Supported HTTP methods are: ' + JSON.stringify(validMethods));
      }
    }
    this.method = options.method.toUpperCase();
    if (options.pathTemplate) {
      const { pathTemplate, pathParameters } = options;
      if (typeof pathTemplate !== "string") {
        throw new Error('options.pathTemplate must be of type "string".');
      }
      if (!options.baseUrl) {
        options.baseUrl = "https://management.azure.com";
      }
      const baseUrl = options.baseUrl;
      let url2 = baseUrl + (baseUrl.endsWith("/") ? "" : "/") + (pathTemplate.startsWith("/") ? pathTemplate.slice(1) : pathTemplate);
      const segments = url2.match(/({[\w-]*\s*[\w-]*})/gi);
      if (segments && segments.length) {
        if (!pathParameters) {
          throw new Error(`pathTemplate: ${pathTemplate} has been provided. Hence, options.pathParameters must also be provided.`);
        }
        segments.forEach(function(item) {
          const pathParamName = item.slice(1, -1);
          const pathParam = pathParameters[pathParamName];
          if (pathParam === null || pathParam === void 0 || !(typeof pathParam === "string" || typeof pathParam === "object")) {
            const stringifiedPathParameters = JSON.stringify(pathParameters, void 0, 2);
            throw new Error(`pathTemplate: ${pathTemplate} contains the path parameter ${pathParamName} however, it is not present in parameters: ${stringifiedPathParameters}.The value of the path parameter can either be a "string" of the form { ${pathParamName}: "some sample value" } or it can be an "object" of the form { "${pathParamName}": { value: "some sample value", skipUrlEncoding: true } }.`);
          }
          if (typeof pathParam.valueOf() === "string") {
            url2 = url2.replace(item, encodeURIComponent(pathParam));
          }
          if (typeof pathParam.valueOf() === "object") {
            if (!pathParam.value) {
              throw new Error(`options.pathParameters[${pathParamName}] is of type "object" but it does not contain a "value" property.`);
            }
            if (pathParam.skipUrlEncoding) {
              url2 = url2.replace(item, pathParam.value);
            } else {
              url2 = url2.replace(item, encodeURIComponent(pathParam.value));
            }
          }
        });
      }
      this.url = url2;
    }
    if (options.queryParameters) {
      const queryParameters = options.queryParameters;
      if (typeof queryParameters !== "object") {
        throw new Error(`options.queryParameters must be of type object. It should be a JSON object of "query-parameter-name" as the key and the "query-parameter-value" as the value. The "query-parameter-value" may be fo type "string" or an "object" of the form { value: "query-parameter-value", skipUrlEncoding: true }.`);
      }
      if (this.url && this.url.indexOf("?") === -1) {
        this.url += "?";
      }
      const queryParams = [];
      this.query = {};
      for (const queryParamName in queryParameters) {
        const queryParam = queryParameters[queryParamName];
        if (queryParam) {
          if (typeof queryParam === "string") {
            queryParams.push(queryParamName + "=" + encodeURIComponent(queryParam));
            this.query[queryParamName] = encodeURIComponent(queryParam);
          } else if (typeof queryParam === "object") {
            if (!queryParam.value) {
              throw new Error(`options.queryParameters[${queryParamName}] is of type "object" but it does not contain a "value" property.`);
            }
            if (queryParam.skipUrlEncoding) {
              queryParams.push(queryParamName + "=" + queryParam.value);
              this.query[queryParamName] = queryParam.value;
            } else {
              queryParams.push(queryParamName + "=" + encodeURIComponent(queryParam.value));
              this.query[queryParamName] = encodeURIComponent(queryParam.value);
            }
          }
        }
      }
      this.url += queryParams.join("&");
    }
    if (options.headers) {
      const headers = options.headers;
      for (const headerName of Object.keys(options.headers)) {
        this.headers.set(headerName, headers[headerName]);
      }
    }
    if (!this.headers.get("accept-language")) {
      this.headers.set("accept-language", "en-US");
    }
    if (!this.headers.get("x-ms-client-request-id") && !options.disableClientRequestId) {
      this.headers.set("x-ms-client-request-id", this.requestId);
    }
    if (!this.headers.get("Content-Type")) {
      this.headers.set("Content-Type", "application/json; charset=utf-8");
    }
    this.body = options.body;
    if (options.body !== void 0 && options.body !== null) {
      if (options.bodyIsStream) {
        if (!this.headers.get("Transfer-Encoding")) {
          this.headers.set("Transfer-Encoding", "chunked");
        }
        if (this.headers.get("Content-Type") !== "application/octet-stream") {
          this.headers.set("Content-Type", "application/octet-stream");
        }
      } else {
        if (options.serializationMapper) {
          this.body = new Serializer(options.mappers).serialize(options.serializationMapper, options.body, "requestBody");
        }
        if (!options.disableJsonStringifyOnBody) {
          this.body = JSON.stringify(options.body);
        }
      }
    }
    if (options.spanOptions) {
      this.spanOptions = options.spanOptions;
    }
    if (options.tracingContext) {
      this.tracingContext = options.tracingContext;
    }
    this.abortSignal = options.abortSignal;
    this.onDownloadProgress = options.onDownloadProgress;
    this.onUploadProgress = options.onUploadProgress;
    return this;
  }
  /**
   * Clone this WebResource HTTP request object.
   * @returns The clone of this WebResource HTTP request object.
   */
  clone() {
    const result = new WebResource(this.url, this.method, this.body, this.query, this.headers && this.headers.clone(), this.streamResponseBody, this.withCredentials, this.abortSignal, this.timeout, this.onUploadProgress, this.onDownloadProgress, this.proxySettings, this.keepAlive, this.decompressResponse, this.streamResponseStatusCodes);
    if (this.formData) {
      result.formData = this.formData;
    }
    if (this.operationSpec) {
      result.operationSpec = this.operationSpec;
    }
    if (this.shouldDeserialize) {
      result.shouldDeserialize = this.shouldDeserialize;
    }
    if (this.operationResponseGetter) {
      result.operationResponseGetter = this.operationResponseGetter;
    }
    return result;
  }
};

// node_modules/@azure/abort-controller/dist-esm/src/AbortController.js
var AbortError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "AbortError";
  }
};

// node_modules/@azure/core-http/dist-esm/src/url.js
var URLQuery = class {
  constructor() {
    this._rawQuery = {};
  }
  /**
   * Get whether or not there any query parameters in this URLQuery.
   */
  any() {
    return Object.keys(this._rawQuery).length > 0;
  }
  /**
   * Get the keys of the query string.
   */
  keys() {
    return Object.keys(this._rawQuery);
  }
  /**
   * Set a query parameter with the provided name and value. If the parameterValue is undefined or
   * empty, then this will attempt to remove an existing query parameter with the provided
   * parameterName.
   */
  set(parameterName, parameterValue) {
    const caseParameterValue = parameterValue;
    if (parameterName) {
      if (caseParameterValue !== void 0 && caseParameterValue !== null) {
        const newValue = Array.isArray(caseParameterValue) ? caseParameterValue : caseParameterValue.toString();
        this._rawQuery[parameterName] = newValue;
      } else {
        delete this._rawQuery[parameterName];
      }
    }
  }
  /**
   * Get the value of the query parameter with the provided name. If no parameter exists with the
   * provided parameter name, then undefined will be returned.
   */
  get(parameterName) {
    return parameterName ? this._rawQuery[parameterName] : void 0;
  }
  /**
   * Get the string representation of this query. The return value will not start with a "?".
   */
  toString() {
    let result = "";
    for (const parameterName in this._rawQuery) {
      if (result) {
        result += "&";
      }
      const parameterValue = this._rawQuery[parameterName];
      if (Array.isArray(parameterValue)) {
        const parameterStrings = [];
        for (const parameterValueElement of parameterValue) {
          parameterStrings.push(`${parameterName}=${parameterValueElement}`);
        }
        result += parameterStrings.join("&");
      } else {
        result += `${parameterName}=${parameterValue}`;
      }
    }
    return result;
  }
  /**
   * Parse a URLQuery from the provided text.
   */
  static parse(text) {
    const result = new URLQuery();
    if (text) {
      if (text.startsWith("?")) {
        text = text.substring(1);
      }
      let currentState = "ParameterName";
      let parameterName = "";
      let parameterValue = "";
      for (let i = 0; i < text.length; ++i) {
        const currentCharacter = text[i];
        switch (currentState) {
          case "ParameterName":
            switch (currentCharacter) {
              case "=":
                currentState = "ParameterValue";
                break;
              case "&":
                parameterName = "";
                parameterValue = "";
                break;
              default:
                parameterName += currentCharacter;
                break;
            }
            break;
          case "ParameterValue":
            switch (currentCharacter) {
              case "&":
                result.set(parameterName, parameterValue);
                parameterName = "";
                parameterValue = "";
                currentState = "ParameterName";
                break;
              default:
                parameterValue += currentCharacter;
                break;
            }
            break;
          default:
            throw new Error("Unrecognized URLQuery parse state: " + currentState);
        }
      }
      if (currentState === "ParameterValue") {
        result.set(parameterName, parameterValue);
      }
    }
    return result;
  }
};
var URLBuilder = class {
  /**
   * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL
   * (such as a host, port, path, or query), those parts will be added to this URL as well.
   */
  setScheme(scheme) {
    if (!scheme) {
      this._scheme = void 0;
    } else {
      this.set(scheme, "SCHEME");
    }
  }
  /**
   * Get the scheme that has been set in this URL.
   */
  getScheme() {
    return this._scheme;
  }
  /**
   * Set the host for this URL. If the provided host contains other parts of a URL (such as a
   * port, path, or query), those parts will be added to this URL as well.
   */
  setHost(host) {
    if (!host) {
      this._host = void 0;
    } else {
      this.set(host, "SCHEME_OR_HOST");
    }
  }
  /**
   * Get the host that has been set in this URL.
   */
  getHost() {
    return this._host;
  }
  /**
   * Set the port for this URL. If the provided port contains other parts of a URL (such as a
   * path or query), those parts will be added to this URL as well.
   */
  setPort(port) {
    if (port === void 0 || port === null || port === "") {
      this._port = void 0;
    } else {
      this.set(port.toString(), "PORT");
    }
  }
  /**
   * Get the port that has been set in this URL.
   */
  getPort() {
    return this._port;
  }
  /**
   * Set the path for this URL. If the provided path contains a query, then it will be added to
   * this URL as well.
   */
  setPath(path) {
    if (!path) {
      this._path = void 0;
    } else {
      const schemeIndex = path.indexOf("://");
      if (schemeIndex !== -1) {
        const schemeStart = path.lastIndexOf("/", schemeIndex);
        this.set(schemeStart === -1 ? path : path.substr(schemeStart + 1), "SCHEME");
      } else {
        this.set(path, "PATH");
      }
    }
  }
  /**
   * Append the provided path to this URL's existing path. If the provided path contains a query,
   * then it will be added to this URL as well.
   */
  appendPath(path) {
    if (path) {
      let currentPath = this.getPath();
      if (currentPath) {
        if (!currentPath.endsWith("/")) {
          currentPath += "/";
        }
        if (path.startsWith("/")) {
          path = path.substring(1);
        }
        path = currentPath + path;
      }
      this.set(path, "PATH");
    }
  }
  /**
   * Get the path that has been set in this URL.
   */
  getPath() {
    return this._path;
  }
  /**
   * Set the query in this URL.
   */
  setQuery(query) {
    if (!query) {
      this._query = void 0;
    } else {
      this._query = URLQuery.parse(query);
    }
  }
  /**
   * Set a query parameter with the provided name and value in this URL's query. If the provided
   * query parameter value is undefined or empty, then the query parameter will be removed if it
   * existed.
   */
  setQueryParameter(queryParameterName, queryParameterValue) {
    if (queryParameterName) {
      if (!this._query) {
        this._query = new URLQuery();
      }
      this._query.set(queryParameterName, queryParameterValue);
    }
  }
  /**
   * Get the value of the query parameter with the provided query parameter name. If no query
   * parameter exists with the provided name, then undefined will be returned.
   */
  getQueryParameterValue(queryParameterName) {
    return this._query ? this._query.get(queryParameterName) : void 0;
  }
  /**
   * Get the query in this URL.
   */
  getQuery() {
    return this._query ? this._query.toString() : void 0;
  }
  /**
   * Set the parts of this URL by parsing the provided text using the provided startState.
   */
  set(text, startState) {
    const tokenizer = new URLTokenizer(text, startState);
    while (tokenizer.next()) {
      const token = tokenizer.current();
      let tokenPath;
      if (token) {
        switch (token.type) {
          case "SCHEME":
            this._scheme = token.text || void 0;
            break;
          case "HOST":
            this._host = token.text || void 0;
            break;
          case "PORT":
            this._port = token.text || void 0;
            break;
          case "PATH":
            tokenPath = token.text || void 0;
            if (!this._path || this._path === "/" || tokenPath !== "/") {
              this._path = tokenPath;
            }
            break;
          case "QUERY":
            this._query = URLQuery.parse(token.text);
            break;
          default:
            throw new Error(`Unrecognized URLTokenType: ${token.type}`);
        }
      }
    }
  }
  /**
   * Serializes the URL as a string.
   * @returns the URL as a string.
   */
  toString() {
    let result = "";
    if (this._scheme) {
      result += `${this._scheme}://`;
    }
    if (this._host) {
      result += this._host;
    }
    if (this._port) {
      result += `:${this._port}`;
    }
    if (this._path) {
      if (!this._path.startsWith("/")) {
        result += "/";
      }
      result += this._path;
    }
    if (this._query && this._query.any()) {
      result += `?${this._query.toString()}`;
    }
    return result;
  }
  /**
   * If the provided searchValue is found in this URLBuilder, then replace it with the provided
   * replaceValue.
   */
  replaceAll(searchValue, replaceValue) {
    if (searchValue) {
      this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));
      this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));
      this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));
      this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));
      this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));
    }
  }
  /**
   * Parses a given string URL into a new {@link URLBuilder}.
   */
  static parse(text) {
    const result = new URLBuilder();
    result.set(text, "SCHEME_OR_HOST");
    return result;
  }
};
var URLToken = class {
  constructor(text, type2) {
    this.text = text;
    this.type = type2;
  }
  static scheme(text) {
    return new URLToken(text, "SCHEME");
  }
  static host(text) {
    return new URLToken(text, "HOST");
  }
  static port(text) {
    return new URLToken(text, "PORT");
  }
  static path(text) {
    return new URLToken(text, "PATH");
  }
  static query(text) {
    return new URLToken(text, "QUERY");
  }
};
function isAlphaNumericCharacter(character) {
  const characterCode = character.charCodeAt(0);
  return 48 <= characterCode && characterCode <= 57 || 65 <= characterCode && characterCode <= 90 || 97 <= characterCode && characterCode <= 122;
}
var URLTokenizer = class {
  constructor(_text, state) {
    this._text = _text;
    this._textLength = _text ? _text.length : 0;
    this._currentState = state !== void 0 && state !== null ? state : "SCHEME_OR_HOST";
    this._currentIndex = 0;
  }
  /**
   * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer
   * hasn't started or has finished tokenizing.
   */
  current() {
    return this._currentToken;
  }
  /**
   * Advance to the next URLToken and return whether or not a URLToken was found.
   */
  next() {
    if (!hasCurrentCharacter(this)) {
      this._currentToken = void 0;
    } else {
      switch (this._currentState) {
        case "SCHEME":
          nextScheme(this);
          break;
        case "SCHEME_OR_HOST":
          nextSchemeOrHost(this);
          break;
        case "HOST":
          nextHost(this);
          break;
        case "PORT":
          nextPort(this);
          break;
        case "PATH":
          nextPath(this);
          break;
        case "QUERY":
          nextQuery(this);
          break;
        default:
          throw new Error(`Unrecognized URLTokenizerState: ${this._currentState}`);
      }
    }
    return !!this._currentToken;
  }
};
function readRemaining(tokenizer) {
  let result = "";
  if (tokenizer._currentIndex < tokenizer._textLength) {
    result = tokenizer._text.substring(tokenizer._currentIndex);
    tokenizer._currentIndex = tokenizer._textLength;
  }
  return result;
}
function hasCurrentCharacter(tokenizer) {
  return tokenizer._currentIndex < tokenizer._textLength;
}
function getCurrentCharacter(tokenizer) {
  return tokenizer._text[tokenizer._currentIndex];
}
function nextCharacter(tokenizer, step) {
  if (hasCurrentCharacter(tokenizer)) {
    if (!step) {
      step = 1;
    }
    tokenizer._currentIndex += step;
  }
}
function peekCharacters(tokenizer, charactersToPeek) {
  let endIndex = tokenizer._currentIndex + charactersToPeek;
  if (tokenizer._textLength < endIndex) {
    endIndex = tokenizer._textLength;
  }
  return tokenizer._text.substring(tokenizer._currentIndex, endIndex);
}
function readWhile(tokenizer, condition) {
  let result = "";
  while (hasCurrentCharacter(tokenizer)) {
    const currentCharacter = getCurrentCharacter(tokenizer);
    if (!condition(currentCharacter)) {
      break;
    } else {
      result += currentCharacter;
      nextCharacter(tokenizer);
    }
  }
  return result;
}
function readWhileLetterOrDigit(tokenizer) {
  return readWhile(tokenizer, (character) => isAlphaNumericCharacter(character));
}
function readUntilCharacter(tokenizer, ...terminatingCharacters) {
  return readWhile(tokenizer, (character) => terminatingCharacters.indexOf(character) === -1);
}
function nextScheme(tokenizer) {
  const scheme = readWhileLetterOrDigit(tokenizer);
  tokenizer._currentToken = URLToken.scheme(scheme);
  if (!hasCurrentCharacter(tokenizer)) {
    tokenizer._currentState = "DONE";
  } else {
    tokenizer._currentState = "HOST";
  }
}
function nextSchemeOrHost(tokenizer) {
  const schemeOrHost = readUntilCharacter(tokenizer, ":", "/", "?");
  if (!hasCurrentCharacter(tokenizer)) {
    tokenizer._currentToken = URLToken.host(schemeOrHost);
    tokenizer._currentState = "DONE";
  } else if (getCurrentCharacter(tokenizer) === ":") {
    if (peekCharacters(tokenizer, 3) === "://") {
      tokenizer._currentToken = URLToken.scheme(schemeOrHost);
      tokenizer._currentState = "HOST";
    } else {
      tokenizer._currentToken = URLToken.host(schemeOrHost);
      tokenizer._currentState = "PORT";
    }
  } else {
    tokenizer._currentToken = URLToken.host(schemeOrHost);
    if (getCurrentCharacter(tokenizer) === "/") {
      tokenizer._currentState = "PATH";
    } else {
      tokenizer._currentState = "QUERY";
    }
  }
}
function nextHost(tokenizer) {
  if (peekCharacters(tokenizer, 3) === "://") {
    nextCharacter(tokenizer, 3);
  }
  const host = readUntilCharacter(tokenizer, ":", "/", "?");
  tokenizer._currentToken = URLToken.host(host);
  if (!hasCurrentCharacter(tokenizer)) {
    tokenizer._currentState = "DONE";
  } else if (getCurrentCharacter(tokenizer) === ":") {
    tokenizer._currentState = "PORT";
  } else if (getCurrentCharacter(tokenizer) === "/") {
    tokenizer._currentState = "PATH";
  } else {
    tokenizer._currentState = "QUERY";
  }
}
function nextPort(tokenizer) {
  if (getCurrentCharacter(tokenizer) === ":") {
    nextCharacter(tokenizer);
  }
  const port = readUntilCharacter(tokenizer, "/", "?");
  tokenizer._currentToken = URLToken.port(port);
  if (!hasCurrentCharacter(tokenizer)) {
    tokenizer._currentState = "DONE";
  } else if (getCurrentCharacter(tokenizer) === "/") {
    tokenizer._currentState = "PATH";
  } else {
    tokenizer._currentState = "QUERY";
  }
}
function nextPath(tokenizer) {
  const path = readUntilCharacter(tokenizer, "?");
  tokenizer._currentToken = URLToken.path(path);
  if (!hasCurrentCharacter(tokenizer)) {
    tokenizer._currentState = "DONE";
  } else {
    tokenizer._currentState = "QUERY";
  }
}
function nextQuery(tokenizer) {
  if (getCurrentCharacter(tokenizer) === "?") {
    nextCharacter(tokenizer);
  }
  const query = readRemaining(tokenizer);
  tokenizer._currentToken = URLToken.query(query);
  tokenizer._currentState = "DONE";
}

// node_modules/@azure/core-http/dist-esm/src/util/sanitizer.js
var RedactedString = "REDACTED";
var defaultAllowedHeaderNames = [
  "x-ms-client-request-id",
  "x-ms-return-client-request-id",
  "x-ms-useragent",
  "x-ms-correlation-request-id",
  "x-ms-request-id",
  "client-request-id",
  "ms-cv",
  "return-client-request-id",
  "traceparent",
  "Access-Control-Allow-Credentials",
  "Access-Control-Allow-Headers",
  "Access-Control-Allow-Methods",
  "Access-Control-Allow-Origin",
  "Access-Control-Expose-Headers",
  "Access-Control-Max-Age",
  "Access-Control-Request-Headers",
  "Access-Control-Request-Method",
  "Origin",
  "Accept",
  "Accept-Encoding",
  "Cache-Control",
  "Connection",
  "Content-Length",
  "Content-Type",
  "Date",
  "ETag",
  "Expires",
  "If-Match",
  "If-Modified-Since",
  "If-None-Match",
  "If-Unmodified-Since",
  "Last-Modified",
  "Pragma",
  "Request-Id",
  "Retry-After",
  "Server",
  "Transfer-Encoding",
  "User-Agent",
  "WWW-Authenticate"
];
var defaultAllowedQueryParameters = ["api-version"];
var Sanitizer = class {
  constructor({ allowedHeaderNames = [], allowedQueryParameters = [] } = {}) {
    allowedHeaderNames = Array.isArray(allowedHeaderNames) ? defaultAllowedHeaderNames.concat(allowedHeaderNames) : defaultAllowedHeaderNames;
    allowedQueryParameters = Array.isArray(allowedQueryParameters) ? defaultAllowedQueryParameters.concat(allowedQueryParameters) : defaultAllowedQueryParameters;
    this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));
    this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));
  }
  sanitize(obj) {
    const seen = /* @__PURE__ */ new Set();
    return JSON.stringify(obj, (key, value) => {
      if (value instanceof Error) {
        return Object.assign(Object.assign({}, value), { name: value.name, message: value.message });
      }
      if (key === "_headersMap") {
        return this.sanitizeHeaders(value);
      } else if (key === "url") {
        return this.sanitizeUrl(value);
      } else if (key === "query") {
        return this.sanitizeQuery(value);
      } else if (key === "body") {
        return void 0;
      } else if (key === "response") {
        return void 0;
      } else if (key === "operationSpec") {
        return void 0;
      } else if (Array.isArray(value) || isObject(value)) {
        if (seen.has(value)) {
          return "[Circular]";
        }
        seen.add(value);
      }
      return value;
    }, 2);
  }
  sanitizeHeaders(value) {
    return this.sanitizeObject(value, this.allowedHeaderNames, (v, k) => v[k].value);
  }
  sanitizeQuery(value) {
    return this.sanitizeObject(value, this.allowedQueryParameters, (v, k) => v[k]);
  }
  sanitizeObject(value, allowedKeys, accessor) {
    if (typeof value !== "object" || value === null) {
      return value;
    }
    const sanitized = {};
    for (const k of Object.keys(value)) {
      if (allowedKeys.has(k.toLowerCase())) {
        sanitized[k] = accessor(value, k);
      } else {
        sanitized[k] = RedactedString;
      }
    }
    return sanitized;
  }
  sanitizeUrl(value) {
    if (typeof value !== "string" || value === null) {
      return value;
    }
    const urlBuilder = URLBuilder.parse(value);
    const queryString = urlBuilder.getQuery();
    if (!queryString) {
      return value;
    }
    const query = URLQuery.parse(queryString);
    for (const k of query.keys()) {
      if (!this.allowedQueryParameters.has(k.toLowerCase())) {
        query.set(k, RedactedString);
      }
    }
    urlBuilder.setQuery(query.toString());
    return urlBuilder.toString();
  }
};

// node_modules/@azure/core-http/dist-esm/src/util/inspect.browser.js
var custom = {};

// node_modules/@azure/core-http/dist-esm/src/restError.js
var errorSanitizer = new Sanitizer();
var RestError = class extends Error {
  constructor(message, code, statusCode, request, response) {
    super(message);
    this.name = "RestError";
    this.code = code;
    this.statusCode = statusCode;
    this.request = request;
    this.response = response;
    Object.setPrototypeOf(this, RestError.prototype);
  }
  /**
   * Logging method for util.inspect in Node
   */
  [custom]() {
    return `RestError: ${this.message} 
 ${errorSanitizer.sanitize(this)}`;
  }
};
RestError.REQUEST_SEND_ERROR = "REQUEST_SEND_ERROR";
RestError.PARSE_ERROR = "PARSE_ERROR";

// node_modules/@azure/core-http/dist-esm/src/xhrHttpClient.js
var XhrHttpClient = class {
  sendRequest(request) {
    var _a3;
    const xhr = new XMLHttpRequest();
    if (request.proxySettings) {
      throw new Error("HTTP proxy is not supported in browser environment");
    }
    const abortSignal2 = request.abortSignal;
    if (abortSignal2) {
      if (abortSignal2.aborted) {
        return Promise.reject(new AbortError("The operation was aborted."));
      }
      const listener = () => {
        xhr.abort();
      };
      abortSignal2.addEventListener("abort", listener);
      xhr.addEventListener("readystatechange", () => {
        if (xhr.readyState === XMLHttpRequest.DONE) {
          abortSignal2.removeEventListener("abort", listener);
        }
      });
    }
    addProgressListener(xhr.upload, request.onUploadProgress);
    addProgressListener(xhr, request.onDownloadProgress);
    if (request.formData) {
      const formData = request.formData;
      const requestForm = new FormData();
      const appendFormValue = (key, value) => {
        if (value && Object.prototype.hasOwnProperty.call(value, "value") && Object.prototype.hasOwnProperty.call(value, "options")) {
          requestForm.append(key, value.value, value.options);
        } else {
          requestForm.append(key, value);
        }
      };
      for (const formKey of Object.keys(formData)) {
        const formValue = formData[formKey];
        if (Array.isArray(formValue)) {
          for (let j = 0; j < formValue.length; j++) {
            appendFormValue(formKey, formValue[j]);
          }
        } else {
          appendFormValue(formKey, formValue);
        }
      }
      request.body = requestForm;
      request.formData = void 0;
      const contentType2 = request.headers.get("Content-Type");
      if (contentType2 && contentType2.indexOf("multipart/form-data") !== -1) {
        request.headers.remove("Content-Type");
      }
    }
    xhr.open(request.method, request.url);
    xhr.timeout = request.timeout;
    xhr.withCredentials = request.withCredentials;
    for (const header of request.headers.headersArray()) {
      xhr.setRequestHeader(header.name, header.value);
    }
    xhr.responseType = ((_a3 = request.streamResponseStatusCodes) === null || _a3 === void 0 ? void 0 : _a3.size) || request.streamResponseBody ? "blob" : "text";
    xhr.send(request.body === void 0 ? null : request.body);
    if (xhr.responseType === "blob") {
      return new Promise((resolve, reject) => {
        handleBlobResponse(xhr, request, resolve, reject);
        rejectOnTerminalEvent(request, xhr, reject);
      });
    } else {
      return new Promise(function(resolve, reject) {
        xhr.addEventListener("load", () => resolve({
          request,
          status: xhr.status,
          headers: parseHeaders(xhr),
          bodyAsText: xhr.responseText
        }));
        rejectOnTerminalEvent(request, xhr, reject);
      });
    }
  }
};
function handleBlobResponse(xhr, request, res, rej) {
  xhr.addEventListener("readystatechange", () => {
    var _a3;
    if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {
      if (request.streamResponseBody || ((_a3 = request.streamResponseStatusCodes) === null || _a3 === void 0 ? void 0 : _a3.has(xhr.status))) {
        const blobBody = new Promise((resolve, reject) => {
          xhr.addEventListener("load", () => {
            resolve(xhr.response);
          });
          rejectOnTerminalEvent(request, xhr, reject);
        });
        res({
          request,
          status: xhr.status,
          headers: parseHeaders(xhr),
          blobBody
        });
      } else {
        xhr.addEventListener("load", () => {
          if (xhr.response) {
            const reader = new FileReader();
            reader.onload = function(e) {
              var _a4;
              const text = (_a4 = e.target) === null || _a4 === void 0 ? void 0 : _a4.result;
              res({
                request,
                status: xhr.status,
                headers: parseHeaders(xhr),
                bodyAsText: text
              });
            };
            reader.onerror = function(_e) {
              rej(reader.error);
            };
            reader.readAsText(xhr.response, "UTF-8");
          } else {
            res({
              request,
              status: xhr.status,
              headers: parseHeaders(xhr)
            });
          }
        });
      }
    }
  });
}
function addProgressListener(xhr, listener) {
  if (listener) {
    xhr.addEventListener("progress", (rawEvent) => listener({
      loadedBytes: rawEvent.loaded
    }));
  }
}
function parseHeaders(xhr) {
  const responseHeaders = new HttpHeaders();
  const headerLines = xhr.getAllResponseHeaders().trim().split(/[\r\n]+/);
  for (const line of headerLines) {
    const index = line.indexOf(":");
    const headerName = line.slice(0, index);
    const headerValue = line.slice(index + 2);
    responseHeaders.set(headerName, headerValue);
  }
  return responseHeaders;
}
function rejectOnTerminalEvent(request, xhr, reject) {
  xhr.addEventListener("error", () => reject(new RestError(`Failed to send request to ${request.url}`, RestError.REQUEST_SEND_ERROR, void 0, request)));
  const abortError = new AbortError("The operation was aborted.");
  xhr.addEventListener("abort", () => reject(abortError));
  xhr.addEventListener("timeout", () => reject(abortError));
}

// node_modules/@azure/core-http/dist-esm/src/httpPipelineLogLevel.js
var HttpPipelineLogLevel;
(function(HttpPipelineLogLevel2) {
  HttpPipelineLogLevel2[HttpPipelineLogLevel2["OFF"] = 0] = "OFF";
  HttpPipelineLogLevel2[HttpPipelineLogLevel2["ERROR"] = 1] = "ERROR";
  HttpPipelineLogLevel2[HttpPipelineLogLevel2["WARNING"] = 2] = "WARNING";
  HttpPipelineLogLevel2[HttpPipelineLogLevel2["INFO"] = 3] = "INFO";
})(HttpPipelineLogLevel || (HttpPipelineLogLevel = {}));

// node_modules/tslib/tslib.es6.mjs
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f2, v) {
    if (f2(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f2) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f2 ? f2(v) : v;
    } : f2;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}

// node_modules/@azure/core-http/dist-esm/src/operationOptions.js
function operationOptionsToRequestOptionsBase(opts) {
  const { requestOptions, tracingOptions } = opts, additionalOptions = __rest(opts, ["requestOptions", "tracingOptions"]);
  let result = additionalOptions;
  if (requestOptions) {
    result = Object.assign(Object.assign({}, result), requestOptions);
  }
  if (tracingOptions) {
    result.tracingContext = tracingOptions.tracingContext;
    result.spanOptions = tracingOptions === null || tracingOptions === void 0 ? void 0 : tracingOptions.spanOptions;
  }
  return result;
}

// node_modules/@azure/core-http/dist-esm/src/policies/requestPolicy.js
var BaseRequestPolicy = class {
  /**
   * The main method to implement that manipulates a request/response.
   */
  constructor(_nextPolicy, _options) {
    this._nextPolicy = _nextPolicy;
    this._options = _options;
  }
  /**
   * Get whether or not a log with the provided log level should be logged.
   * @param logLevel - The log level of the log that will be logged.
   * @returns Whether or not a log with the provided log level should be logged.
   */
  shouldLog(logLevel) {
    return this._options.shouldLog(logLevel);
  }
  /**
   * Attempt to log the provided message to the provided logger. If no logger was provided or if
   * the log level does not meat the logger's threshold, then nothing will be logged.
   * @param logLevel - The log level of this log.
   * @param message - The message of this log.
   */
  log(logLevel, message) {
    this._options.log(logLevel, message);
  }
};
var RequestPolicyOptions = class {
  constructor(_logger) {
    this._logger = _logger;
  }
  /**
   * Get whether or not a log with the provided log level should be logged.
   * @param logLevel - The log level of the log that will be logged.
   * @returns Whether or not a log with the provided log level should be logged.
   */
  shouldLog(logLevel) {
    return !!this._logger && logLevel !== HttpPipelineLogLevel.OFF && logLevel <= this._logger.minimumLogLevel;
  }
  /**
   * Attempt to log the provided message to the provided logger. If no logger was provided or if
   * the log level does not meet the logger's threshold, then nothing will be logged.
   * @param logLevel - The log level of this log.
   * @param message - The message of this log.
   */
  log(logLevel, message) {
    if (this._logger && this.shouldLog(logLevel)) {
      this._logger.log(logLevel, message);
    }
  }
};

// node_modules/@azure/core-http/dist-esm/src/util/xml.browser.js
if (!self.document || !self.DOMParser || !self.Node || !self.XMLSerializer) {
  throw new Error(`This library depends on the following DOM objects: ["document", "DOMParser", "Node", "XMLSerializer"] to parse XML, but some of these are undefined. You may provide a polyfill to make these globally available in order to support your environment. For more information, please refer to https://aka.ms/azsdk/js/web-workers. `);
}
var cachedDoc;
function getDoc() {
  if (!cachedDoc) {
    cachedDoc = document.implementation.createDocument(null, null, null);
  }
  return cachedDoc;
}
var cachedParser;
function getParser() {
  if (!cachedParser) {
    cachedParser = new DOMParser();
  }
  return cachedParser;
}
var cachedSerializer;
function getSerializer() {
  if (!cachedSerializer) {
    cachedSerializer = new XMLSerializer();
  }
  return cachedSerializer;
}
var ttPolicy;
if (typeof self.trustedTypes !== "undefined") {
  ttPolicy = self.trustedTypes.createPolicy("@azure/core-http#xml.browser", {
    createHTML: (s) => s
  });
}
function parseXML(str, opts = {}) {
  var _a3, _b2, _c2, _d2;
  try {
    const updatedOptions = {
      rootName: (_a3 = opts.rootName) !== null && _a3 !== void 0 ? _a3 : "",
      includeRoot: (_b2 = opts.includeRoot) !== null && _b2 !== void 0 ? _b2 : false,
      xmlCharKey: (_c2 = opts.xmlCharKey) !== null && _c2 !== void 0 ? _c2 : XML_CHARKEY
    };
    const dom = getParser().parseFromString((_d2 = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(str)) !== null && _d2 !== void 0 ? _d2 : str, "application/xml");
    throwIfError(dom);
    let obj;
    if (updatedOptions.includeRoot) {
      obj = domToObject(dom, updatedOptions);
    } else {
      obj = domToObject(dom.childNodes[0], updatedOptions);
    }
    return Promise.resolve(obj);
  } catch (err) {
    return Promise.reject(err);
  }
}
var errorNS;
function getErrorNamespace() {
  var _a3, _b2;
  if (errorNS === void 0) {
    try {
      const invalidXML = (_a3 = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML("INVALID")) !== null && _a3 !== void 0 ? _a3 : "INVALID";
      errorNS = (_b2 = getParser().parseFromString(invalidXML, "text/xml").getElementsByTagName("parsererror")[0].namespaceURI) !== null && _b2 !== void 0 ? _b2 : "";
    } catch (ignored) {
      errorNS = "";
    }
  }
  return errorNS;
}
function throwIfError(dom) {
  const parserErrors = dom.getElementsByTagName("parsererror");
  if (parserErrors.length > 0 && getErrorNamespace()) {
    for (let i = 0; i < parserErrors.length; i++) {
      if (parserErrors[i].namespaceURI === errorNS) {
        throw new Error(parserErrors[i].innerHTML);
      }
    }
  }
}
function isElement(node) {
  return !!node.attributes;
}
function asElementWithAttributes(node) {
  return isElement(node) && node.hasAttributes() ? node : void 0;
}
function domToObject(node, options) {
  let result = {};
  const childNodeCount = node.childNodes.length;
  const firstChildNode = node.childNodes[0];
  const onlyChildTextValue = firstChildNode && childNodeCount === 1 && firstChildNode.nodeType === Node.TEXT_NODE && firstChildNode.nodeValue || void 0;
  const elementWithAttributes = asElementWithAttributes(node);
  if (elementWithAttributes) {
    result[XML_ATTRKEY] = {};
    for (let i = 0; i < elementWithAttributes.attributes.length; i++) {
      const attr = elementWithAttributes.attributes[i];
      result[XML_ATTRKEY][attr.nodeName] = attr.nodeValue;
    }
    if (onlyChildTextValue) {
      result[options.xmlCharKey] = onlyChildTextValue;
    }
  } else if (childNodeCount === 0) {
    result = "";
  } else if (onlyChildTextValue) {
    result = onlyChildTextValue;
  }
  if (!onlyChildTextValue) {
    for (let i = 0; i < childNodeCount; i++) {
      const child = node.childNodes[i];
      if (child.nodeType !== Node.TEXT_NODE) {
        const childObject = domToObject(child, options);
        if (!result[child.nodeName]) {
          result[child.nodeName] = childObject;
        } else if (Array.isArray(result[child.nodeName])) {
          result[child.nodeName].push(childObject);
        } else {
          result[child.nodeName] = [result[child.nodeName], childObject];
        }
      }
    }
  }
  return result;
}
function stringifyXML(content, opts = {}) {
  var _a3, _b2, _c2;
  const updatedOptions = {
    rootName: (_a3 = opts.rootName) !== null && _a3 !== void 0 ? _a3 : "root",
    includeRoot: (_b2 = opts.includeRoot) !== null && _b2 !== void 0 ? _b2 : false,
    xmlCharKey: (_c2 = opts.xmlCharKey) !== null && _c2 !== void 0 ? _c2 : XML_CHARKEY
  };
  const dom = buildNode(content, updatedOptions.rootName, updatedOptions)[0];
  return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + getSerializer().serializeToString(dom);
}
function buildAttributes(attrs) {
  const result = [];
  for (const key of Object.keys(attrs)) {
    const attr = getDoc().createAttribute(key);
    attr.value = attrs[key].toString();
    result.push(attr);
  }
  return result;
}
function buildNode(obj, elementName, options) {
  if (obj === void 0 || obj === null || typeof obj === "string" || typeof obj === "number" || typeof obj === "boolean") {
    const elem = getDoc().createElement(elementName);
    elem.textContent = obj === void 0 || obj === null ? "" : obj.toString();
    return [elem];
  } else if (Array.isArray(obj)) {
    const result = [];
    for (const arrayElem of obj) {
      for (const child of buildNode(arrayElem, elementName, options)) {
        result.push(child);
      }
    }
    return result;
  } else if (typeof obj === "object") {
    const elem = getDoc().createElement(elementName);
    for (const key of Object.keys(obj)) {
      if (key === XML_ATTRKEY) {
        for (const attr of buildAttributes(obj[key])) {
          elem.attributes.setNamedItem(attr);
        }
      } else if (key === options.xmlCharKey) {
        elem.textContent = obj[key].toString();
      } else {
        for (const child of buildNode(obj[key], key, options)) {
          elem.appendChild(child);
        }
      }
    }
    return [elem];
  } else {
    throw new Error(`Illegal value passed to buildObject: ${obj}`);
  }
}

// node_modules/@azure/core-http/dist-esm/src/policies/deserializationPolicy.js
function deserializationPolicy(deserializationContentTypes, parsingOptions) {
  return {
    create: (nextPolicy, options) => {
      return new DeserializationPolicy(nextPolicy, options, deserializationContentTypes, parsingOptions);
    }
  };
}
var defaultJsonContentTypes = ["application/json", "text/json"];
var defaultXmlContentTypes = ["application/xml", "application/atom+xml"];
var DeserializationPolicy = class extends BaseRequestPolicy {
  constructor(nextPolicy, requestPolicyOptions, deserializationContentTypes, parsingOptions = {}) {
    var _a3;
    super(nextPolicy, requestPolicyOptions);
    this.jsonContentTypes = deserializationContentTypes && deserializationContentTypes.json || defaultJsonContentTypes;
    this.xmlContentTypes = deserializationContentTypes && deserializationContentTypes.xml || defaultXmlContentTypes;
    this.xmlCharKey = (_a3 = parsingOptions.xmlCharKey) !== null && _a3 !== void 0 ? _a3 : XML_CHARKEY;
  }
  async sendRequest(request) {
    return this._nextPolicy.sendRequest(request).then((response) => deserializeResponseBody(this.jsonContentTypes, this.xmlContentTypes, response, {
      xmlCharKey: this.xmlCharKey
    }));
  }
};
function getOperationResponse(parsedResponse) {
  let result;
  const request = parsedResponse.request;
  const operationSpec = request.operationSpec;
  if (operationSpec) {
    const operationResponseGetter = request.operationResponseGetter;
    if (!operationResponseGetter) {
      result = operationSpec.responses[parsedResponse.status];
    } else {
      result = operationResponseGetter(operationSpec, parsedResponse);
    }
  }
  return result;
}
function shouldDeserializeResponse(parsedResponse) {
  const shouldDeserialize = parsedResponse.request.shouldDeserialize;
  let result;
  if (shouldDeserialize === void 0) {
    result = true;
  } else if (typeof shouldDeserialize === "boolean") {
    result = shouldDeserialize;
  } else {
    result = shouldDeserialize(parsedResponse);
  }
  return result;
}
function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options = {}) {
  var _a3, _b2, _c2;
  const updatedOptions = {
    rootName: (_a3 = options.rootName) !== null && _a3 !== void 0 ? _a3 : "",
    includeRoot: (_b2 = options.includeRoot) !== null && _b2 !== void 0 ? _b2 : false,
    xmlCharKey: (_c2 = options.xmlCharKey) !== null && _c2 !== void 0 ? _c2 : XML_CHARKEY
  };
  return parse2(jsonContentTypes, xmlContentTypes, response, updatedOptions).then((parsedResponse) => {
    if (!shouldDeserializeResponse(parsedResponse)) {
      return parsedResponse;
    }
    const operationSpec = parsedResponse.request.operationSpec;
    if (!operationSpec || !operationSpec.responses) {
      return parsedResponse;
    }
    const responseSpec = getOperationResponse(parsedResponse);
    const { error, shouldReturnResponse } = handleErrorResponse(parsedResponse, operationSpec, responseSpec);
    if (error) {
      throw error;
    } else if (shouldReturnResponse) {
      return parsedResponse;
    }
    if (responseSpec) {
      if (responseSpec.bodyMapper) {
        let valueToDeserialize = parsedResponse.parsedBody;
        if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {
          valueToDeserialize = typeof valueToDeserialize === "object" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];
        }
        try {
          parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, "operationRes.parsedBody", options);
        } catch (innerError) {
          const restError = new RestError(`Error ${innerError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, void 0, parsedResponse.status, parsedResponse.request, parsedResponse);
          throw restError;
        }
      } else if (operationSpec.httpMethod === "HEAD") {
        parsedResponse.parsedBody = response.status >= 200 && response.status < 300;
      }
      if (responseSpec.headersMapper) {
        parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJson(), "operationRes.parsedHeaders", options);
      }
    }
    return parsedResponse;
  });
}
function isOperationSpecEmpty(operationSpec) {
  const expectedStatusCodes = Object.keys(operationSpec.responses);
  return expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === "default";
}
function handleErrorResponse(parsedResponse, operationSpec, responseSpec) {
  var _a3;
  const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;
  const isExpectedStatusCode = isOperationSpecEmpty(operationSpec) ? isSuccessByStatus : !!responseSpec;
  if (isExpectedStatusCode) {
    if (responseSpec) {
      if (!responseSpec.isError) {
        return { error: null, shouldReturnResponse: false };
      }
    } else {
      return { error: null, shouldReturnResponse: false };
    }
  }
  const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;
  const streaming = ((_a3 = parsedResponse.request.streamResponseStatusCodes) === null || _a3 === void 0 ? void 0 : _a3.has(parsedResponse.status)) || parsedResponse.request.streamResponseBody;
  const initialErrorMessage = streaming ? `Unexpected status code: ${parsedResponse.status}` : parsedResponse.bodyAsText;
  const error = new RestError(initialErrorMessage, void 0, parsedResponse.status, parsedResponse.request, parsedResponse);
  if (!errorResponseSpec) {
    throw error;
  }
  const defaultBodyMapper = errorResponseSpec.bodyMapper;
  const defaultHeadersMapper = errorResponseSpec.headersMapper;
  try {
    if (parsedResponse.parsedBody) {
      const parsedBody = parsedResponse.parsedBody;
      let parsedError;
      if (defaultBodyMapper) {
        let valueToDeserialize = parsedBody;
        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperType.Sequence) {
          valueToDeserialize = typeof parsedBody === "object" ? parsedBody[defaultBodyMapper.xmlElementName] : [];
        }
        parsedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, "error.response.parsedBody");
      }
      const internalError = parsedBody.error || parsedError || parsedBody;
      error.code = internalError.code;
      if (internalError.message) {
        error.message = internalError.message;
      }
      if (defaultBodyMapper) {
        error.response.parsedBody = parsedError;
      }
    }
    if (parsedResponse.headers && defaultHeadersMapper) {
      error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJson(), "operationRes.parsedHeaders");
    }
  } catch (defaultError) {
    error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody - "${parsedResponse.bodyAsText}" for the default response.`;
  }
  return { error, shouldReturnResponse: false };
}
function parse2(jsonContentTypes, xmlContentTypes, operationResponse, opts) {
  var _a3;
  const errorHandler = (err) => {
    const msg = `Error "${err}" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;
    const errCode = err.code || RestError.PARSE_ERROR;
    const e = new RestError(msg, errCode, operationResponse.status, operationResponse.request, operationResponse);
    return Promise.reject(e);
  };
  const streaming = ((_a3 = operationResponse.request.streamResponseStatusCodes) === null || _a3 === void 0 ? void 0 : _a3.has(operationResponse.status)) || operationResponse.request.streamResponseBody;
  if (!streaming && operationResponse.bodyAsText) {
    const text = operationResponse.bodyAsText;
    const contentType2 = operationResponse.headers.get("Content-Type") || "";
    const contentComponents = !contentType2 ? [] : contentType2.split(";").map((component) => component.toLowerCase());
    if (contentComponents.length === 0 || contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)) {
      return new Promise((resolve) => {
        operationResponse.parsedBody = JSON.parse(text);
        resolve(operationResponse);
      }).catch(errorHandler);
    } else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {
      return parseXML(text, opts).then((body2) => {
        operationResponse.parsedBody = body2;
        return operationResponse;
      }).catch(errorHandler);
    }
  }
  return Promise.resolve(operationResponse);
}

// node_modules/@azure/core-http/dist-esm/src/policies/keepAlivePolicy.js
var DefaultKeepAliveOptions = {
  enable: true
};
function keepAlivePolicy(keepAliveOptions) {
  return {
    create: (nextPolicy, options) => {
      return new KeepAlivePolicy(nextPolicy, options, keepAliveOptions || DefaultKeepAliveOptions);
    }
  };
}
var KeepAlivePolicy = class extends BaseRequestPolicy {
  /**
   * Creates an instance of KeepAlivePolicy.
   *
   * @param nextPolicy -
   * @param options -
   * @param keepAliveOptions -
   */
  constructor(nextPolicy, options, keepAliveOptions) {
    super(nextPolicy, options);
    this.keepAliveOptions = keepAliveOptions;
  }
  /**
   * Sends out request.
   *
   * @param request -
   * @returns
   */
  async sendRequest(request) {
    request.keepAlive = this.keepAliveOptions.enable;
    return this._nextPolicy.sendRequest(request);
  }
};

// node_modules/@azure/core-http/dist-esm/src/policies/redirectPolicy.js
var allowedRedirect = ["GET", "HEAD"];
function redirectPolicy(maximumRetries = 20) {
  return {
    create: (nextPolicy, options) => {
      return new RedirectPolicy(nextPolicy, options, maximumRetries);
    }
  };
}
var RedirectPolicy = class extends BaseRequestPolicy {
  constructor(nextPolicy, options, maxRetries = 20) {
    super(nextPolicy, options);
    this.maxRetries = maxRetries;
  }
  sendRequest(request) {
    return this._nextPolicy.sendRequest(request).then((response) => handleRedirect(this, response, 0));
  }
};
function handleRedirect(policy, response, currentRetries) {
  const { request, status } = response;
  const locationHeader = response.headers.get("location");
  if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request.method) || status === 302 && allowedRedirect.includes(request.method) || status === 303 && request.method === "POST" || status === 307) && (!policy.maxRetries || currentRetries < policy.maxRetries)) {
    const builder = URLBuilder.parse(request.url);
    builder.setPath(locationHeader);
    request.url = builder.toString();
    if (status === 303) {
      request.method = "GET";
      delete request.body;
    }
    return policy._nextPolicy.sendRequest(request).then((res) => handleRedirect(policy, res, currentRetries + 1));
  }
  return Promise.resolve(response);
}

// node_modules/@azure/core-http/dist-esm/src/util/exponentialBackoffStrategy.js
var DEFAULT_CLIENT_RETRY_COUNT = 3;
var DEFAULT_CLIENT_RETRY_INTERVAL = 1e3 * 30;
var DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1e3 * 90;
var DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1e3 * 3;
function isNumber(n) {
  return typeof n === "number";
}
function shouldRetry(retryLimit, predicate, retryData, response, error) {
  if (!predicate(response, error)) {
    return false;
  }
  return retryData.retryCount < retryLimit;
}
function updateRetryData(retryOptions, retryData = { retryCount: 0, retryInterval: 0 }, err) {
  if (err) {
    if (retryData.error) {
      err.innerError = retryData.error;
    }
    retryData.error = err;
  }
  retryData.retryCount++;
  let incrementDelta = Math.pow(2, retryData.retryCount - 1) - 1;
  const boundedRandDelta = retryOptions.retryInterval * 0.8 + Math.floor(Math.random() * (retryOptions.retryInterval * 0.4));
  incrementDelta *= boundedRandDelta;
  retryData.retryInterval = Math.min(retryOptions.minRetryInterval + incrementDelta, retryOptions.maxRetryInterval);
  return retryData;
}

// node_modules/@azure/core-util/dist-esm/src/createAbortablePromise.js
function createAbortablePromise(buildPromise, options) {
  const { cleanupBeforeAbort, abortSignal: abortSignal2, abortErrorMsg } = options !== null && options !== void 0 ? options : {};
  return new Promise((resolve, reject) => {
    function rejectOnAbort() {
      reject(new AbortError(abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : "The operation was aborted."));
    }
    function removeListeners() {
      abortSignal2 === null || abortSignal2 === void 0 ? void 0 : abortSignal2.removeEventListener("abort", onAbort);
    }
    function onAbort() {
      cleanupBeforeAbort === null || cleanupBeforeAbort === void 0 ? void 0 : cleanupBeforeAbort();
      removeListeners();
      rejectOnAbort();
    }
    if (abortSignal2 === null || abortSignal2 === void 0 ? void 0 : abortSignal2.aborted) {
      return rejectOnAbort();
    }
    try {
      buildPromise((x) => {
        removeListeners();
        resolve(x);
      }, (x) => {
        removeListeners();
        reject(x);
      });
    } catch (err) {
      reject(err);
    }
    abortSignal2 === null || abortSignal2 === void 0 ? void 0 : abortSignal2.addEventListener("abort", onAbort);
  });
}

// node_modules/@azure/core-util/dist-esm/src/delay.js
var StandardAbortMessage = "The delay was aborted.";
function delay(timeInMs, options) {
  let token;
  const { abortSignal: abortSignal2, abortErrorMsg } = options !== null && options !== void 0 ? options : {};
  return createAbortablePromise((resolve) => {
    token = setTimeout(resolve, timeInMs);
  }, {
    cleanupBeforeAbort: () => clearTimeout(token),
    abortSignal: abortSignal2,
    abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage
  });
}

// node_modules/@azure/core-util/dist-esm/src/uuidUtils.native.js
function generateUUID() {
  let uuid = "";
  for (let i = 0; i < 32; i++) {
    const randomNumber = Math.floor(Math.random() * 16);
    if (i === 12) {
      uuid += "4";
    } else if (i === 16) {
      uuid += randomNumber & 3 | 8;
    } else {
      uuid += randomNumber.toString(16);
    }
    if (i === 7 || i === 11 || i === 15 || i === 19) {
      uuid += "-";
    }
  }
  return uuid;
}

// node_modules/@azure/core-util/dist-esm/src/uuidUtils.browser.js
var _a;
var uuidFunction = typeof ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.crypto) === null || _a === void 0 ? void 0 : _a.randomUUID) === "function" ? globalThis.crypto.randomUUID.bind(globalThis.crypto) : generateUUID;

// node_modules/@azure/core-util/dist-esm/src/checkEnvironment.js
var _a2;
var _b;
var _c;
var _d;
var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
var isWebWorker = typeof self === "object" && typeof (self === null || self === void 0 ? void 0 : self.importScripts) === "function" && (((_a2 = self.constructor) === null || _a2 === void 0 ? void 0 : _a2.name) === "DedicatedWorkerGlobalScope" || ((_b = self.constructor) === null || _b === void 0 ? void 0 : _b.name) === "ServiceWorkerGlobalScope" || ((_c = self.constructor) === null || _c === void 0 ? void 0 : _c.name) === "SharedWorkerGlobalScope");
var isNode = typeof process !== "undefined" && Boolean(process.version) && Boolean((_d = process.versions) === null || _d === void 0 ? void 0 : _d.node);
var isDeno = typeof Deno !== "undefined" && typeof Deno.version !== "undefined" && typeof Deno.version.deno !== "undefined";
var isBun = typeof Bun !== "undefined" && typeof Bun.version !== "undefined";
var isReactNative = typeof navigator !== "undefined" && (navigator === null || navigator === void 0 ? void 0 : navigator.product) === "ReactNative";

// node_modules/@azure/logger/dist-esm/src/log.browser.js
function log(...args) {
  if (args.length > 0) {
    const firstArg = String(args[0]);
    if (firstArg.includes(":error")) {
      console.error(...args);
    } else if (firstArg.includes(":warning")) {
      console.warn(...args);
    } else if (firstArg.includes(":info")) {
      console.info(...args);
    } else if (firstArg.includes(":verbose")) {
      console.debug(...args);
    } else {
      console.debug(...args);
    }
  }
}

// node_modules/@azure/logger/dist-esm/src/debug.js
var debugEnvVariable = typeof process !== "undefined" && process.env && process.env.DEBUG || void 0;
var enabledString;
var enabledNamespaces = [];
var skippedNamespaces = [];
var debuggers = [];
if (debugEnvVariable) {
  enable(debugEnvVariable);
}
var debugObj = Object.assign((namespace) => {
  return createDebugger(namespace);
}, {
  enable,
  enabled,
  disable,
  log
});
function enable(namespaces) {
  enabledString = namespaces;
  enabledNamespaces = [];
  skippedNamespaces = [];
  const wildcard = /\*/g;
  const namespaceList = namespaces.split(",").map((ns) => ns.trim().replace(wildcard, ".*?"));
  for (const ns of namespaceList) {
    if (ns.startsWith("-")) {
      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));
    } else {
      enabledNamespaces.push(new RegExp(`^${ns}$`));
    }
  }
  for (const instance of debuggers) {
    instance.enabled = enabled(instance.namespace);
  }
}
function enabled(namespace) {
  if (namespace.endsWith("*")) {
    return true;
  }
  for (const skipped of skippedNamespaces) {
    if (skipped.test(namespace)) {
      return false;
    }
  }
  for (const enabledNamespace of enabledNamespaces) {
    if (enabledNamespace.test(namespace)) {
      return true;
    }
  }
  return false;
}
function disable() {
  const result = enabledString || "";
  enable("");
  return result;
}
function createDebugger(namespace) {
  const newDebugger = Object.assign(debug, {
    enabled: enabled(namespace),
    destroy,
    log: debugObj.log,
    namespace,
    extend
  });
  function debug(...args) {
    if (!newDebugger.enabled) {
      return;
    }
    if (args.length > 0) {
      args[0] = `${namespace} ${args[0]}`;
    }
    newDebugger.log(...args);
  }
  debuggers.push(newDebugger);
  return newDebugger;
}
function destroy() {
  const index = debuggers.indexOf(this);
  if (index >= 0) {
    debuggers.splice(index, 1);
    return true;
  }
  return false;
}
function extend(namespace) {
  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);
  newDebugger.log = this.log;
  return newDebugger;
}
var debug_default = debugObj;

// node_modules/@azure/logger/dist-esm/src/index.js
var registeredLoggers = /* @__PURE__ */ new Set();
var logLevelFromEnv = typeof process !== "undefined" && process.env && process.env.AZURE_LOG_LEVEL || void 0;
var azureLogLevel;
var AzureLogger = debug_default("azure");
AzureLogger.log = (...args) => {
  debug_default.log(...args);
};
var AZURE_LOG_LEVELS = ["verbose", "info", "warning", "error"];
if (logLevelFromEnv) {
  if (isAzureLogLevel(logLevelFromEnv)) {
    setLogLevel(logLevelFromEnv);
  } else {
    console.error(`AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(", ")}.`);
  }
}
function setLogLevel(level) {
  if (level && !isAzureLogLevel(level)) {
    throw new Error(`Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(",")}`);
  }
  azureLogLevel = level;
  const enabledNamespaces2 = [];
  for (const logger4 of registeredLoggers) {
    if (shouldEnable(logger4)) {
      enabledNamespaces2.push(logger4.namespace);
    }
  }
  debug_default.enable(enabledNamespaces2.join(","));
}
var levelMap = {
  verbose: 400,
  info: 300,
  warning: 200,
  error: 100
};
function createClientLogger(namespace) {
  const clientRootLogger = AzureLogger.extend(namespace);
  patchLogMethod(AzureLogger, clientRootLogger);
  return {
    error: createLogger(clientRootLogger, "error"),
    warning: createLogger(clientRootLogger, "warning"),
    info: createLogger(clientRootLogger, "info"),
    verbose: createLogger(clientRootLogger, "verbose")
  };
}
function patchLogMethod(parent, child) {
  child.log = (...args) => {
    parent.log(...args);
  };
}
function createLogger(parent, level) {
  const logger4 = Object.assign(parent.extend(level), {
    level
  });
  patchLogMethod(parent, logger4);
  if (shouldEnable(logger4)) {
    const enabledNamespaces2 = debug_default.disable();
    debug_default.enable(enabledNamespaces2 + "," + logger4.namespace);
  }
  registeredLoggers.add(logger4);
  return logger4;
}
function shouldEnable(logger4) {
  return Boolean(azureLogLevel && levelMap[logger4.level] <= levelMap[azureLogLevel]);
}
function isAzureLogLevel(logLevel) {
  return AZURE_LOG_LEVELS.includes(logLevel);
}

// node_modules/@azure/core-http/dist-esm/src/log.js
var logger = createClientLogger("core-http");

// node_modules/@azure/core-http/dist-esm/src/policies/exponentialRetryPolicy.js
function exponentialRetryPolicy(retryCount, retryInterval, maxRetryInterval) {
  return {
    create: (nextPolicy, options) => {
      return new ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, maxRetryInterval);
    }
  };
}
var RetryMode;
(function(RetryMode2) {
  RetryMode2[RetryMode2["Exponential"] = 0] = "Exponential";
})(RetryMode || (RetryMode = {}));
var ExponentialRetryPolicy = class extends BaseRequestPolicy {
  /**
   * @param nextPolicy - The next RequestPolicy in the pipeline chain.
   * @param options - The options for this RequestPolicy.
   * @param retryCount - The client retry count.
   * @param retryInterval - The client retry interval, in milliseconds.
   * @param minRetryInterval - The minimum retry interval, in milliseconds.
   * @param maxRetryInterval - The maximum retry interval, in milliseconds.
   */
  constructor(nextPolicy, options, retryCount, retryInterval, maxRetryInterval) {
    super(nextPolicy, options);
    this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;
    this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;
    this.maxRetryInterval = isNumber(maxRetryInterval) ? maxRetryInterval : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
  }
  sendRequest(request) {
    return this._nextPolicy.sendRequest(request.clone()).then((response) => retry(this, request, response)).catch((error) => retry(this, request, error.response, void 0, error));
  }
};
async function retry(policy, request, response, retryData, requestError) {
  function shouldPolicyRetry(responseParam) {
    const statusCode = responseParam === null || responseParam === void 0 ? void 0 : responseParam.status;
    if (statusCode === 503 && (response === null || response === void 0 ? void 0 : response.headers.get(Constants.HeaderConstants.RETRY_AFTER))) {
      return false;
    }
    if (statusCode === void 0 || statusCode < 500 && statusCode !== 408 || statusCode === 501 || statusCode === 505) {
      return false;
    }
    return true;
  }
  retryData = updateRetryData({
    retryInterval: policy.retryInterval,
    minRetryInterval: 0,
    maxRetryInterval: policy.maxRetryInterval
  }, retryData, requestError);
  const isAborted = request.abortSignal && request.abortSignal.aborted;
  if (!isAborted && shouldRetry(policy.retryCount, shouldPolicyRetry, retryData, response)) {
    logger.info(`Retrying request in ${retryData.retryInterval}`);
    try {
      await delay(retryData.retryInterval);
      const res = await policy._nextPolicy.sendRequest(request.clone());
      return retry(policy, request, res, retryData);
    } catch (err) {
      return retry(policy, request, response, retryData, err);
    }
  } else if (isAborted || requestError || !response) {
    const err = retryData.error || new RestError("Failed to send the request.", RestError.REQUEST_SEND_ERROR, response && response.status, response && response.request, response);
    throw err;
  } else {
    return response;
  }
}

// node_modules/@azure/core-http/dist-esm/src/policies/logPolicy.js
function logPolicy(loggingOptions = {}) {
  return {
    create: (nextPolicy, options) => {
      return new LogPolicy(nextPolicy, options, loggingOptions);
    }
  };
}
var LogPolicy = class extends BaseRequestPolicy {
  constructor(nextPolicy, options, { logger: logger4 = logger.info, allowedHeaderNames = [], allowedQueryParameters = [] } = {}) {
    super(nextPolicy, options);
    this.logger = logger4;
    this.sanitizer = new Sanitizer({ allowedHeaderNames, allowedQueryParameters });
  }
  /**
   * Header names whose values will be logged when logging is enabled. Defaults to
   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers
   * specified in this field will be added to that list.  Any other values will
   * be written to logs as "REDACTED".
   * @deprecated Pass these into the constructor instead.
   */
  get allowedHeaderNames() {
    return this.sanitizer.allowedHeaderNames;
  }
  /**
   * Header names whose values will be logged when logging is enabled. Defaults to
   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers
   * specified in this field will be added to that list.  Any other values will
   * be written to logs as "REDACTED".
   * @deprecated Pass these into the constructor instead.
   */
  set allowedHeaderNames(allowedHeaderNames) {
    this.sanitizer.allowedHeaderNames = allowedHeaderNames;
  }
  /**
   * Query string names whose values will be logged when logging is enabled. By default no
   * query string values are logged.
   * @deprecated Pass these into the constructor instead.
   */
  get allowedQueryParameters() {
    return this.sanitizer.allowedQueryParameters;
  }
  /**
   * Query string names whose values will be logged when logging is enabled. By default no
   * query string values are logged.
   * @deprecated Pass these into the constructor instead.
   */
  set allowedQueryParameters(allowedQueryParameters) {
    this.sanitizer.allowedQueryParameters = allowedQueryParameters;
  }
  sendRequest(request) {
    if (!this.logger.enabled)
      return this._nextPolicy.sendRequest(request);
    this.logRequest(request);
    return this._nextPolicy.sendRequest(request).then((response) => this.logResponse(response));
  }
  logRequest(request) {
    this.logger(`Request: ${this.sanitizer.sanitize(request)}`);
  }
  logResponse(response) {
    this.logger(`Response status code: ${response.status}`);
    this.logger(`Headers: ${this.sanitizer.sanitize(response.headers)}`);
    return response;
  }
};

// node_modules/@azure/core-http/dist-esm/src/operationParameter.js
function getPathStringFromParameter(parameter) {
  return getPathStringFromParameterPath(parameter.parameterPath, parameter.mapper);
}
function getPathStringFromParameterPath(parameterPath, mapper) {
  let result;
  if (typeof parameterPath === "string") {
    result = parameterPath;
  } else if (Array.isArray(parameterPath)) {
    result = parameterPath.join(".");
  } else {
    result = mapper.serializedName;
  }
  return result;
}

// node_modules/@azure/core-http/dist-esm/src/operationSpec.js
function getStreamResponseStatusCodes(operationSpec) {
  const result = /* @__PURE__ */ new Set();
  for (const statusCode in operationSpec.responses) {
    const operationResponse = operationSpec.responses[statusCode];
    if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === MapperType.Stream) {
      result.add(Number(statusCode));
    }
  }
  return result;
}

// node_modules/@azure/core-auth/dist-esm/src/tokenCredential.js
function isTokenCredential(credential) {
  const castCredential = credential;
  return castCredential && typeof castCredential.getToken === "function" && (castCredential.signRequest === void 0 || castCredential.getToken.length > 0);
}

// node_modules/@azure/core-http/dist-esm/src/policies/msRestUserAgentPolicy.browser.js
function getDefaultUserAgentKey() {
  return "x-ms-useragent";
}
function getPlatformSpecificData() {
  const navigator2 = self.navigator;
  const osInfo = {
    key: "OS",
    value: (navigator2.oscpu || navigator2.platform).replace(" ", "")
  };
  return [osInfo];
}

// node_modules/@azure/core-http/dist-esm/src/policies/userAgentPolicy.js
function getRuntimeInfo() {
  const msRestRuntime = {
    key: "core-http",
    value: Constants.coreHttpVersion
  };
  return [msRestRuntime];
}
function getUserAgentString(telemetryInfo, keySeparator = " ", valueSeparator = "/") {
  return telemetryInfo.map((info) => {
    const value = info.value ? `${valueSeparator}${info.value}` : "";
    return `${info.key}${value}`;
  }).join(keySeparator);
}
var getDefaultUserAgentHeaderName = getDefaultUserAgentKey;
function getDefaultUserAgentValue() {
  const runtimeInfo = getRuntimeInfo();
  const platformSpecificData = getPlatformSpecificData();
  const userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));
  return userAgent;
}
function userAgentPolicy(userAgentData) {
  const key = !userAgentData || userAgentData.key === void 0 || userAgentData.key === null ? getDefaultUserAgentKey() : userAgentData.key;
  const value = !userAgentData || userAgentData.value === void 0 || userAgentData.value === null ? getDefaultUserAgentValue() : userAgentData.value;
  return {
    create: (nextPolicy, options) => {
      return new UserAgentPolicy(nextPolicy, options, key, value);
    }
  };
}
var UserAgentPolicy = class extends BaseRequestPolicy {
  constructor(_nextPolicy, _options, headerKey, headerValue) {
    super(_nextPolicy, _options);
    this._nextPolicy = _nextPolicy;
    this._options = _options;
    this.headerKey = headerKey;
    this.headerValue = headerValue;
  }
  sendRequest(request) {
    this.addUserAgentHeader(request);
    return this._nextPolicy.sendRequest(request);
  }
  /**
   * Adds the user agent header to the outgoing request.
   */
  addUserAgentHeader(request) {
    if (!request.headers) {
      request.headers = new HttpHeaders();
    }
    if (!request.headers.get(this.headerKey) && this.headerValue) {
      request.headers.set(this.headerKey, this.headerValue);
    }
  }
};

// node_modules/@azure/core-http/dist-esm/src/queryCollectionFormat.js
var QueryCollectionFormat;
(function(QueryCollectionFormat2) {
  QueryCollectionFormat2["Csv"] = ",";
  QueryCollectionFormat2["Ssv"] = " ";
  QueryCollectionFormat2["Tsv"] = "	";
  QueryCollectionFormat2["Pipes"] = "|";
  QueryCollectionFormat2["Multi"] = "Multi";
})(QueryCollectionFormat || (QueryCollectionFormat = {}));

// node_modules/@azure/core-http/dist-esm/src/policies/bearerTokenAuthenticationPolicy.js
var DEFAULT_CYCLER_OPTIONS = {
  forcedRefreshWindowInMs: 1e3,
  retryIntervalInMs: 3e3,
  refreshWindowInMs: 1e3 * 60 * 2
  // Start refreshing 2m before expiry
};
async function beginRefresh(getAccessToken, retryIntervalInMs, timeoutInMs) {
  async function tryGetAccessToken() {
    if (Date.now() < timeoutInMs) {
      try {
        return await getAccessToken();
      } catch (_a3) {
        return null;
      }
    } else {
      const finalToken = await getAccessToken();
      if (finalToken === null) {
        throw new Error("Failed to refresh access token.");
      }
      return finalToken;
    }
  }
  let token = await tryGetAccessToken();
  while (token === null) {
    await delay(retryIntervalInMs);
    token = await tryGetAccessToken();
  }
  return token;
}
function createTokenCycler(credential, scopes, tokenCyclerOptions) {
  let refreshWorker = null;
  let token = null;
  const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);
  const cycler = {
    /**
     * Produces true if a refresh job is currently in progress.
     */
    get isRefreshing() {
      return refreshWorker !== null;
    },
    /**
     * Produces true if the cycler SHOULD refresh (we are within the refresh
     * window and not already refreshing)
     */
    get shouldRefresh() {
      var _a3;
      return !cycler.isRefreshing && ((_a3 = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a3 !== void 0 ? _a3 : 0) - options.refreshWindowInMs < Date.now();
    },
    /**
     * Produces true if the cycler MUST refresh (null or nearly-expired
     * token).
     */
    get mustRefresh() {
      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();
    }
  };
  function refresh(getTokenOptions) {
    var _a3;
    if (!cycler.isRefreshing) {
      const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);
      refreshWorker = beginRefresh(
        tryGetAccessToken,
        options.retryIntervalInMs,
        // If we don't have a token, then we should timeout immediately
        (_a3 = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a3 !== void 0 ? _a3 : Date.now()
      ).then((_token) => {
        refreshWorker = null;
        token = _token;
        return token;
      }).catch((reason) => {
        refreshWorker = null;
        token = null;
        throw reason;
      });
    }
    return refreshWorker;
  }
  return async (tokenOptions) => {
    if (cycler.mustRefresh)
      return refresh(tokenOptions);
    if (cycler.shouldRefresh) {
      refresh(tokenOptions);
    }
    return token;
  };
}
function bearerTokenAuthenticationPolicy(credential, scopes) {
  const getToken = createTokenCycler(
    credential,
    scopes
    /* , options */
  );
  class BearerTokenAuthenticationPolicy extends BaseRequestPolicy {
    constructor(nextPolicy, options) {
      super(nextPolicy, options);
    }
    async sendRequest(webResource) {
      if (!webResource.url.toLowerCase().startsWith("https://")) {
        throw new Error("Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.");
      }
      const { token } = await getToken({
        abortSignal: webResource.abortSignal,
        tracingOptions: {
          tracingContext: webResource.tracingContext
        }
      });
      webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);
      return this._nextPolicy.sendRequest(webResource);
    }
  }
  return {
    create: (nextPolicy, options) => {
      return new BearerTokenAuthenticationPolicy(nextPolicy, options);
    }
  };
}

// node_modules/@azure/core-http/dist-esm/src/policies/disableResponseDecompressionPolicy.browser.js
var errorMessage = "DisableResponseDecompressionPolicy is not supported in browser environment";
function disableResponseDecompressionPolicy() {
  return {
    create: (_nextPolicy, _options) => {
      throw new Error(errorMessage);
    }
  };
}

// node_modules/@azure/core-http/dist-esm/src/policies/generateClientRequestIdPolicy.js
function generateClientRequestIdPolicy(requestIdHeaderName = "x-ms-client-request-id") {
  return {
    create: (nextPolicy, options) => {
      return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);
    }
  };
}
var GenerateClientRequestIdPolicy = class extends BaseRequestPolicy {
  constructor(nextPolicy, options, _requestIdHeaderName) {
    super(nextPolicy, options);
    this._requestIdHeaderName = _requestIdHeaderName;
  }
  sendRequest(request) {
    if (!request.headers.contains(this._requestIdHeaderName)) {
      request.headers.set(this._requestIdHeaderName, request.requestId);
    }
    return this._nextPolicy.sendRequest(request);
  }
};

// node_modules/@azure/core-http/dist-esm/src/httpClientCache.js
var cachedHttpClient;
function getCachedDefaultHttpClient() {
  if (!cachedHttpClient) {
    cachedHttpClient = new XhrHttpClient();
  }
  return cachedHttpClient;
}

// node_modules/@azure/core-http/dist-esm/src/policies/proxyPolicy.browser.js
var errorMessage2 = "ProxyPolicy is not supported in browser environment";
function getDefaultProxySettings(_proxyUrl) {
  return void 0;
}
function proxyPolicy(_proxySettings) {
  return {
    create: (_nextPolicy, _options) => {
      throw new Error(errorMessage2);
    }
  };
}

// node_modules/@azure/core-http/dist-esm/src/policies/rpRegistrationPolicy.js
function rpRegistrationPolicy(retryTimeout = 30) {
  return {
    create: (nextPolicy, options) => {
      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);
    }
  };
}
var RPRegistrationPolicy = class extends BaseRequestPolicy {
  constructor(nextPolicy, options, _retryTimeout = 30) {
    super(nextPolicy, options);
    this._retryTimeout = _retryTimeout;
  }
  sendRequest(request) {
    return this._nextPolicy.sendRequest(request.clone()).then((response) => registerIfNeeded(this, request, response));
  }
};
function registerIfNeeded(policy, request, response) {
  if (response.status === 409) {
    const rpName = checkRPNotRegisteredError(response.bodyAsText);
    if (rpName) {
      const urlPrefix = extractSubscriptionUrl(request.url);
      return registerRP(policy, urlPrefix, rpName, request).catch(() => false).then((registrationStatus) => {
        if (registrationStatus) {
          request.headers.set("x-ms-client-request-id", generateUuid());
          return policy._nextPolicy.sendRequest(request.clone());
        }
        return response;
      });
    }
  }
  return Promise.resolve(response);
}
function getRequestEssentials(originalRequest, reuseUrlToo = false) {
  const reqOptions = originalRequest.clone();
  if (reuseUrlToo) {
    reqOptions.url = originalRequest.url;
  }
  reqOptions.headers.set("x-ms-client-request-id", generateUuid());
  reqOptions.headers.set("Content-Type", "application/json; charset=utf-8");
  return reqOptions;
}
function checkRPNotRegisteredError(body2) {
  let result, responseBody;
  if (body2) {
    try {
      responseBody = JSON.parse(body2);
    } catch (err) {
    }
    if (responseBody && responseBody.error && responseBody.error.message && responseBody.error.code && responseBody.error.code === "MissingSubscriptionRegistration") {
      const matchRes = responseBody.error.message.match(/.*'(.*)'/i);
      if (matchRes) {
        result = matchRes.pop();
      }
    }
  }
  return result;
}
function extractSubscriptionUrl(url2) {
  let result;
  const matchRes = url2.match(/.*\/subscriptions\/[a-f0-9-]+\//gi);
  if (matchRes && matchRes[0]) {
    result = matchRes[0];
  } else {
    throw new Error(`Unable to extract subscriptionId from the given url - ${url2}.`);
  }
  return result;
}
async function registerRP(policy, urlPrefix, provider, originalRequest) {
  const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;
  const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;
  const reqOptions = getRequestEssentials(originalRequest);
  reqOptions.method = "POST";
  reqOptions.url = postUrl;
  const response = await policy._nextPolicy.sendRequest(reqOptions);
  if (response.status !== 200) {
    throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);
  }
  return getRegistrationStatus(policy, getUrl, originalRequest);
}
async function getRegistrationStatus(policy, url2, originalRequest) {
  const reqOptions = getRequestEssentials(originalRequest);
  reqOptions.url = url2;
  reqOptions.method = "GET";
  const res = await policy._nextPolicy.sendRequest(reqOptions);
  const obj = res.parsedBody;
  if (res.parsedBody && obj.registrationState && obj.registrationState === "Registered") {
    return true;
  } else {
    await delay(policy._retryTimeout * 1e3);
    return getRegistrationStatus(policy, url2, originalRequest);
  }
}

// node_modules/@azure/core-http/dist-esm/src/policies/signingPolicy.js
function signingPolicy(authenticationProvider) {
  return {
    create: (nextPolicy, options) => {
      return new SigningPolicy(nextPolicy, options, authenticationProvider);
    }
  };
}
var SigningPolicy = class extends BaseRequestPolicy {
  constructor(nextPolicy, options, authenticationProvider) {
    super(nextPolicy, options);
    this.authenticationProvider = authenticationProvider;
  }
  signRequest(request) {
    return this.authenticationProvider.signRequest(request);
  }
  sendRequest(request) {
    return this.signRequest(request).then((nextRequest) => this._nextPolicy.sendRequest(nextRequest));
  }
};

// node_modules/@azure/core-http/dist-esm/src/policies/systemErrorRetryPolicy.js
function systemErrorRetryPolicy(retryCount, retryInterval, minRetryInterval, maxRetryInterval) {
  return {
    create: (nextPolicy, options) => {
      return new SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);
    }
  };
}
var SystemErrorRetryPolicy = class extends BaseRequestPolicy {
  constructor(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval) {
    super(nextPolicy, options);
    this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;
    this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;
    this.minRetryInterval = isNumber(minRetryInterval) ? minRetryInterval : DEFAULT_CLIENT_MIN_RETRY_INTERVAL;
    this.maxRetryInterval = isNumber(maxRetryInterval) ? maxRetryInterval : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
  }
  sendRequest(request) {
    return this._nextPolicy.sendRequest(request.clone()).catch((error) => retry2(this, request, error.response, error));
  }
};
async function retry2(policy, request, operationResponse, err, retryData) {
  retryData = updateRetryData(policy, retryData, err);
  function shouldPolicyRetry(_response, error) {
    if (error && error.code && (error.code === "ETIMEDOUT" || error.code === "ESOCKETTIMEDOUT" || error.code === "ECONNREFUSED" || error.code === "ECONNRESET" || error.code === "ENOENT")) {
      return true;
    }
    return false;
  }
  if (shouldRetry(policy.retryCount, shouldPolicyRetry, retryData, operationResponse, err)) {
    try {
      await delay(retryData.retryInterval);
      return policy._nextPolicy.sendRequest(request.clone());
    } catch (nestedErr) {
      return retry2(policy, request, operationResponse, nestedErr, retryData);
    }
  } else {
    if (err) {
      return Promise.reject(retryData.error);
    }
    return operationResponse;
  }
}

// node_modules/@azure/core-http/dist-esm/src/util/throttlingRetryStrategy.js
var DEFAULT_CLIENT_MAX_RETRY_COUNT = 3;

// node_modules/@azure/core-http/dist-esm/src/policies/throttlingRetryPolicy.js
var StatusCodes = Constants.HttpConstants.StatusCodes;
function throttlingRetryPolicy() {
  return {
    create: (nextPolicy, options) => {
      return new ThrottlingRetryPolicy(nextPolicy, options);
    }
  };
}
var StandardAbortMessage2 = "The operation was aborted.";
var ThrottlingRetryPolicy = class extends BaseRequestPolicy {
  constructor(nextPolicy, options, _handleResponse) {
    super(nextPolicy, options);
    this.numberOfRetries = 0;
    this._handleResponse = _handleResponse || this._defaultResponseHandler;
  }
  async sendRequest(httpRequest) {
    const response = await this._nextPolicy.sendRequest(httpRequest.clone());
    if (response.status !== StatusCodes.TooManyRequests && response.status !== StatusCodes.ServiceUnavailable) {
      return response;
    } else {
      return this._handleResponse(httpRequest, response);
    }
  }
  async _defaultResponseHandler(httpRequest, httpResponse) {
    var _a3;
    const retryAfterHeader = httpResponse.headers.get(Constants.HeaderConstants.RETRY_AFTER);
    if (retryAfterHeader) {
      const delayInMs = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);
      if (delayInMs) {
        this.numberOfRetries += 1;
        await delay(delayInMs, {
          abortSignal: httpRequest.abortSignal,
          abortErrorMsg: StandardAbortMessage2
        });
        if ((_a3 = httpRequest.abortSignal) === null || _a3 === void 0 ? void 0 : _a3.aborted) {
          throw new AbortError(StandardAbortMessage2);
        }
        if (this.numberOfRetries < DEFAULT_CLIENT_MAX_RETRY_COUNT) {
          return this.sendRequest(httpRequest);
        } else {
          return this._nextPolicy.sendRequest(httpRequest);
        }
      }
    }
    return httpResponse;
  }
  static parseRetryAfterHeader(headerValue) {
    const retryAfterInSeconds = Number(headerValue);
    if (Number.isNaN(retryAfterInSeconds)) {
      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);
    } else {
      return retryAfterInSeconds * 1e3;
    }
  }
  static parseDateRetryAfterHeader(headerValue) {
    try {
      const now = Date.now();
      const date = Date.parse(headerValue);
      const diff = date - now;
      return Number.isNaN(diff) ? void 0 : diff;
    } catch (error) {
      return void 0;
    }
  }
};

// node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js
var _globalThis = typeof globalThis === "object" ? globalThis : typeof self === "object" ? self : typeof window === "object" ? window : typeof global === "object" ? global : {};

// node_modules/@opentelemetry/api/build/esm/version.js
var VERSION = "1.6.0";

// node_modules/@opentelemetry/api/build/esm/internal/semver.js
var re = /^(\d+)\.(\d+)\.(\d+)(-(.+))?$/;
function _makeCompatibilityCheck(ownVersion) {
  var acceptedVersions = /* @__PURE__ */ new Set([ownVersion]);
  var rejectedVersions = /* @__PURE__ */ new Set();
  var myVersionMatch = ownVersion.match(re);
  if (!myVersionMatch) {
    return function() {
      return false;
    };
  }
  var ownVersionParsed = {
    major: +myVersionMatch[1],
    minor: +myVersionMatch[2],
    patch: +myVersionMatch[3],
    prerelease: myVersionMatch[4]
  };
  if (ownVersionParsed.prerelease != null) {
    return function isExactmatch(globalVersion) {
      return globalVersion === ownVersion;
    };
  }
  function _reject(v) {
    rejectedVersions.add(v);
    return false;
  }
  function _accept(v) {
    acceptedVersions.add(v);
    return true;
  }
  return function isCompatible2(globalVersion) {
    if (acceptedVersions.has(globalVersion)) {
      return true;
    }
    if (rejectedVersions.has(globalVersion)) {
      return false;
    }
    var globalVersionMatch = globalVersion.match(re);
    if (!globalVersionMatch) {
      return _reject(globalVersion);
    }
    var globalVersionParsed = {
      major: +globalVersionMatch[1],
      minor: +globalVersionMatch[2],
      patch: +globalVersionMatch[3],
      prerelease: globalVersionMatch[4]
    };
    if (globalVersionParsed.prerelease != null) {
      return _reject(globalVersion);
    }
    if (ownVersionParsed.major !== globalVersionParsed.major) {
      return _reject(globalVersion);
    }
    if (ownVersionParsed.major === 0) {
      if (ownVersionParsed.minor === globalVersionParsed.minor && ownVersionParsed.patch <= globalVersionParsed.patch) {
        return _accept(globalVersion);
      }
      return _reject(globalVersion);
    }
    if (ownVersionParsed.minor <= globalVersionParsed.minor) {
      return _accept(globalVersion);
    }
    return _reject(globalVersion);
  };
}
var isCompatible = _makeCompatibilityCheck(VERSION);

// node_modules/@opentelemetry/api/build/esm/internal/global-utils.js
var major = VERSION.split(".")[0];
var GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for("opentelemetry.js.api." + major);
var _global = _globalThis;
function registerGlobal(type2, instance, diag3, allowOverride) {
  var _a3;
  if (allowOverride === void 0) {
    allowOverride = false;
  }
  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a3 = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a3 !== void 0 ? _a3 : {
    version: VERSION
  };
  if (!allowOverride && api[type2]) {
    var err = new Error("@opentelemetry/api: Attempted duplicate registration of API: " + type2);
    diag3.error(err.stack || err.message);
    return false;
  }
  if (api.version !== VERSION) {
    var err = new Error("@opentelemetry/api: Registration of version v" + api.version + " for " + type2 + " does not match previously registered API v" + VERSION);
    diag3.error(err.stack || err.message);
    return false;
  }
  api[type2] = instance;
  diag3.debug("@opentelemetry/api: Registered a global for " + type2 + " v" + VERSION + ".");
  return true;
}
function getGlobal(type2) {
  var _a3, _b2;
  var globalVersion = (_a3 = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a3 === void 0 ? void 0 : _a3.version;
  if (!globalVersion || !isCompatible(globalVersion)) {
    return;
  }
  return (_b2 = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b2 === void 0 ? void 0 : _b2[type2];
}
function unregisterGlobal(type2, diag3) {
  diag3.debug("@opentelemetry/api: Unregistering a global for " + type2 + " v" + VERSION + ".");
  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];
  if (api) {
    delete api[type2];
  }
}

// node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js
var __read = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var DiagComponentLogger = (
  /** @class */
  function() {
    function DiagComponentLogger2(props) {
      this._namespace = props.namespace || "DiagComponentLogger";
    }
    DiagComponentLogger2.prototype.debug = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return logProxy("debug", this._namespace, args);
    };
    DiagComponentLogger2.prototype.error = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return logProxy("error", this._namespace, args);
    };
    DiagComponentLogger2.prototype.info = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return logProxy("info", this._namespace, args);
    };
    DiagComponentLogger2.prototype.warn = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return logProxy("warn", this._namespace, args);
    };
    DiagComponentLogger2.prototype.verbose = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return logProxy("verbose", this._namespace, args);
    };
    return DiagComponentLogger2;
  }()
);
function logProxy(funcName, namespace, args) {
  var logger4 = getGlobal("diag");
  if (!logger4) {
    return;
  }
  args.unshift(namespace);
  return logger4[funcName].apply(logger4, __spreadArray([], __read(args), false));
}

// node_modules/@opentelemetry/api/build/esm/diag/types.js
var DiagLogLevel;
(function(DiagLogLevel2) {
  DiagLogLevel2[DiagLogLevel2["NONE"] = 0] = "NONE";
  DiagLogLevel2[DiagLogLevel2["ERROR"] = 30] = "ERROR";
  DiagLogLevel2[DiagLogLevel2["WARN"] = 50] = "WARN";
  DiagLogLevel2[DiagLogLevel2["INFO"] = 60] = "INFO";
  DiagLogLevel2[DiagLogLevel2["DEBUG"] = 70] = "DEBUG";
  DiagLogLevel2[DiagLogLevel2["VERBOSE"] = 80] = "VERBOSE";
  DiagLogLevel2[DiagLogLevel2["ALL"] = 9999] = "ALL";
})(DiagLogLevel || (DiagLogLevel = {}));

// node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js
function createLogLevelDiagLogger(maxLevel, logger4) {
  if (maxLevel < DiagLogLevel.NONE) {
    maxLevel = DiagLogLevel.NONE;
  } else if (maxLevel > DiagLogLevel.ALL) {
    maxLevel = DiagLogLevel.ALL;
  }
  logger4 = logger4 || {};
  function _filterFunc(funcName, theLevel) {
    var theFunc = logger4[funcName];
    if (typeof theFunc === "function" && maxLevel >= theLevel) {
      return theFunc.bind(logger4);
    }
    return function() {
    };
  }
  return {
    error: _filterFunc("error", DiagLogLevel.ERROR),
    warn: _filterFunc("warn", DiagLogLevel.WARN),
    info: _filterFunc("info", DiagLogLevel.INFO),
    debug: _filterFunc("debug", DiagLogLevel.DEBUG),
    verbose: _filterFunc("verbose", DiagLogLevel.VERBOSE)
  };
}

// node_modules/@opentelemetry/api/build/esm/api/diag.js
var __read2 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray2 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var API_NAME = "diag";
var DiagAPI = (
  /** @class */
  function() {
    function DiagAPI2() {
      function _logProxy(funcName) {
        return function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          var logger4 = getGlobal("diag");
          if (!logger4)
            return;
          return logger4[funcName].apply(logger4, __spreadArray2([], __read2(args), false));
        };
      }
      var self2 = this;
      var setLogger = function(logger4, optionsOrLogLevel) {
        var _a3, _b2, _c2;
        if (optionsOrLogLevel === void 0) {
          optionsOrLogLevel = { logLevel: DiagLogLevel.INFO };
        }
        if (logger4 === self2) {
          var err = new Error("Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation");
          self2.error((_a3 = err.stack) !== null && _a3 !== void 0 ? _a3 : err.message);
          return false;
        }
        if (typeof optionsOrLogLevel === "number") {
          optionsOrLogLevel = {
            logLevel: optionsOrLogLevel
          };
        }
        var oldLogger = getGlobal("diag");
        var newLogger = createLogLevelDiagLogger((_b2 = optionsOrLogLevel.logLevel) !== null && _b2 !== void 0 ? _b2 : DiagLogLevel.INFO, logger4);
        if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {
          var stack = (_c2 = new Error().stack) !== null && _c2 !== void 0 ? _c2 : "<failed to generate stacktrace>";
          oldLogger.warn("Current logger will be overwritten from " + stack);
          newLogger.warn("Current logger will overwrite one already registered from " + stack);
        }
        return registerGlobal("diag", newLogger, self2, true);
      };
      self2.setLogger = setLogger;
      self2.disable = function() {
        unregisterGlobal(API_NAME, self2);
      };
      self2.createComponentLogger = function(options) {
        return new DiagComponentLogger(options);
      };
      self2.verbose = _logProxy("verbose");
      self2.debug = _logProxy("debug");
      self2.info = _logProxy("info");
      self2.warn = _logProxy("warn");
      self2.error = _logProxy("error");
    }
    DiagAPI2.instance = function() {
      if (!this._instance) {
        this._instance = new DiagAPI2();
      }
      return this._instance;
    };
    return DiagAPI2;
  }()
);

// node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js
var __read3 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __values2 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var BaggageImpl = (
  /** @class */
  function() {
    function BaggageImpl2(entries) {
      this._entries = entries ? new Map(entries) : /* @__PURE__ */ new Map();
    }
    BaggageImpl2.prototype.getEntry = function(key) {
      var entry = this._entries.get(key);
      if (!entry) {
        return void 0;
      }
      return Object.assign({}, entry);
    };
    BaggageImpl2.prototype.getAllEntries = function() {
      return Array.from(this._entries.entries()).map(function(_a3) {
        var _b2 = __read3(_a3, 2), k = _b2[0], v = _b2[1];
        return [k, v];
      });
    };
    BaggageImpl2.prototype.setEntry = function(key, entry) {
      var newBaggage = new BaggageImpl2(this._entries);
      newBaggage._entries.set(key, entry);
      return newBaggage;
    };
    BaggageImpl2.prototype.removeEntry = function(key) {
      var newBaggage = new BaggageImpl2(this._entries);
      newBaggage._entries.delete(key);
      return newBaggage;
    };
    BaggageImpl2.prototype.removeEntries = function() {
      var e_1, _a3;
      var keys = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        keys[_i] = arguments[_i];
      }
      var newBaggage = new BaggageImpl2(this._entries);
      try {
        for (var keys_1 = __values2(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
          var key = keys_1_1.value;
          newBaggage._entries.delete(key);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (keys_1_1 && !keys_1_1.done && (_a3 = keys_1.return))
            _a3.call(keys_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return newBaggage;
    };
    BaggageImpl2.prototype.clear = function() {
      return new BaggageImpl2();
    };
    return BaggageImpl2;
  }()
);

// node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js
var baggageEntryMetadataSymbol = Symbol("BaggageEntryMetadata");

// node_modules/@opentelemetry/api/build/esm/baggage/utils.js
var diag = DiagAPI.instance();
function createBaggage(entries) {
  if (entries === void 0) {
    entries = {};
  }
  return new BaggageImpl(new Map(Object.entries(entries)));
}

// node_modules/@opentelemetry/api/build/esm/context/context.js
function createContextKey(description) {
  return Symbol.for(description);
}
var BaseContext = (
  /** @class */
  function() {
    function BaseContext2(parentContext) {
      var self2 = this;
      self2._currentContext = parentContext ? new Map(parentContext) : /* @__PURE__ */ new Map();
      self2.getValue = function(key) {
        return self2._currentContext.get(key);
      };
      self2.setValue = function(key, value) {
        var context3 = new BaseContext2(self2._currentContext);
        context3._currentContext.set(key, value);
        return context3;
      };
      self2.deleteValue = function(key) {
        var context3 = new BaseContext2(self2._currentContext);
        context3._currentContext.delete(key);
        return context3;
      };
    }
    return BaseContext2;
  }()
);
var ROOT_CONTEXT = new BaseContext();

// node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js
var consoleMap = [
  { n: "error", c: "error" },
  { n: "warn", c: "warn" },
  { n: "info", c: "info" },
  { n: "debug", c: "debug" },
  { n: "verbose", c: "trace" }
];
var DiagConsoleLogger = (
  /** @class */
  function() {
    function DiagConsoleLogger2() {
      function _consoleFunc(funcName) {
        return function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          if (console) {
            var theFunc = console[funcName];
            if (typeof theFunc !== "function") {
              theFunc = console.log;
            }
            if (typeof theFunc === "function") {
              return theFunc.apply(console, args);
            }
          }
        };
      }
      for (var i = 0; i < consoleMap.length; i++) {
        this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);
      }
    }
    return DiagConsoleLogger2;
  }()
);

// node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var NoopMeter = (
  /** @class */
  function() {
    function NoopMeter2() {
    }
    NoopMeter2.prototype.createHistogram = function(_name, _options) {
      return NOOP_HISTOGRAM_METRIC;
    };
    NoopMeter2.prototype.createCounter = function(_name, _options) {
      return NOOP_COUNTER_METRIC;
    };
    NoopMeter2.prototype.createUpDownCounter = function(_name, _options) {
      return NOOP_UP_DOWN_COUNTER_METRIC;
    };
    NoopMeter2.prototype.createObservableGauge = function(_name, _options) {
      return NOOP_OBSERVABLE_GAUGE_METRIC;
    };
    NoopMeter2.prototype.createObservableCounter = function(_name, _options) {
      return NOOP_OBSERVABLE_COUNTER_METRIC;
    };
    NoopMeter2.prototype.createObservableUpDownCounter = function(_name, _options) {
      return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;
    };
    NoopMeter2.prototype.addBatchObservableCallback = function(_callback, _observables) {
    };
    NoopMeter2.prototype.removeBatchObservableCallback = function(_callback) {
    };
    return NoopMeter2;
  }()
);
var NoopMetric = (
  /** @class */
  function() {
    function NoopMetric2() {
    }
    return NoopMetric2;
  }()
);
var NoopCounterMetric = (
  /** @class */
  function(_super) {
    __extends(NoopCounterMetric2, _super);
    function NoopCounterMetric2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    NoopCounterMetric2.prototype.add = function(_value, _attributes) {
    };
    return NoopCounterMetric2;
  }(NoopMetric)
);
var NoopUpDownCounterMetric = (
  /** @class */
  function(_super) {
    __extends(NoopUpDownCounterMetric2, _super);
    function NoopUpDownCounterMetric2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    NoopUpDownCounterMetric2.prototype.add = function(_value, _attributes) {
    };
    return NoopUpDownCounterMetric2;
  }(NoopMetric)
);
var NoopHistogramMetric = (
  /** @class */
  function(_super) {
    __extends(NoopHistogramMetric2, _super);
    function NoopHistogramMetric2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    NoopHistogramMetric2.prototype.record = function(_value, _attributes) {
    };
    return NoopHistogramMetric2;
  }(NoopMetric)
);
var NoopObservableMetric = (
  /** @class */
  function() {
    function NoopObservableMetric2() {
    }
    NoopObservableMetric2.prototype.addCallback = function(_callback) {
    };
    NoopObservableMetric2.prototype.removeCallback = function(_callback) {
    };
    return NoopObservableMetric2;
  }()
);
var NoopObservableCounterMetric = (
  /** @class */
  function(_super) {
    __extends(NoopObservableCounterMetric2, _super);
    function NoopObservableCounterMetric2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return NoopObservableCounterMetric2;
  }(NoopObservableMetric)
);
var NoopObservableGaugeMetric = (
  /** @class */
  function(_super) {
    __extends(NoopObservableGaugeMetric2, _super);
    function NoopObservableGaugeMetric2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return NoopObservableGaugeMetric2;
  }(NoopObservableMetric)
);
var NoopObservableUpDownCounterMetric = (
  /** @class */
  function(_super) {
    __extends(NoopObservableUpDownCounterMetric2, _super);
    function NoopObservableUpDownCounterMetric2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return NoopObservableUpDownCounterMetric2;
  }(NoopObservableMetric)
);
var NOOP_METER = new NoopMeter();
var NOOP_COUNTER_METRIC = new NoopCounterMetric();
var NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();
var NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();
var NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();
var NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();
var NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric();

// node_modules/@opentelemetry/api/build/esm/metrics/Metric.js
var ValueType;
(function(ValueType2) {
  ValueType2[ValueType2["INT"] = 0] = "INT";
  ValueType2[ValueType2["DOUBLE"] = 1] = "DOUBLE";
})(ValueType || (ValueType = {}));

// node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js
var defaultTextMapGetter = {
  get: function(carrier, key) {
    if (carrier == null) {
      return void 0;
    }
    return carrier[key];
  },
  keys: function(carrier) {
    if (carrier == null) {
      return [];
    }
    return Object.keys(carrier);
  }
};
var defaultTextMapSetter = {
  set: function(carrier, key, value) {
    if (carrier == null) {
      return;
    }
    carrier[key] = value;
  }
};

// node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js
var __read4 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray3 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var NoopContextManager = (
  /** @class */
  function() {
    function NoopContextManager2() {
    }
    NoopContextManager2.prototype.active = function() {
      return ROOT_CONTEXT;
    };
    NoopContextManager2.prototype.with = function(_context, fn, thisArg) {
      var args = [];
      for (var _i = 3; _i < arguments.length; _i++) {
        args[_i - 3] = arguments[_i];
      }
      return fn.call.apply(fn, __spreadArray3([thisArg], __read4(args), false));
    };
    NoopContextManager2.prototype.bind = function(_context, target) {
      return target;
    };
    NoopContextManager2.prototype.enable = function() {
      return this;
    };
    NoopContextManager2.prototype.disable = function() {
      return this;
    };
    return NoopContextManager2;
  }()
);

// node_modules/@opentelemetry/api/build/esm/api/context.js
var __read5 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray4 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var API_NAME2 = "context";
var NOOP_CONTEXT_MANAGER = new NoopContextManager();
var ContextAPI = (
  /** @class */
  function() {
    function ContextAPI2() {
    }
    ContextAPI2.getInstance = function() {
      if (!this._instance) {
        this._instance = new ContextAPI2();
      }
      return this._instance;
    };
    ContextAPI2.prototype.setGlobalContextManager = function(contextManager) {
      return registerGlobal(API_NAME2, contextManager, DiagAPI.instance());
    };
    ContextAPI2.prototype.active = function() {
      return this._getContextManager().active();
    };
    ContextAPI2.prototype.with = function(context3, fn, thisArg) {
      var _a3;
      var args = [];
      for (var _i = 3; _i < arguments.length; _i++) {
        args[_i - 3] = arguments[_i];
      }
      return (_a3 = this._getContextManager()).with.apply(_a3, __spreadArray4([context3, fn, thisArg], __read5(args), false));
    };
    ContextAPI2.prototype.bind = function(context3, target) {
      return this._getContextManager().bind(context3, target);
    };
    ContextAPI2.prototype._getContextManager = function() {
      return getGlobal(API_NAME2) || NOOP_CONTEXT_MANAGER;
    };
    ContextAPI2.prototype.disable = function() {
      this._getContextManager().disable();
      unregisterGlobal(API_NAME2, DiagAPI.instance());
    };
    return ContextAPI2;
  }()
);

// node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js
var TraceFlags;
(function(TraceFlags2) {
  TraceFlags2[TraceFlags2["NONE"] = 0] = "NONE";
  TraceFlags2[TraceFlags2["SAMPLED"] = 1] = "SAMPLED";
})(TraceFlags || (TraceFlags = {}));

// node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js
var INVALID_SPANID = "0000000000000000";
var INVALID_TRACEID = "00000000000000000000000000000000";
var INVALID_SPAN_CONTEXT = {
  traceId: INVALID_TRACEID,
  spanId: INVALID_SPANID,
  traceFlags: TraceFlags.NONE
};

// node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js
var NonRecordingSpan = (
  /** @class */
  function() {
    function NonRecordingSpan2(_spanContext) {
      if (_spanContext === void 0) {
        _spanContext = INVALID_SPAN_CONTEXT;
      }
      this._spanContext = _spanContext;
    }
    NonRecordingSpan2.prototype.spanContext = function() {
      return this._spanContext;
    };
    NonRecordingSpan2.prototype.setAttribute = function(_key, _value) {
      return this;
    };
    NonRecordingSpan2.prototype.setAttributes = function(_attributes) {
      return this;
    };
    NonRecordingSpan2.prototype.addEvent = function(_name, _attributes) {
      return this;
    };
    NonRecordingSpan2.prototype.setStatus = function(_status) {
      return this;
    };
    NonRecordingSpan2.prototype.updateName = function(_name) {
      return this;
    };
    NonRecordingSpan2.prototype.end = function(_endTime) {
    };
    NonRecordingSpan2.prototype.isRecording = function() {
      return false;
    };
    NonRecordingSpan2.prototype.recordException = function(_exception, _time) {
    };
    return NonRecordingSpan2;
  }()
);

// node_modules/@opentelemetry/api/build/esm/trace/context-utils.js
var SPAN_KEY = createContextKey("OpenTelemetry Context Key SPAN");
function getSpan(context3) {
  return context3.getValue(SPAN_KEY) || void 0;
}
function getActiveSpan() {
  return getSpan(ContextAPI.getInstance().active());
}
function setSpan(context3, span) {
  return context3.setValue(SPAN_KEY, span);
}
function deleteSpan(context3) {
  return context3.deleteValue(SPAN_KEY);
}
function setSpanContext(context3, spanContext) {
  return setSpan(context3, new NonRecordingSpan(spanContext));
}
function getSpanContext(context3) {
  var _a3;
  return (_a3 = getSpan(context3)) === null || _a3 === void 0 ? void 0 : _a3.spanContext();
}

// node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js
var VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;
var VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;
function isValidTraceId(traceId) {
  return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;
}
function isValidSpanId(spanId) {
  return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;
}
function isSpanContextValid(spanContext) {
  return isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId);
}
function wrapSpanContext(spanContext) {
  return new NonRecordingSpan(spanContext);
}

// node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js
var contextApi = ContextAPI.getInstance();
var NoopTracer = (
  /** @class */
  function() {
    function NoopTracer2() {
    }
    NoopTracer2.prototype.startSpan = function(name, options, context3) {
      if (context3 === void 0) {
        context3 = contextApi.active();
      }
      var root = Boolean(options === null || options === void 0 ? void 0 : options.root);
      if (root) {
        return new NonRecordingSpan();
      }
      var parentFromContext = context3 && getSpanContext(context3);
      if (isSpanContext(parentFromContext) && isSpanContextValid(parentFromContext)) {
        return new NonRecordingSpan(parentFromContext);
      } else {
        return new NonRecordingSpan();
      }
    };
    NoopTracer2.prototype.startActiveSpan = function(name, arg2, arg3, arg4) {
      var opts;
      var ctx;
      var fn;
      if (arguments.length < 2) {
        return;
      } else if (arguments.length === 2) {
        fn = arg2;
      } else if (arguments.length === 3) {
        opts = arg2;
        fn = arg3;
      } else {
        opts = arg2;
        ctx = arg3;
        fn = arg4;
      }
      var parentContext = ctx !== null && ctx !== void 0 ? ctx : contextApi.active();
      var span = this.startSpan(name, opts, parentContext);
      var contextWithSpanSet = setSpan(parentContext, span);
      return contextApi.with(contextWithSpanSet, fn, void 0, span);
    };
    return NoopTracer2;
  }()
);
function isSpanContext(spanContext) {
  return typeof spanContext === "object" && typeof spanContext["spanId"] === "string" && typeof spanContext["traceId"] === "string" && typeof spanContext["traceFlags"] === "number";
}

// node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js
var NOOP_TRACER = new NoopTracer();
var ProxyTracer = (
  /** @class */
  function() {
    function ProxyTracer2(_provider, name, version2, options) {
      this._provider = _provider;
      this.name = name;
      this.version = version2;
      this.options = options;
    }
    ProxyTracer2.prototype.startSpan = function(name, options, context3) {
      return this._getTracer().startSpan(name, options, context3);
    };
    ProxyTracer2.prototype.startActiveSpan = function(_name, _options, _context, _fn) {
      var tracer = this._getTracer();
      return Reflect.apply(tracer.startActiveSpan, tracer, arguments);
    };
    ProxyTracer2.prototype._getTracer = function() {
      if (this._delegate) {
        return this._delegate;
      }
      var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);
      if (!tracer) {
        return NOOP_TRACER;
      }
      this._delegate = tracer;
      return this._delegate;
    };
    return ProxyTracer2;
  }()
);

// node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js
var NoopTracerProvider = (
  /** @class */
  function() {
    function NoopTracerProvider2() {
    }
    NoopTracerProvider2.prototype.getTracer = function(_name, _version, _options) {
      return new NoopTracer();
    };
    return NoopTracerProvider2;
  }()
);

// node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js
var NOOP_TRACER_PROVIDER = new NoopTracerProvider();
var ProxyTracerProvider = (
  /** @class */
  function() {
    function ProxyTracerProvider2() {
    }
    ProxyTracerProvider2.prototype.getTracer = function(name, version2, options) {
      var _a3;
      return (_a3 = this.getDelegateTracer(name, version2, options)) !== null && _a3 !== void 0 ? _a3 : new ProxyTracer(this, name, version2, options);
    };
    ProxyTracerProvider2.prototype.getDelegate = function() {
      var _a3;
      return (_a3 = this._delegate) !== null && _a3 !== void 0 ? _a3 : NOOP_TRACER_PROVIDER;
    };
    ProxyTracerProvider2.prototype.setDelegate = function(delegate) {
      this._delegate = delegate;
    };
    ProxyTracerProvider2.prototype.getDelegateTracer = function(name, version2, options) {
      var _a3;
      return (_a3 = this._delegate) === null || _a3 === void 0 ? void 0 : _a3.getTracer(name, version2, options);
    };
    return ProxyTracerProvider2;
  }()
);

// node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js
var SamplingDecision;
(function(SamplingDecision2) {
  SamplingDecision2[SamplingDecision2["NOT_RECORD"] = 0] = "NOT_RECORD";
  SamplingDecision2[SamplingDecision2["RECORD"] = 1] = "RECORD";
  SamplingDecision2[SamplingDecision2["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";
})(SamplingDecision || (SamplingDecision = {}));

// node_modules/@opentelemetry/api/build/esm/trace/span_kind.js
var SpanKind;
(function(SpanKind3) {
  SpanKind3[SpanKind3["INTERNAL"] = 0] = "INTERNAL";
  SpanKind3[SpanKind3["SERVER"] = 1] = "SERVER";
  SpanKind3[SpanKind3["CLIENT"] = 2] = "CLIENT";
  SpanKind3[SpanKind3["PRODUCER"] = 3] = "PRODUCER";
  SpanKind3[SpanKind3["CONSUMER"] = 4] = "CONSUMER";
})(SpanKind || (SpanKind = {}));

// node_modules/@opentelemetry/api/build/esm/trace/status.js
var SpanStatusCode;
(function(SpanStatusCode3) {
  SpanStatusCode3[SpanStatusCode3["UNSET"] = 0] = "UNSET";
  SpanStatusCode3[SpanStatusCode3["OK"] = 1] = "OK";
  SpanStatusCode3[SpanStatusCode3["ERROR"] = 2] = "ERROR";
})(SpanStatusCode || (SpanStatusCode = {}));

// node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js
var VALID_KEY_CHAR_RANGE = "[_0-9a-z-*/]";
var VALID_KEY = "[a-z]" + VALID_KEY_CHAR_RANGE + "{0,255}";
var VALID_VENDOR_KEY = "[a-z0-9]" + VALID_KEY_CHAR_RANGE + "{0,240}@[a-z]" + VALID_KEY_CHAR_RANGE + "{0,13}";
var VALID_KEY_REGEX = new RegExp("^(?:" + VALID_KEY + "|" + VALID_VENDOR_KEY + ")$");
var VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;
var INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;
function validateKey(key) {
  return VALID_KEY_REGEX.test(key);
}
function validateValue(value) {
  return VALID_VALUE_BASE_REGEX.test(value) && !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value);
}

// node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js
var MAX_TRACE_STATE_ITEMS = 32;
var MAX_TRACE_STATE_LEN = 512;
var LIST_MEMBERS_SEPARATOR = ",";
var LIST_MEMBER_KEY_VALUE_SPLITTER = "=";
var TraceStateImpl = (
  /** @class */
  function() {
    function TraceStateImpl2(rawTraceState) {
      this._internalState = /* @__PURE__ */ new Map();
      if (rawTraceState)
        this._parse(rawTraceState);
    }
    TraceStateImpl2.prototype.set = function(key, value) {
      var traceState = this._clone();
      if (traceState._internalState.has(key)) {
        traceState._internalState.delete(key);
      }
      traceState._internalState.set(key, value);
      return traceState;
    };
    TraceStateImpl2.prototype.unset = function(key) {
      var traceState = this._clone();
      traceState._internalState.delete(key);
      return traceState;
    };
    TraceStateImpl2.prototype.get = function(key) {
      return this._internalState.get(key);
    };
    TraceStateImpl2.prototype.serialize = function() {
      var _this = this;
      return this._keys().reduce(function(agg, key) {
        agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));
        return agg;
      }, []).join(LIST_MEMBERS_SEPARATOR);
    };
    TraceStateImpl2.prototype._parse = function(rawTraceState) {
      if (rawTraceState.length > MAX_TRACE_STATE_LEN)
        return;
      this._internalState = rawTraceState.split(LIST_MEMBERS_SEPARATOR).reverse().reduce(function(agg, part) {
        var listMember = part.trim();
        var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);
        if (i !== -1) {
          var key = listMember.slice(0, i);
          var value = listMember.slice(i + 1, part.length);
          if (validateKey(key) && validateValue(value)) {
            agg.set(key, value);
          } else {
          }
        }
        return agg;
      }, /* @__PURE__ */ new Map());
      if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {
        this._internalState = new Map(Array.from(this._internalState.entries()).reverse().slice(0, MAX_TRACE_STATE_ITEMS));
      }
    };
    TraceStateImpl2.prototype._keys = function() {
      return Array.from(this._internalState.keys()).reverse();
    };
    TraceStateImpl2.prototype._clone = function() {
      var traceState = new TraceStateImpl2();
      traceState._internalState = new Map(this._internalState);
      return traceState;
    };
    return TraceStateImpl2;
  }()
);

// node_modules/@opentelemetry/api/build/esm/context-api.js
var context = ContextAPI.getInstance();

// node_modules/@opentelemetry/api/build/esm/diag-api.js
var diag2 = DiagAPI.instance();

// node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js
var NoopMeterProvider = (
  /** @class */
  function() {
    function NoopMeterProvider2() {
    }
    NoopMeterProvider2.prototype.getMeter = function(_name, _version, _options) {
      return NOOP_METER;
    };
    return NoopMeterProvider2;
  }()
);
var NOOP_METER_PROVIDER = new NoopMeterProvider();

// node_modules/@opentelemetry/api/build/esm/api/metrics.js
var API_NAME3 = "metrics";
var MetricsAPI = (
  /** @class */
  function() {
    function MetricsAPI2() {
    }
    MetricsAPI2.getInstance = function() {
      if (!this._instance) {
        this._instance = new MetricsAPI2();
      }
      return this._instance;
    };
    MetricsAPI2.prototype.setGlobalMeterProvider = function(provider) {
      return registerGlobal(API_NAME3, provider, DiagAPI.instance());
    };
    MetricsAPI2.prototype.getMeterProvider = function() {
      return getGlobal(API_NAME3) || NOOP_METER_PROVIDER;
    };
    MetricsAPI2.prototype.getMeter = function(name, version2, options) {
      return this.getMeterProvider().getMeter(name, version2, options);
    };
    MetricsAPI2.prototype.disable = function() {
      unregisterGlobal(API_NAME3, DiagAPI.instance());
    };
    return MetricsAPI2;
  }()
);

// node_modules/@opentelemetry/api/build/esm/metrics-api.js
var metrics = MetricsAPI.getInstance();

// node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js
var NoopTextMapPropagator = (
  /** @class */
  function() {
    function NoopTextMapPropagator2() {
    }
    NoopTextMapPropagator2.prototype.inject = function(_context, _carrier) {
    };
    NoopTextMapPropagator2.prototype.extract = function(context3, _carrier) {
      return context3;
    };
    NoopTextMapPropagator2.prototype.fields = function() {
      return [];
    };
    return NoopTextMapPropagator2;
  }()
);

// node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js
var BAGGAGE_KEY = createContextKey("OpenTelemetry Baggage Key");
function getBaggage(context3) {
  return context3.getValue(BAGGAGE_KEY) || void 0;
}
function getActiveBaggage() {
  return getBaggage(ContextAPI.getInstance().active());
}
function setBaggage(context3, baggage) {
  return context3.setValue(BAGGAGE_KEY, baggage);
}
function deleteBaggage(context3) {
  return context3.deleteValue(BAGGAGE_KEY);
}

// node_modules/@opentelemetry/api/build/esm/api/propagation.js
var API_NAME4 = "propagation";
var NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();
var PropagationAPI = (
  /** @class */
  function() {
    function PropagationAPI2() {
      this.createBaggage = createBaggage;
      this.getBaggage = getBaggage;
      this.getActiveBaggage = getActiveBaggage;
      this.setBaggage = setBaggage;
      this.deleteBaggage = deleteBaggage;
    }
    PropagationAPI2.getInstance = function() {
      if (!this._instance) {
        this._instance = new PropagationAPI2();
      }
      return this._instance;
    };
    PropagationAPI2.prototype.setGlobalPropagator = function(propagator) {
      return registerGlobal(API_NAME4, propagator, DiagAPI.instance());
    };
    PropagationAPI2.prototype.inject = function(context3, carrier, setter) {
      if (setter === void 0) {
        setter = defaultTextMapSetter;
      }
      return this._getGlobalPropagator().inject(context3, carrier, setter);
    };
    PropagationAPI2.prototype.extract = function(context3, carrier, getter) {
      if (getter === void 0) {
        getter = defaultTextMapGetter;
      }
      return this._getGlobalPropagator().extract(context3, carrier, getter);
    };
    PropagationAPI2.prototype.fields = function() {
      return this._getGlobalPropagator().fields();
    };
    PropagationAPI2.prototype.disable = function() {
      unregisterGlobal(API_NAME4, DiagAPI.instance());
    };
    PropagationAPI2.prototype._getGlobalPropagator = function() {
      return getGlobal(API_NAME4) || NOOP_TEXT_MAP_PROPAGATOR;
    };
    return PropagationAPI2;
  }()
);

// node_modules/@opentelemetry/api/build/esm/propagation-api.js
var propagation = PropagationAPI.getInstance();

// node_modules/@opentelemetry/api/build/esm/api/trace.js
var API_NAME5 = "trace";
var TraceAPI = (
  /** @class */
  function() {
    function TraceAPI2() {
      this._proxyTracerProvider = new ProxyTracerProvider();
      this.wrapSpanContext = wrapSpanContext;
      this.isSpanContextValid = isSpanContextValid;
      this.deleteSpan = deleteSpan;
      this.getSpan = getSpan;
      this.getActiveSpan = getActiveSpan;
      this.getSpanContext = getSpanContext;
      this.setSpan = setSpan;
      this.setSpanContext = setSpanContext;
    }
    TraceAPI2.getInstance = function() {
      if (!this._instance) {
        this._instance = new TraceAPI2();
      }
      return this._instance;
    };
    TraceAPI2.prototype.setGlobalTracerProvider = function(provider) {
      var success = registerGlobal(API_NAME5, this._proxyTracerProvider, DiagAPI.instance());
      if (success) {
        this._proxyTracerProvider.setDelegate(provider);
      }
      return success;
    };
    TraceAPI2.prototype.getTracerProvider = function() {
      return getGlobal(API_NAME5) || this._proxyTracerProvider;
    };
    TraceAPI2.prototype.getTracer = function(name, version2) {
      return this.getTracerProvider().getTracer(name, version2);
    };
    TraceAPI2.prototype.disable = function() {
      unregisterGlobal(API_NAME5, DiagAPI.instance());
      this._proxyTracerProvider = new ProxyTracerProvider();
    };
    return TraceAPI2;
  }()
);

// node_modules/@opentelemetry/api/build/esm/trace-api.js
var trace = TraceAPI.getInstance();

// node_modules/@azure/core-tracing/dist-esm/src/interfaces.js
var SpanKind2;
(function(SpanKind3) {
  SpanKind3[SpanKind3["INTERNAL"] = 0] = "INTERNAL";
  SpanKind3[SpanKind3["SERVER"] = 1] = "SERVER";
  SpanKind3[SpanKind3["CLIENT"] = 2] = "CLIENT";
  SpanKind3[SpanKind3["PRODUCER"] = 3] = "PRODUCER";
  SpanKind3[SpanKind3["CONSUMER"] = 4] = "CONSUMER";
})(SpanKind2 || (SpanKind2 = {}));
function setSpan2(context3, span) {
  return trace.setSpan(context3, span);
}
function isSpanContextValid2(context3) {
  return trace.isSpanContextValid(context3);
}
function getTracer(name, version2) {
  return trace.getTracer(name || "azure/core-tracing", version2);
}
var context2 = context;
var SpanStatusCode2;
(function(SpanStatusCode3) {
  SpanStatusCode3[SpanStatusCode3["UNSET"] = 0] = "UNSET";
  SpanStatusCode3[SpanStatusCode3["OK"] = 1] = "OK";
  SpanStatusCode3[SpanStatusCode3["ERROR"] = 2] = "ERROR";
})(SpanStatusCode2 || (SpanStatusCode2 = {}));

// node_modules/@azure/core-tracing/dist-esm/src/createSpan.js
function isTracingDisabled() {
  var _a3;
  if (typeof process === "undefined") {
    return false;
  }
  const azureTracingDisabledValue = (_a3 = process.env.AZURE_TRACING_DISABLED) === null || _a3 === void 0 ? void 0 : _a3.toLowerCase();
  if (azureTracingDisabledValue === "false" || azureTracingDisabledValue === "0") {
    return false;
  }
  return Boolean(azureTracingDisabledValue);
}
function createSpanFunction(args) {
  return function(operationName, operationOptions) {
    const tracer = getTracer();
    const tracingOptions = (operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) || {};
    const spanOptions = Object.assign({ kind: SpanKind2.INTERNAL }, tracingOptions.spanOptions);
    const spanName = args.packagePrefix ? `${args.packagePrefix}.${operationName}` : operationName;
    let span;
    if (isTracingDisabled()) {
      span = trace.wrapSpanContext(INVALID_SPAN_CONTEXT);
    } else {
      span = tracer.startSpan(spanName, spanOptions, tracingOptions.tracingContext);
    }
    if (args.namespace) {
      span.setAttribute("az.namespace", args.namespace);
    }
    let newSpanOptions = tracingOptions.spanOptions || {};
    if (span.isRecording() && args.namespace) {
      newSpanOptions = Object.assign(Object.assign({}, tracingOptions.spanOptions), { attributes: Object.assign(Object.assign({}, spanOptions.attributes), { "az.namespace": args.namespace }) });
    }
    const newTracingOptions = Object.assign(Object.assign({}, tracingOptions), { spanOptions: newSpanOptions, tracingContext: setSpan2(tracingOptions.tracingContext || context2.active(), span) });
    const newOperationOptions = Object.assign(Object.assign({}, operationOptions), { tracingOptions: newTracingOptions });
    return {
      span,
      updatedOptions: newOperationOptions
    };
  };
}

// node_modules/@azure/core-tracing/dist-esm/src/utils/traceParentHeader.js
var VERSION2 = "00";
function getTraceParentHeader(spanContext) {
  const missingFields = [];
  if (!spanContext.traceId) {
    missingFields.push("traceId");
  }
  if (!spanContext.spanId) {
    missingFields.push("spanId");
  }
  if (missingFields.length) {
    return;
  }
  const flags = spanContext.traceFlags || 0;
  const hexFlags = flags.toString(16);
  const traceFlags = hexFlags.length === 1 ? `0${hexFlags}` : hexFlags;
  return `${VERSION2}-${spanContext.traceId}-${spanContext.spanId}-${traceFlags}`;
}

// node_modules/@azure/core-http/dist-esm/src/policies/tracingPolicy.js
var createSpan = createSpanFunction({
  packagePrefix: "",
  namespace: ""
});
function tracingPolicy(tracingOptions = {}) {
  return {
    create(nextPolicy, options) {
      return new TracingPolicy(nextPolicy, options, tracingOptions);
    }
  };
}
var TracingPolicy = class extends BaseRequestPolicy {
  constructor(nextPolicy, options, tracingOptions) {
    super(nextPolicy, options);
    this.userAgent = tracingOptions.userAgent;
  }
  async sendRequest(request) {
    if (!request.tracingContext) {
      return this._nextPolicy.sendRequest(request);
    }
    const span = this.tryCreateSpan(request);
    if (!span) {
      return this._nextPolicy.sendRequest(request);
    }
    try {
      const response = await this._nextPolicy.sendRequest(request);
      this.tryProcessResponse(span, response);
      return response;
    } catch (err) {
      this.tryProcessError(span, err);
      throw err;
    }
  }
  tryCreateSpan(request) {
    var _a3;
    try {
      const { span } = createSpan(`HTTP ${request.method}`, {
        tracingOptions: {
          spanOptions: Object.assign(Object.assign({}, request.spanOptions), { kind: SpanKind2.CLIENT }),
          tracingContext: request.tracingContext
        }
      });
      if (!span.isRecording()) {
        span.end();
        return void 0;
      }
      const namespaceFromContext = (_a3 = request.tracingContext) === null || _a3 === void 0 ? void 0 : _a3.getValue(Symbol.for("az.namespace"));
      if (typeof namespaceFromContext === "string") {
        span.setAttribute("az.namespace", namespaceFromContext);
      }
      span.setAttributes({
        "http.method": request.method,
        "http.url": request.url,
        requestId: request.requestId
      });
      if (this.userAgent) {
        span.setAttribute("http.user_agent", this.userAgent);
      }
      const spanContext = span.spanContext();
      const traceParentHeader = getTraceParentHeader(spanContext);
      if (traceParentHeader && isSpanContextValid2(spanContext)) {
        request.headers.set("traceparent", traceParentHeader);
        const traceState = spanContext.traceState && spanContext.traceState.serialize();
        if (traceState) {
          request.headers.set("tracestate", traceState);
        }
      }
      return span;
    } catch (error) {
      logger.warning(`Skipping creating a tracing span due to an error: ${error.message}`);
      return void 0;
    }
  }
  tryProcessError(span, err) {
    try {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: err.message
      });
      if (err.statusCode) {
        span.setAttribute("http.status_code", err.statusCode);
      }
      span.end();
    } catch (error) {
      logger.warning(`Skipping tracing span processing due to an error: ${error.message}`);
    }
  }
  tryProcessResponse(span, response) {
    try {
      span.setAttribute("http.status_code", response.status);
      const serviceRequestId = response.headers.get("x-ms-request-id");
      if (serviceRequestId) {
        span.setAttribute("serviceRequestId", serviceRequestId);
      }
      span.setStatus({
        code: SpanStatusCode2.OK
      });
      span.end();
    } catch (error) {
      logger.warning(`Skipping tracing span processing due to an error: ${error.message}`);
    }
  }
};

// node_modules/@azure/core-http/dist-esm/src/serviceClient.js
var ServiceClient = class {
  /**
   * The ServiceClient constructor
   * @param credentials - The credentials used for authentication with the service.
   * @param options - The service client options that govern the behavior of the client.
   */
  constructor(credentials, options) {
    if (!options) {
      options = {};
    }
    this._withCredentials = options.withCredentials || false;
    this._httpClient = options.httpClient || getCachedDefaultHttpClient();
    this._requestPolicyOptions = new RequestPolicyOptions(options.httpPipelineLogger);
    let requestPolicyFactories;
    if (Array.isArray(options.requestPolicyFactories)) {
      logger.info("ServiceClient: using custom request policies");
      requestPolicyFactories = options.requestPolicyFactories;
    } else {
      let authPolicyFactory = void 0;
      if (isTokenCredential(credentials)) {
        logger.info("ServiceClient: creating bearer token authentication policy from provided credentials");
        const wrappedPolicyFactory = () => {
          let bearerTokenPolicyFactory = void 0;
          const serviceClient = this;
          const serviceClientOptions = options;
          return {
            create(nextPolicy, createOptions) {
              const credentialScopes = getCredentialScopes(serviceClientOptions, serviceClient.baseUri);
              if (!credentialScopes) {
                throw new Error(`When using credential, the ServiceClient must contain a baseUri or a credentialScopes in ServiceClientOptions. Unable to create a bearerTokenAuthenticationPolicy`);
              }
              if (bearerTokenPolicyFactory === void 0 || bearerTokenPolicyFactory === null) {
                bearerTokenPolicyFactory = bearerTokenAuthenticationPolicy(credentials, credentialScopes);
              }
              return bearerTokenPolicyFactory.create(nextPolicy, createOptions);
            }
          };
        };
        authPolicyFactory = wrappedPolicyFactory();
      } else if (credentials && typeof credentials.signRequest === "function") {
        logger.info("ServiceClient: creating signing policy from provided credentials");
        authPolicyFactory = signingPolicy(credentials);
      } else if (credentials !== void 0 && credentials !== null) {
        throw new Error("The credentials argument must implement the TokenCredential interface");
      }
      logger.info("ServiceClient: using default request policies");
      requestPolicyFactories = createDefaultRequestPolicyFactories(authPolicyFactory, options);
      if (options.requestPolicyFactories) {
        const newRequestPolicyFactories = options.requestPolicyFactories(requestPolicyFactories);
        if (newRequestPolicyFactories) {
          requestPolicyFactories = newRequestPolicyFactories;
        }
      }
    }
    this._requestPolicyFactories = requestPolicyFactories;
  }
  /**
   * Send the provided httpRequest.
   */
  sendRequest(options) {
    if (options === null || options === void 0 || typeof options !== "object") {
      throw new Error("options cannot be null or undefined and it must be of type object.");
    }
    let httpRequest;
    try {
      if (isWebResourceLike(options)) {
        options.validateRequestProperties();
        httpRequest = options;
      } else {
        httpRequest = new WebResource();
        httpRequest = httpRequest.prepare(options);
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let httpPipeline = this._httpClient;
    if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) {
      for (let i = this._requestPolicyFactories.length - 1; i >= 0; --i) {
        httpPipeline = this._requestPolicyFactories[i].create(httpPipeline, this._requestPolicyOptions);
      }
    }
    return httpPipeline.sendRequest(httpRequest);
  }
  /**
   * Send an HTTP request that is populated using the provided OperationSpec.
   * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.
   * @param operationSpec - The OperationSpec to use to populate the httpRequest.
   * @param callback - The callback to call when the response is received.
   */
  async sendOperationRequest(operationArguments, operationSpec, callback) {
    var _a3;
    if (typeof operationArguments.options === "function") {
      callback = operationArguments.options;
      operationArguments.options = void 0;
    }
    const serializerOptions = (_a3 = operationArguments.options) === null || _a3 === void 0 ? void 0 : _a3.serializerOptions;
    const httpRequest = new WebResource();
    let result;
    try {
      const baseUri = operationSpec.baseUrl || this.baseUri;
      if (!baseUri) {
        throw new Error("If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.");
      }
      httpRequest.method = operationSpec.httpMethod;
      httpRequest.operationSpec = operationSpec;
      const requestUrl = URLBuilder.parse(baseUri);
      if (operationSpec.path) {
        requestUrl.appendPath(operationSpec.path);
      }
      if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) {
        for (const urlParameter of operationSpec.urlParameters) {
          let urlParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, urlParameter, operationSpec.serializer);
          urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, getPathStringFromParameter(urlParameter), serializerOptions);
          if (!urlParameter.skipEncoding) {
            urlParameterValue = encodeURIComponent(urlParameterValue);
          }
          requestUrl.replaceAll(`{${urlParameter.mapper.serializedName || getPathStringFromParameter(urlParameter)}}`, urlParameterValue);
        }
      }
      if (operationSpec.queryParameters && operationSpec.queryParameters.length > 0) {
        for (const queryParameter of operationSpec.queryParameters) {
          let queryParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, queryParameter, operationSpec.serializer);
          if (queryParameterValue !== void 0 && queryParameterValue !== null) {
            queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter), serializerOptions);
            if (queryParameter.collectionFormat !== void 0 && queryParameter.collectionFormat !== null) {
              if (queryParameter.collectionFormat === QueryCollectionFormat.Multi) {
                if (queryParameterValue.length === 0) {
                  continue;
                } else {
                  for (const index in queryParameterValue) {
                    const item = queryParameterValue[index];
                    queryParameterValue[index] = item === void 0 || item === null ? "" : item.toString();
                  }
                }
              } else if (queryParameter.collectionFormat === QueryCollectionFormat.Ssv || queryParameter.collectionFormat === QueryCollectionFormat.Tsv) {
                queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);
              }
            }
            if (!queryParameter.skipEncoding) {
              if (Array.isArray(queryParameterValue)) {
                for (const index in queryParameterValue) {
                  if (queryParameterValue[index] !== void 0 && queryParameterValue[index] !== null) {
                    queryParameterValue[index] = encodeURIComponent(queryParameterValue[index]);
                  }
                }
              } else {
                queryParameterValue = encodeURIComponent(queryParameterValue);
              }
            }
            if (queryParameter.collectionFormat !== void 0 && queryParameter.collectionFormat !== null && queryParameter.collectionFormat !== QueryCollectionFormat.Multi && queryParameter.collectionFormat !== QueryCollectionFormat.Ssv && queryParameter.collectionFormat !== QueryCollectionFormat.Tsv) {
              queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);
            }
            requestUrl.setQueryParameter(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);
          }
        }
      }
      httpRequest.url = requestUrl.toString();
      const contentType2 = operationSpec.contentType || this.requestContentType;
      if (contentType2 && operationSpec.requestBody) {
        httpRequest.headers.set("Content-Type", contentType2);
      }
      if (operationSpec.headerParameters) {
        for (const headerParameter of operationSpec.headerParameters) {
          let headerValue = getOperationArgumentValueFromParameter(this, operationArguments, headerParameter, operationSpec.serializer);
          if (headerValue !== void 0 && headerValue !== null) {
            headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter), serializerOptions);
            const headerCollectionPrefix = headerParameter.mapper.headerCollectionPrefix;
            if (headerCollectionPrefix) {
              for (const key of Object.keys(headerValue)) {
                httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);
              }
            } else {
              httpRequest.headers.set(headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter), headerValue);
            }
          }
        }
      }
      const options = operationArguments.options;
      if (options) {
        if (options.customHeaders) {
          for (const customHeaderName in options.customHeaders) {
            httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);
          }
        }
        if (options.abortSignal) {
          httpRequest.abortSignal = options.abortSignal;
        }
        if (options.timeout) {
          httpRequest.timeout = options.timeout;
        }
        if (options.onUploadProgress) {
          httpRequest.onUploadProgress = options.onUploadProgress;
        }
        if (options.onDownloadProgress) {
          httpRequest.onDownloadProgress = options.onDownloadProgress;
        }
        if (options.spanOptions) {
          httpRequest.spanOptions = options.spanOptions;
        }
        if (options.tracingContext) {
          httpRequest.tracingContext = options.tracingContext;
        }
        if (options.shouldDeserialize !== void 0 && options.shouldDeserialize !== null) {
          httpRequest.shouldDeserialize = options.shouldDeserialize;
        }
      }
      httpRequest.withCredentials = this._withCredentials;
      serializeRequestBody(this, httpRequest, operationArguments, operationSpec);
      if (httpRequest.streamResponseStatusCodes === void 0) {
        httpRequest.streamResponseStatusCodes = getStreamResponseStatusCodes(operationSpec);
      }
      let rawResponse;
      let sendRequestError;
      try {
        rawResponse = await this.sendRequest(httpRequest);
      } catch (error) {
        sendRequestError = error;
      }
      if (sendRequestError) {
        if (sendRequestError.response) {
          sendRequestError.details = flattenResponse(sendRequestError.response, operationSpec.responses[sendRequestError.statusCode] || operationSpec.responses["default"]);
        }
        result = Promise.reject(sendRequestError);
      } else {
        result = Promise.resolve(flattenResponse(rawResponse, operationSpec.responses[rawResponse.status]));
      }
    } catch (error) {
      result = Promise.reject(error);
    }
    const cb = callback;
    if (cb) {
      result.then((res) => cb(null, res._response.parsedBody, res._response.request, res._response)).catch((err) => cb(err));
    }
    return result;
  }
};
function serializeRequestBody(serviceClient, httpRequest, operationArguments, operationSpec) {
  var _a3, _b2, _c2, _d2, _e, _f;
  const serializerOptions = (_b2 = (_a3 = operationArguments.options) === null || _a3 === void 0 ? void 0 : _a3.serializerOptions) !== null && _b2 !== void 0 ? _b2 : {};
  const updatedOptions = {
    rootName: (_c2 = serializerOptions.rootName) !== null && _c2 !== void 0 ? _c2 : "",
    includeRoot: (_d2 = serializerOptions.includeRoot) !== null && _d2 !== void 0 ? _d2 : false,
    xmlCharKey: (_e = serializerOptions.xmlCharKey) !== null && _e !== void 0 ? _e : XML_CHARKEY
  };
  const xmlCharKey = serializerOptions.xmlCharKey;
  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {
    httpRequest.body = getOperationArgumentValueFromParameter(serviceClient, operationArguments, operationSpec.requestBody, operationSpec.serializer);
    const bodyMapper = operationSpec.requestBody.mapper;
    const { required, xmlName, xmlElementName, serializedName, xmlNamespace, xmlNamespacePrefix } = bodyMapper;
    const typeName = bodyMapper.type.name;
    try {
      if (httpRequest.body !== void 0 && httpRequest.body !== null || required) {
        const requestBodyParameterPathString = getPathStringFromParameter(operationSpec.requestBody);
        httpRequest.body = operationSpec.serializer.serialize(bodyMapper, httpRequest.body, requestBodyParameterPathString, updatedOptions);
        const isStream = typeName === MapperType.Stream;
        if (operationSpec.isXML) {
          const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : "xmlns";
          const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, httpRequest.body, updatedOptions);
          if (typeName === MapperType.Sequence) {
            httpRequest.body = stringifyXML(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), {
              rootName: xmlName || serializedName,
              xmlCharKey
            });
          } else if (!isStream) {
            httpRequest.body = stringifyXML(value, {
              rootName: xmlName || serializedName,
              xmlCharKey
            });
          }
        } else if (typeName === MapperType.String && (((_f = operationSpec.contentType) === null || _f === void 0 ? void 0 : _f.match("text/plain")) || operationSpec.mediaType === "text")) {
          return;
        } else if (!isStream) {
          httpRequest.body = JSON.stringify(httpRequest.body);
        }
      }
    } catch (error) {
      throw new Error(`Error "${error.message}" occurred in serializing the payload - ${JSON.stringify(serializedName, void 0, "  ")}.`);
    }
  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {
    httpRequest.formData = {};
    for (const formDataParameter of operationSpec.formDataParameters) {
      const formDataParameterValue = getOperationArgumentValueFromParameter(serviceClient, operationArguments, formDataParameter, operationSpec.serializer);
      if (formDataParameterValue !== void 0 && formDataParameterValue !== null) {
        const formDataParameterPropertyName = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);
        httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter), updatedOptions);
      }
    }
  }
}
function getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {
  if (xmlNamespace && !["Composite", "Sequence", "Dictionary"].includes(typeName)) {
    const result = {};
    result[options.xmlCharKey] = serializedValue;
    result[XML_ATTRKEY] = { [xmlnsKey]: xmlNamespace };
    return result;
  }
  return serializedValue;
}
function getValueOrFunctionResult(value, defaultValueCreator) {
  let result;
  if (typeof value === "string") {
    result = value;
  } else {
    result = defaultValueCreator();
    if (typeof value === "function") {
      result = value(result);
    }
  }
  return result;
}
function createDefaultRequestPolicyFactories(authPolicyFactory, options) {
  const factories = [];
  if (options.generateClientRequestIdHeader) {
    factories.push(generateClientRequestIdPolicy(options.clientRequestIdHeaderName));
  }
  if (authPolicyFactory) {
    factories.push(authPolicyFactory);
  }
  const userAgentHeaderName = getValueOrFunctionResult(options.userAgentHeaderName, getDefaultUserAgentHeaderName);
  const userAgentHeaderValue = getValueOrFunctionResult(options.userAgent, getDefaultUserAgentValue);
  if (userAgentHeaderName && userAgentHeaderValue) {
    factories.push(userAgentPolicy({ key: userAgentHeaderName, value: userAgentHeaderValue }));
  }
  factories.push(redirectPolicy());
  factories.push(rpRegistrationPolicy(options.rpRegistrationRetryTimeout));
  if (!options.noRetryPolicy) {
    factories.push(exponentialRetryPolicy());
    factories.push(systemErrorRetryPolicy());
    factories.push(throttlingRetryPolicy());
  }
  factories.push(deserializationPolicy(options.deserializationContentTypes));
  if (isNode) {
    factories.push(proxyPolicy(options.proxySettings));
  }
  factories.push(logPolicy({ logger: logger.info }));
  return factories;
}
function getOperationArgumentValueFromParameter(serviceClient, operationArguments, parameter, serializer4) {
  return getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameter.parameterPath, parameter.mapper, serializer4);
}
function getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameterPath, parameterMapper, serializer4) {
  var _a3;
  let value;
  if (typeof parameterPath === "string") {
    parameterPath = [parameterPath];
  }
  const serializerOptions = (_a3 = operationArguments.options) === null || _a3 === void 0 ? void 0 : _a3.serializerOptions;
  if (Array.isArray(parameterPath)) {
    if (parameterPath.length > 0) {
      if (parameterMapper.isConstant) {
        value = parameterMapper.defaultValue;
      } else {
        let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);
        if (!propertySearchResult.propertyFound) {
          propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);
        }
        let useDefaultValue = false;
        if (!propertySearchResult.propertyFound) {
          useDefaultValue = parameterMapper.required || parameterPath[0] === "options" && parameterPath.length === 2;
        }
        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;
      }
      const parameterPathString = getPathStringFromParameterPath(parameterPath, parameterMapper);
      serializer4.serialize(parameterMapper, value, parameterPathString, serializerOptions);
    }
  } else {
    if (parameterMapper.required) {
      value = {};
    }
    for (const propertyName in parameterPath) {
      const propertyMapper = parameterMapper.type.modelProperties[propertyName];
      const propertyPath = parameterPath[propertyName];
      const propertyValue = getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, propertyPath, propertyMapper, serializer4);
      const propertyPathString = getPathStringFromParameterPath(propertyPath, propertyMapper);
      serializer4.serialize(propertyMapper, propertyValue, propertyPathString, serializerOptions);
      if (propertyValue !== void 0 && propertyValue !== null) {
        if (!value) {
          value = {};
        }
        value[propertyName] = propertyValue;
      }
    }
  }
  return value;
}
function getPropertyFromParameterPath(parent, parameterPath) {
  const result = { propertyFound: false };
  let i = 0;
  for (; i < parameterPath.length; ++i) {
    const parameterPathPart = parameterPath[i];
    if (parent !== void 0 && parent !== null && parameterPathPart in parent) {
      parent = parent[parameterPathPart];
    } else {
      break;
    }
  }
  if (i === parameterPath.length) {
    result.propertyValue = parent;
    result.propertyFound = true;
  }
  return result;
}
function flattenResponse(_response, responseSpec) {
  const parsedHeaders = _response.parsedHeaders;
  const bodyMapper = responseSpec && responseSpec.bodyMapper;
  const addOperationResponse = (obj) => {
    return Object.defineProperty(obj, "_response", {
      value: _response
    });
  };
  if (bodyMapper) {
    const typeName = bodyMapper.type.name;
    if (typeName === "Stream") {
      return addOperationResponse(Object.assign(Object.assign({}, parsedHeaders), { blobBody: _response.blobBody, readableStreamBody: _response.readableStreamBody }));
    }
    const modelProperties = typeName === "Composite" && bodyMapper.type.modelProperties || {};
    const isPageableResponse = Object.keys(modelProperties).some((k) => modelProperties[k].serializedName === "");
    if (typeName === "Sequence" || isPageableResponse) {
      const arrayResponse = [..._response.parsedBody || []];
      for (const key of Object.keys(modelProperties)) {
        if (modelProperties[key].serializedName) {
          arrayResponse[key] = _response.parsedBody[key];
        }
      }
      if (parsedHeaders) {
        for (const key of Object.keys(parsedHeaders)) {
          arrayResponse[key] = parsedHeaders[key];
        }
      }
      addOperationResponse(arrayResponse);
      return arrayResponse;
    }
    if (typeName === "Composite" || typeName === "Dictionary") {
      return addOperationResponse(Object.assign(Object.assign({}, parsedHeaders), _response.parsedBody));
    }
  }
  if (bodyMapper || _response.request.method === "HEAD" || isPrimitiveType(_response.parsedBody)) {
    return addOperationResponse(Object.assign(Object.assign({}, parsedHeaders), { body: _response.parsedBody }));
  }
  return addOperationResponse(Object.assign(Object.assign({}, parsedHeaders), _response.parsedBody));
}
function getCredentialScopes(options, baseUri) {
  if (options === null || options === void 0 ? void 0 : options.credentialScopes) {
    return options.credentialScopes;
  }
  if (baseUri) {
    return `${baseUri}/.default`;
  }
  return void 0;
}

// node_modules/@azure/core-http/dist-esm/src/credentials/accessTokenCache.js
var TokenRefreshBufferMs = 2 * 60 * 1e3;

// node_modules/@azure/core-http/dist-esm/src/credentials/basicAuthenticationCredentials.js
var HeaderConstants = Constants.HeaderConstants;

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js
var mappers_exports = {};
__export(mappers_exports, {
  AccessPolicy: () => AccessPolicy,
  AppendBlobAppendBlockExceptionHeaders: () => AppendBlobAppendBlockExceptionHeaders,
  AppendBlobAppendBlockFromUrlExceptionHeaders: () => AppendBlobAppendBlockFromUrlExceptionHeaders,
  AppendBlobAppendBlockFromUrlHeaders: () => AppendBlobAppendBlockFromUrlHeaders,
  AppendBlobAppendBlockHeaders: () => AppendBlobAppendBlockHeaders,
  AppendBlobCreateExceptionHeaders: () => AppendBlobCreateExceptionHeaders,
  AppendBlobCreateHeaders: () => AppendBlobCreateHeaders,
  AppendBlobSealExceptionHeaders: () => AppendBlobSealExceptionHeaders,
  AppendBlobSealHeaders: () => AppendBlobSealHeaders,
  ArrowConfiguration: () => ArrowConfiguration,
  ArrowField: () => ArrowField,
  BlobAbortCopyFromURLExceptionHeaders: () => BlobAbortCopyFromURLExceptionHeaders,
  BlobAbortCopyFromURLHeaders: () => BlobAbortCopyFromURLHeaders,
  BlobAcquireLeaseExceptionHeaders: () => BlobAcquireLeaseExceptionHeaders,
  BlobAcquireLeaseHeaders: () => BlobAcquireLeaseHeaders,
  BlobBreakLeaseExceptionHeaders: () => BlobBreakLeaseExceptionHeaders,
  BlobBreakLeaseHeaders: () => BlobBreakLeaseHeaders,
  BlobChangeLeaseExceptionHeaders: () => BlobChangeLeaseExceptionHeaders,
  BlobChangeLeaseHeaders: () => BlobChangeLeaseHeaders,
  BlobCopyFromURLExceptionHeaders: () => BlobCopyFromURLExceptionHeaders,
  BlobCopyFromURLHeaders: () => BlobCopyFromURLHeaders,
  BlobCreateSnapshotExceptionHeaders: () => BlobCreateSnapshotExceptionHeaders,
  BlobCreateSnapshotHeaders: () => BlobCreateSnapshotHeaders,
  BlobDeleteExceptionHeaders: () => BlobDeleteExceptionHeaders,
  BlobDeleteHeaders: () => BlobDeleteHeaders,
  BlobDeleteImmutabilityPolicyExceptionHeaders: () => BlobDeleteImmutabilityPolicyExceptionHeaders,
  BlobDeleteImmutabilityPolicyHeaders: () => BlobDeleteImmutabilityPolicyHeaders,
  BlobDownloadExceptionHeaders: () => BlobDownloadExceptionHeaders,
  BlobDownloadHeaders: () => BlobDownloadHeaders,
  BlobFlatListSegment: () => BlobFlatListSegment,
  BlobGetAccountInfoExceptionHeaders: () => BlobGetAccountInfoExceptionHeaders,
  BlobGetAccountInfoHeaders: () => BlobGetAccountInfoHeaders,
  BlobGetPropertiesExceptionHeaders: () => BlobGetPropertiesExceptionHeaders,
  BlobGetPropertiesHeaders: () => BlobGetPropertiesHeaders,
  BlobGetTagsExceptionHeaders: () => BlobGetTagsExceptionHeaders,
  BlobGetTagsHeaders: () => BlobGetTagsHeaders,
  BlobHierarchyListSegment: () => BlobHierarchyListSegment,
  BlobItemInternal: () => BlobItemInternal,
  BlobName: () => BlobName,
  BlobPrefix: () => BlobPrefix,
  BlobPropertiesInternal: () => BlobPropertiesInternal,
  BlobQueryExceptionHeaders: () => BlobQueryExceptionHeaders,
  BlobQueryHeaders: () => BlobQueryHeaders,
  BlobReleaseLeaseExceptionHeaders: () => BlobReleaseLeaseExceptionHeaders,
  BlobReleaseLeaseHeaders: () => BlobReleaseLeaseHeaders,
  BlobRenewLeaseExceptionHeaders: () => BlobRenewLeaseExceptionHeaders,
  BlobRenewLeaseHeaders: () => BlobRenewLeaseHeaders,
  BlobServiceProperties: () => BlobServiceProperties,
  BlobServiceStatistics: () => BlobServiceStatistics,
  BlobSetExpiryExceptionHeaders: () => BlobSetExpiryExceptionHeaders,
  BlobSetExpiryHeaders: () => BlobSetExpiryHeaders,
  BlobSetHttpHeadersExceptionHeaders: () => BlobSetHttpHeadersExceptionHeaders,
  BlobSetHttpHeadersHeaders: () => BlobSetHttpHeadersHeaders,
  BlobSetImmutabilityPolicyExceptionHeaders: () => BlobSetImmutabilityPolicyExceptionHeaders,
  BlobSetImmutabilityPolicyHeaders: () => BlobSetImmutabilityPolicyHeaders,
  BlobSetLegalHoldExceptionHeaders: () => BlobSetLegalHoldExceptionHeaders,
  BlobSetLegalHoldHeaders: () => BlobSetLegalHoldHeaders,
  BlobSetMetadataExceptionHeaders: () => BlobSetMetadataExceptionHeaders,
  BlobSetMetadataHeaders: () => BlobSetMetadataHeaders,
  BlobSetTagsExceptionHeaders: () => BlobSetTagsExceptionHeaders,
  BlobSetTagsHeaders: () => BlobSetTagsHeaders,
  BlobSetTierExceptionHeaders: () => BlobSetTierExceptionHeaders,
  BlobSetTierHeaders: () => BlobSetTierHeaders,
  BlobStartCopyFromURLExceptionHeaders: () => BlobStartCopyFromURLExceptionHeaders,
  BlobStartCopyFromURLHeaders: () => BlobStartCopyFromURLHeaders,
  BlobTag: () => BlobTag,
  BlobTags: () => BlobTags,
  BlobUndeleteExceptionHeaders: () => BlobUndeleteExceptionHeaders,
  BlobUndeleteHeaders: () => BlobUndeleteHeaders,
  Block: () => Block,
  BlockBlobCommitBlockListExceptionHeaders: () => BlockBlobCommitBlockListExceptionHeaders,
  BlockBlobCommitBlockListHeaders: () => BlockBlobCommitBlockListHeaders,
  BlockBlobGetBlockListExceptionHeaders: () => BlockBlobGetBlockListExceptionHeaders,
  BlockBlobGetBlockListHeaders: () => BlockBlobGetBlockListHeaders,
  BlockBlobPutBlobFromUrlExceptionHeaders: () => BlockBlobPutBlobFromUrlExceptionHeaders,
  BlockBlobPutBlobFromUrlHeaders: () => BlockBlobPutBlobFromUrlHeaders,
  BlockBlobStageBlockExceptionHeaders: () => BlockBlobStageBlockExceptionHeaders,
  BlockBlobStageBlockFromURLExceptionHeaders: () => BlockBlobStageBlockFromURLExceptionHeaders,
  BlockBlobStageBlockFromURLHeaders: () => BlockBlobStageBlockFromURLHeaders,
  BlockBlobStageBlockHeaders: () => BlockBlobStageBlockHeaders,
  BlockBlobUploadExceptionHeaders: () => BlockBlobUploadExceptionHeaders,
  BlockBlobUploadHeaders: () => BlockBlobUploadHeaders,
  BlockList: () => BlockList,
  BlockLookupList: () => BlockLookupList,
  ClearRange: () => ClearRange,
  ContainerAcquireLeaseExceptionHeaders: () => ContainerAcquireLeaseExceptionHeaders,
  ContainerAcquireLeaseHeaders: () => ContainerAcquireLeaseHeaders,
  ContainerBreakLeaseExceptionHeaders: () => ContainerBreakLeaseExceptionHeaders,
  ContainerBreakLeaseHeaders: () => ContainerBreakLeaseHeaders,
  ContainerChangeLeaseExceptionHeaders: () => ContainerChangeLeaseExceptionHeaders,
  ContainerChangeLeaseHeaders: () => ContainerChangeLeaseHeaders,
  ContainerCreateExceptionHeaders: () => ContainerCreateExceptionHeaders,
  ContainerCreateHeaders: () => ContainerCreateHeaders,
  ContainerDeleteExceptionHeaders: () => ContainerDeleteExceptionHeaders,
  ContainerDeleteHeaders: () => ContainerDeleteHeaders,
  ContainerFilterBlobsExceptionHeaders: () => ContainerFilterBlobsExceptionHeaders,
  ContainerFilterBlobsHeaders: () => ContainerFilterBlobsHeaders,
  ContainerGetAccessPolicyExceptionHeaders: () => ContainerGetAccessPolicyExceptionHeaders,
  ContainerGetAccessPolicyHeaders: () => ContainerGetAccessPolicyHeaders,
  ContainerGetAccountInfoExceptionHeaders: () => ContainerGetAccountInfoExceptionHeaders,
  ContainerGetAccountInfoHeaders: () => ContainerGetAccountInfoHeaders,
  ContainerGetPropertiesExceptionHeaders: () => ContainerGetPropertiesExceptionHeaders,
  ContainerGetPropertiesHeaders: () => ContainerGetPropertiesHeaders,
  ContainerItem: () => ContainerItem,
  ContainerListBlobFlatSegmentExceptionHeaders: () => ContainerListBlobFlatSegmentExceptionHeaders,
  ContainerListBlobFlatSegmentHeaders: () => ContainerListBlobFlatSegmentHeaders,
  ContainerListBlobHierarchySegmentExceptionHeaders: () => ContainerListBlobHierarchySegmentExceptionHeaders,
  ContainerListBlobHierarchySegmentHeaders: () => ContainerListBlobHierarchySegmentHeaders,
  ContainerProperties: () => ContainerProperties,
  ContainerReleaseLeaseExceptionHeaders: () => ContainerReleaseLeaseExceptionHeaders,
  ContainerReleaseLeaseHeaders: () => ContainerReleaseLeaseHeaders,
  ContainerRenameExceptionHeaders: () => ContainerRenameExceptionHeaders,
  ContainerRenameHeaders: () => ContainerRenameHeaders,
  ContainerRenewLeaseExceptionHeaders: () => ContainerRenewLeaseExceptionHeaders,
  ContainerRenewLeaseHeaders: () => ContainerRenewLeaseHeaders,
  ContainerRestoreExceptionHeaders: () => ContainerRestoreExceptionHeaders,
  ContainerRestoreHeaders: () => ContainerRestoreHeaders,
  ContainerSetAccessPolicyExceptionHeaders: () => ContainerSetAccessPolicyExceptionHeaders,
  ContainerSetAccessPolicyHeaders: () => ContainerSetAccessPolicyHeaders,
  ContainerSetMetadataExceptionHeaders: () => ContainerSetMetadataExceptionHeaders,
  ContainerSetMetadataHeaders: () => ContainerSetMetadataHeaders,
  ContainerSubmitBatchExceptionHeaders: () => ContainerSubmitBatchExceptionHeaders,
  ContainerSubmitBatchHeaders: () => ContainerSubmitBatchHeaders,
  CorsRule: () => CorsRule,
  DelimitedTextConfiguration: () => DelimitedTextConfiguration,
  FilterBlobItem: () => FilterBlobItem,
  FilterBlobSegment: () => FilterBlobSegment,
  GeoReplication: () => GeoReplication,
  JsonTextConfiguration: () => JsonTextConfiguration,
  KeyInfo: () => KeyInfo,
  ListBlobsFlatSegmentResponse: () => ListBlobsFlatSegmentResponse,
  ListBlobsHierarchySegmentResponse: () => ListBlobsHierarchySegmentResponse,
  ListContainersSegmentResponse: () => ListContainersSegmentResponse,
  Logging: () => Logging,
  Metrics: () => Metrics,
  PageBlobClearPagesExceptionHeaders: () => PageBlobClearPagesExceptionHeaders,
  PageBlobClearPagesHeaders: () => PageBlobClearPagesHeaders,
  PageBlobCopyIncrementalExceptionHeaders: () => PageBlobCopyIncrementalExceptionHeaders,
  PageBlobCopyIncrementalHeaders: () => PageBlobCopyIncrementalHeaders,
  PageBlobCreateExceptionHeaders: () => PageBlobCreateExceptionHeaders,
  PageBlobCreateHeaders: () => PageBlobCreateHeaders,
  PageBlobGetPageRangesDiffExceptionHeaders: () => PageBlobGetPageRangesDiffExceptionHeaders,
  PageBlobGetPageRangesDiffHeaders: () => PageBlobGetPageRangesDiffHeaders,
  PageBlobGetPageRangesExceptionHeaders: () => PageBlobGetPageRangesExceptionHeaders,
  PageBlobGetPageRangesHeaders: () => PageBlobGetPageRangesHeaders,
  PageBlobResizeExceptionHeaders: () => PageBlobResizeExceptionHeaders,
  PageBlobResizeHeaders: () => PageBlobResizeHeaders,
  PageBlobUpdateSequenceNumberExceptionHeaders: () => PageBlobUpdateSequenceNumberExceptionHeaders,
  PageBlobUpdateSequenceNumberHeaders: () => PageBlobUpdateSequenceNumberHeaders,
  PageBlobUploadPagesExceptionHeaders: () => PageBlobUploadPagesExceptionHeaders,
  PageBlobUploadPagesFromURLExceptionHeaders: () => PageBlobUploadPagesFromURLExceptionHeaders,
  PageBlobUploadPagesFromURLHeaders: () => PageBlobUploadPagesFromURLHeaders,
  PageBlobUploadPagesHeaders: () => PageBlobUploadPagesHeaders,
  PageList: () => PageList,
  PageRange: () => PageRange,
  QueryFormat: () => QueryFormat,
  QueryRequest: () => QueryRequest,
  QuerySerialization: () => QuerySerialization,
  RetentionPolicy: () => RetentionPolicy,
  ServiceFilterBlobsExceptionHeaders: () => ServiceFilterBlobsExceptionHeaders,
  ServiceFilterBlobsHeaders: () => ServiceFilterBlobsHeaders,
  ServiceGetAccountInfoExceptionHeaders: () => ServiceGetAccountInfoExceptionHeaders,
  ServiceGetAccountInfoHeaders: () => ServiceGetAccountInfoHeaders,
  ServiceGetPropertiesExceptionHeaders: () => ServiceGetPropertiesExceptionHeaders,
  ServiceGetPropertiesHeaders: () => ServiceGetPropertiesHeaders,
  ServiceGetStatisticsExceptionHeaders: () => ServiceGetStatisticsExceptionHeaders,
  ServiceGetStatisticsHeaders: () => ServiceGetStatisticsHeaders,
  ServiceGetUserDelegationKeyExceptionHeaders: () => ServiceGetUserDelegationKeyExceptionHeaders,
  ServiceGetUserDelegationKeyHeaders: () => ServiceGetUserDelegationKeyHeaders,
  ServiceListContainersSegmentExceptionHeaders: () => ServiceListContainersSegmentExceptionHeaders,
  ServiceListContainersSegmentHeaders: () => ServiceListContainersSegmentHeaders,
  ServiceSetPropertiesExceptionHeaders: () => ServiceSetPropertiesExceptionHeaders,
  ServiceSetPropertiesHeaders: () => ServiceSetPropertiesHeaders,
  ServiceSubmitBatchExceptionHeaders: () => ServiceSubmitBatchExceptionHeaders,
  ServiceSubmitBatchHeaders: () => ServiceSubmitBatchHeaders,
  SignedIdentifier: () => SignedIdentifier,
  StaticWebsite: () => StaticWebsite,
  StorageError: () => StorageError,
  UserDelegationKey: () => UserDelegationKey
});
var BlobServiceProperties = {
  serializedName: "BlobServiceProperties",
  xmlName: "StorageServiceProperties",
  type: {
    name: "Composite",
    className: "BlobServiceProperties",
    modelProperties: {
      blobAnalyticsLogging: {
        serializedName: "Logging",
        xmlName: "Logging",
        type: {
          name: "Composite",
          className: "Logging"
        }
      },
      hourMetrics: {
        serializedName: "HourMetrics",
        xmlName: "HourMetrics",
        type: {
          name: "Composite",
          className: "Metrics"
        }
      },
      minuteMetrics: {
        serializedName: "MinuteMetrics",
        xmlName: "MinuteMetrics",
        type: {
          name: "Composite",
          className: "Metrics"
        }
      },
      cors: {
        serializedName: "Cors",
        xmlName: "Cors",
        xmlIsWrapped: true,
        xmlElementName: "CorsRule",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CorsRule"
            }
          }
        }
      },
      defaultServiceVersion: {
        serializedName: "DefaultServiceVersion",
        xmlName: "DefaultServiceVersion",
        type: {
          name: "String"
        }
      },
      deleteRetentionPolicy: {
        serializedName: "DeleteRetentionPolicy",
        xmlName: "DeleteRetentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      },
      staticWebsite: {
        serializedName: "StaticWebsite",
        xmlName: "StaticWebsite",
        type: {
          name: "Composite",
          className: "StaticWebsite"
        }
      }
    }
  }
};
var Logging = {
  serializedName: "Logging",
  type: {
    name: "Composite",
    className: "Logging",
    modelProperties: {
      version: {
        serializedName: "Version",
        required: true,
        xmlName: "Version",
        type: {
          name: "String"
        }
      },
      deleteProperty: {
        serializedName: "Delete",
        required: true,
        xmlName: "Delete",
        type: {
          name: "Boolean"
        }
      },
      read: {
        serializedName: "Read",
        required: true,
        xmlName: "Read",
        type: {
          name: "Boolean"
        }
      },
      write: {
        serializedName: "Write",
        required: true,
        xmlName: "Write",
        type: {
          name: "Boolean"
        }
      },
      retentionPolicy: {
        serializedName: "RetentionPolicy",
        xmlName: "RetentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      }
    }
  }
};
var RetentionPolicy = {
  serializedName: "RetentionPolicy",
  type: {
    name: "Composite",
    className: "RetentionPolicy",
    modelProperties: {
      enabled: {
        serializedName: "Enabled",
        required: true,
        xmlName: "Enabled",
        type: {
          name: "Boolean"
        }
      },
      days: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "Days",
        xmlName: "Days",
        type: {
          name: "Number"
        }
      }
    }
  }
};
var Metrics = {
  serializedName: "Metrics",
  type: {
    name: "Composite",
    className: "Metrics",
    modelProperties: {
      version: {
        serializedName: "Version",
        xmlName: "Version",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "Enabled",
        required: true,
        xmlName: "Enabled",
        type: {
          name: "Boolean"
        }
      },
      includeAPIs: {
        serializedName: "IncludeAPIs",
        xmlName: "IncludeAPIs",
        type: {
          name: "Boolean"
        }
      },
      retentionPolicy: {
        serializedName: "RetentionPolicy",
        xmlName: "RetentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      }
    }
  }
};
var CorsRule = {
  serializedName: "CorsRule",
  type: {
    name: "Composite",
    className: "CorsRule",
    modelProperties: {
      allowedOrigins: {
        serializedName: "AllowedOrigins",
        required: true,
        xmlName: "AllowedOrigins",
        type: {
          name: "String"
        }
      },
      allowedMethods: {
        serializedName: "AllowedMethods",
        required: true,
        xmlName: "AllowedMethods",
        type: {
          name: "String"
        }
      },
      allowedHeaders: {
        serializedName: "AllowedHeaders",
        required: true,
        xmlName: "AllowedHeaders",
        type: {
          name: "String"
        }
      },
      exposedHeaders: {
        serializedName: "ExposedHeaders",
        required: true,
        xmlName: "ExposedHeaders",
        type: {
          name: "String"
        }
      },
      maxAgeInSeconds: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "MaxAgeInSeconds",
        required: true,
        xmlName: "MaxAgeInSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};
var StaticWebsite = {
  serializedName: "StaticWebsite",
  type: {
    name: "Composite",
    className: "StaticWebsite",
    modelProperties: {
      enabled: {
        serializedName: "Enabled",
        required: true,
        xmlName: "Enabled",
        type: {
          name: "Boolean"
        }
      },
      indexDocument: {
        serializedName: "IndexDocument",
        xmlName: "IndexDocument",
        type: {
          name: "String"
        }
      },
      errorDocument404Path: {
        serializedName: "ErrorDocument404Path",
        xmlName: "ErrorDocument404Path",
        type: {
          name: "String"
        }
      },
      defaultIndexDocumentPath: {
        serializedName: "DefaultIndexDocumentPath",
        xmlName: "DefaultIndexDocumentPath",
        type: {
          name: "String"
        }
      }
    }
  }
};
var StorageError = {
  serializedName: "StorageError",
  type: {
    name: "Composite",
    className: "StorageError",
    modelProperties: {
      message: {
        serializedName: "Message",
        xmlName: "Message",
        type: {
          name: "String"
        }
      },
      code: {
        serializedName: "Code",
        xmlName: "Code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobServiceStatistics = {
  serializedName: "BlobServiceStatistics",
  xmlName: "StorageServiceStats",
  type: {
    name: "Composite",
    className: "BlobServiceStatistics",
    modelProperties: {
      geoReplication: {
        serializedName: "GeoReplication",
        xmlName: "GeoReplication",
        type: {
          name: "Composite",
          className: "GeoReplication"
        }
      }
    }
  }
};
var GeoReplication = {
  serializedName: "GeoReplication",
  type: {
    name: "Composite",
    className: "GeoReplication",
    modelProperties: {
      status: {
        serializedName: "Status",
        required: true,
        xmlName: "Status",
        type: {
          name: "Enum",
          allowedValues: ["live", "bootstrap", "unavailable"]
        }
      },
      lastSyncOn: {
        serializedName: "LastSyncTime",
        required: true,
        xmlName: "LastSyncTime",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var ListContainersSegmentResponse = {
  serializedName: "ListContainersSegmentResponse",
  xmlName: "EnumerationResults",
  type: {
    name: "Composite",
    className: "ListContainersSegmentResponse",
    modelProperties: {
      serviceEndpoint: {
        serializedName: "ServiceEndpoint",
        required: true,
        xmlName: "ServiceEndpoint",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      prefix: {
        serializedName: "Prefix",
        xmlName: "Prefix",
        type: {
          name: "String"
        }
      },
      marker: {
        serializedName: "Marker",
        xmlName: "Marker",
        type: {
          name: "String"
        }
      },
      maxPageSize: {
        serializedName: "MaxResults",
        xmlName: "MaxResults",
        type: {
          name: "Number"
        }
      },
      containerItems: {
        serializedName: "ContainerItems",
        required: true,
        xmlName: "Containers",
        xmlIsWrapped: true,
        xmlElementName: "Container",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerItem"
            }
          }
        }
      },
      continuationToken: {
        serializedName: "NextMarker",
        xmlName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerItem = {
  serializedName: "ContainerItem",
  xmlName: "Container",
  type: {
    name: "Composite",
    className: "ContainerItem",
    modelProperties: {
      name: {
        serializedName: "Name",
        required: true,
        xmlName: "Name",
        type: {
          name: "String"
        }
      },
      deleted: {
        serializedName: "Deleted",
        xmlName: "Deleted",
        type: {
          name: "Boolean"
        }
      },
      version: {
        serializedName: "Version",
        xmlName: "Version",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "Properties",
        xmlName: "Properties",
        type: {
          name: "Composite",
          className: "ContainerProperties"
        }
      },
      metadata: {
        serializedName: "Metadata",
        xmlName: "Metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};
var ContainerProperties = {
  serializedName: "ContainerProperties",
  type: {
    name: "Composite",
    className: "ContainerProperties",
    modelProperties: {
      lastModified: {
        serializedName: "Last-Modified",
        required: true,
        xmlName: "Last-Modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "Etag",
        required: true,
        xmlName: "Etag",
        type: {
          name: "String"
        }
      },
      leaseStatus: {
        serializedName: "LeaseStatus",
        xmlName: "LeaseStatus",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      leaseState: {
        serializedName: "LeaseState",
        xmlName: "LeaseState",
        type: {
          name: "Enum",
          allowedValues: [
            "available",
            "leased",
            "expired",
            "breaking",
            "broken"
          ]
        }
      },
      leaseDuration: {
        serializedName: "LeaseDuration",
        xmlName: "LeaseDuration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      publicAccess: {
        serializedName: "PublicAccess",
        xmlName: "PublicAccess",
        type: {
          name: "Enum",
          allowedValues: ["container", "blob"]
        }
      },
      hasImmutabilityPolicy: {
        serializedName: "HasImmutabilityPolicy",
        xmlName: "HasImmutabilityPolicy",
        type: {
          name: "Boolean"
        }
      },
      hasLegalHold: {
        serializedName: "HasLegalHold",
        xmlName: "HasLegalHold",
        type: {
          name: "Boolean"
        }
      },
      defaultEncryptionScope: {
        serializedName: "DefaultEncryptionScope",
        xmlName: "DefaultEncryptionScope",
        type: {
          name: "String"
        }
      },
      preventEncryptionScopeOverride: {
        serializedName: "DenyEncryptionScopeOverride",
        xmlName: "DenyEncryptionScopeOverride",
        type: {
          name: "Boolean"
        }
      },
      deletedOn: {
        serializedName: "DeletedTime",
        xmlName: "DeletedTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      remainingRetentionDays: {
        serializedName: "RemainingRetentionDays",
        xmlName: "RemainingRetentionDays",
        type: {
          name: "Number"
        }
      },
      isImmutableStorageWithVersioningEnabled: {
        serializedName: "ImmutableStorageWithVersioningEnabled",
        xmlName: "ImmutableStorageWithVersioningEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
var KeyInfo = {
  serializedName: "KeyInfo",
  type: {
    name: "Composite",
    className: "KeyInfo",
    modelProperties: {
      startsOn: {
        serializedName: "Start",
        required: true,
        xmlName: "Start",
        type: {
          name: "String"
        }
      },
      expiresOn: {
        serializedName: "Expiry",
        required: true,
        xmlName: "Expiry",
        type: {
          name: "String"
        }
      }
    }
  }
};
var UserDelegationKey = {
  serializedName: "UserDelegationKey",
  type: {
    name: "Composite",
    className: "UserDelegationKey",
    modelProperties: {
      signedObjectId: {
        serializedName: "SignedOid",
        required: true,
        xmlName: "SignedOid",
        type: {
          name: "String"
        }
      },
      signedTenantId: {
        serializedName: "SignedTid",
        required: true,
        xmlName: "SignedTid",
        type: {
          name: "String"
        }
      },
      signedStartsOn: {
        serializedName: "SignedStart",
        required: true,
        xmlName: "SignedStart",
        type: {
          name: "String"
        }
      },
      signedExpiresOn: {
        serializedName: "SignedExpiry",
        required: true,
        xmlName: "SignedExpiry",
        type: {
          name: "String"
        }
      },
      signedService: {
        serializedName: "SignedService",
        required: true,
        xmlName: "SignedService",
        type: {
          name: "String"
        }
      },
      signedVersion: {
        serializedName: "SignedVersion",
        required: true,
        xmlName: "SignedVersion",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "Value",
        required: true,
        xmlName: "Value",
        type: {
          name: "String"
        }
      }
    }
  }
};
var FilterBlobSegment = {
  serializedName: "FilterBlobSegment",
  xmlName: "EnumerationResults",
  type: {
    name: "Composite",
    className: "FilterBlobSegment",
    modelProperties: {
      serviceEndpoint: {
        serializedName: "ServiceEndpoint",
        required: true,
        xmlName: "ServiceEndpoint",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      where: {
        serializedName: "Where",
        required: true,
        xmlName: "Where",
        type: {
          name: "String"
        }
      },
      blobs: {
        serializedName: "Blobs",
        required: true,
        xmlName: "Blobs",
        xmlIsWrapped: true,
        xmlElementName: "Blob",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FilterBlobItem"
            }
          }
        }
      },
      continuationToken: {
        serializedName: "NextMarker",
        xmlName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
var FilterBlobItem = {
  serializedName: "FilterBlobItem",
  xmlName: "Blob",
  type: {
    name: "Composite",
    className: "FilterBlobItem",
    modelProperties: {
      name: {
        serializedName: "Name",
        required: true,
        xmlName: "Name",
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "ContainerName",
        required: true,
        xmlName: "ContainerName",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "Tags",
        xmlName: "Tags",
        type: {
          name: "Composite",
          className: "BlobTags"
        }
      }
    }
  }
};
var BlobTags = {
  serializedName: "BlobTags",
  xmlName: "Tags",
  type: {
    name: "Composite",
    className: "BlobTags",
    modelProperties: {
      blobTagSet: {
        serializedName: "BlobTagSet",
        required: true,
        xmlName: "TagSet",
        xmlIsWrapped: true,
        xmlElementName: "Tag",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobTag"
            }
          }
        }
      }
    }
  }
};
var BlobTag = {
  serializedName: "BlobTag",
  xmlName: "Tag",
  type: {
    name: "Composite",
    className: "BlobTag",
    modelProperties: {
      key: {
        serializedName: "Key",
        required: true,
        xmlName: "Key",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "Value",
        required: true,
        xmlName: "Value",
        type: {
          name: "String"
        }
      }
    }
  }
};
var SignedIdentifier = {
  serializedName: "SignedIdentifier",
  xmlName: "SignedIdentifier",
  type: {
    name: "Composite",
    className: "SignedIdentifier",
    modelProperties: {
      id: {
        serializedName: "Id",
        required: true,
        xmlName: "Id",
        type: {
          name: "String"
        }
      },
      accessPolicy: {
        serializedName: "AccessPolicy",
        xmlName: "AccessPolicy",
        type: {
          name: "Composite",
          className: "AccessPolicy"
        }
      }
    }
  }
};
var AccessPolicy = {
  serializedName: "AccessPolicy",
  type: {
    name: "Composite",
    className: "AccessPolicy",
    modelProperties: {
      startsOn: {
        serializedName: "Start",
        xmlName: "Start",
        type: {
          name: "String"
        }
      },
      expiresOn: {
        serializedName: "Expiry",
        xmlName: "Expiry",
        type: {
          name: "String"
        }
      },
      permissions: {
        serializedName: "Permission",
        xmlName: "Permission",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ListBlobsFlatSegmentResponse = {
  serializedName: "ListBlobsFlatSegmentResponse",
  xmlName: "EnumerationResults",
  type: {
    name: "Composite",
    className: "ListBlobsFlatSegmentResponse",
    modelProperties: {
      serviceEndpoint: {
        serializedName: "ServiceEndpoint",
        required: true,
        xmlName: "ServiceEndpoint",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "ContainerName",
        required: true,
        xmlName: "ContainerName",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      prefix: {
        serializedName: "Prefix",
        xmlName: "Prefix",
        type: {
          name: "String"
        }
      },
      marker: {
        serializedName: "Marker",
        xmlName: "Marker",
        type: {
          name: "String"
        }
      },
      maxPageSize: {
        serializedName: "MaxResults",
        xmlName: "MaxResults",
        type: {
          name: "Number"
        }
      },
      segment: {
        serializedName: "Segment",
        xmlName: "Blobs",
        type: {
          name: "Composite",
          className: "BlobFlatListSegment"
        }
      },
      continuationToken: {
        serializedName: "NextMarker",
        xmlName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobFlatListSegment = {
  serializedName: "BlobFlatListSegment",
  xmlName: "Blobs",
  type: {
    name: "Composite",
    className: "BlobFlatListSegment",
    modelProperties: {
      blobItems: {
        serializedName: "BlobItems",
        required: true,
        xmlName: "BlobItems",
        xmlElementName: "Blob",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobItemInternal"
            }
          }
        }
      }
    }
  }
};
var BlobItemInternal = {
  serializedName: "BlobItemInternal",
  xmlName: "Blob",
  type: {
    name: "Composite",
    className: "BlobItemInternal",
    modelProperties: {
      name: {
        serializedName: "Name",
        xmlName: "Name",
        type: {
          name: "Composite",
          className: "BlobName"
        }
      },
      deleted: {
        serializedName: "Deleted",
        required: true,
        xmlName: "Deleted",
        type: {
          name: "Boolean"
        }
      },
      snapshot: {
        serializedName: "Snapshot",
        required: true,
        xmlName: "Snapshot",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "VersionId",
        xmlName: "VersionId",
        type: {
          name: "String"
        }
      },
      isCurrentVersion: {
        serializedName: "IsCurrentVersion",
        xmlName: "IsCurrentVersion",
        type: {
          name: "Boolean"
        }
      },
      properties: {
        serializedName: "Properties",
        xmlName: "Properties",
        type: {
          name: "Composite",
          className: "BlobPropertiesInternal"
        }
      },
      metadata: {
        serializedName: "Metadata",
        xmlName: "Metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      blobTags: {
        serializedName: "BlobTags",
        xmlName: "Tags",
        type: {
          name: "Composite",
          className: "BlobTags"
        }
      },
      objectReplicationMetadata: {
        serializedName: "ObjectReplicationMetadata",
        xmlName: "OrMetadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      hasVersionsOnly: {
        serializedName: "HasVersionsOnly",
        xmlName: "HasVersionsOnly",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
var BlobName = {
  serializedName: "BlobName",
  type: {
    name: "Composite",
    className: "BlobName",
    modelProperties: {
      encoded: {
        serializedName: "Encoded",
        xmlName: "Encoded",
        xmlIsAttribute: true,
        type: {
          name: "Boolean"
        }
      },
      content: {
        serializedName: "content",
        xmlName: "content",
        xmlIsMsText: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobPropertiesInternal = {
  serializedName: "BlobPropertiesInternal",
  xmlName: "Properties",
  type: {
    name: "Composite",
    className: "BlobPropertiesInternal",
    modelProperties: {
      createdOn: {
        serializedName: "Creation-Time",
        xmlName: "Creation-Time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      lastModified: {
        serializedName: "Last-Modified",
        required: true,
        xmlName: "Last-Modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "Etag",
        required: true,
        xmlName: "Etag",
        type: {
          name: "String"
        }
      },
      contentLength: {
        serializedName: "Content-Length",
        xmlName: "Content-Length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "Content-Type",
        xmlName: "Content-Type",
        type: {
          name: "String"
        }
      },
      contentEncoding: {
        serializedName: "Content-Encoding",
        xmlName: "Content-Encoding",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "Content-Language",
        xmlName: "Content-Language",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "Content-MD5",
        xmlName: "Content-MD5",
        type: {
          name: "ByteArray"
        }
      },
      contentDisposition: {
        serializedName: "Content-Disposition",
        xmlName: "Content-Disposition",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "Cache-Control",
        xmlName: "Cache-Control",
        type: {
          name: "String"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      blobType: {
        serializedName: "BlobType",
        xmlName: "BlobType",
        type: {
          name: "Enum",
          allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
        }
      },
      leaseStatus: {
        serializedName: "LeaseStatus",
        xmlName: "LeaseStatus",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      leaseState: {
        serializedName: "LeaseState",
        xmlName: "LeaseState",
        type: {
          name: "Enum",
          allowedValues: [
            "available",
            "leased",
            "expired",
            "breaking",
            "broken"
          ]
        }
      },
      leaseDuration: {
        serializedName: "LeaseDuration",
        xmlName: "LeaseDuration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      copyId: {
        serializedName: "CopyId",
        xmlName: "CopyId",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "CopyStatus",
        xmlName: "CopyStatus",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      copySource: {
        serializedName: "CopySource",
        xmlName: "CopySource",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        serializedName: "CopyProgress",
        xmlName: "CopyProgress",
        type: {
          name: "String"
        }
      },
      copyCompletedOn: {
        serializedName: "CopyCompletionTime",
        xmlName: "CopyCompletionTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        serializedName: "CopyStatusDescription",
        xmlName: "CopyStatusDescription",
        type: {
          name: "String"
        }
      },
      serverEncrypted: {
        serializedName: "ServerEncrypted",
        xmlName: "ServerEncrypted",
        type: {
          name: "Boolean"
        }
      },
      incrementalCopy: {
        serializedName: "IncrementalCopy",
        xmlName: "IncrementalCopy",
        type: {
          name: "Boolean"
        }
      },
      destinationSnapshot: {
        serializedName: "DestinationSnapshot",
        xmlName: "DestinationSnapshot",
        type: {
          name: "String"
        }
      },
      deletedOn: {
        serializedName: "DeletedTime",
        xmlName: "DeletedTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      remainingRetentionDays: {
        serializedName: "RemainingRetentionDays",
        xmlName: "RemainingRetentionDays",
        type: {
          name: "Number"
        }
      },
      accessTier: {
        serializedName: "AccessTier",
        xmlName: "AccessTier",
        type: {
          name: "Enum",
          allowedValues: [
            "P4",
            "P6",
            "P10",
            "P15",
            "P20",
            "P30",
            "P40",
            "P50",
            "P60",
            "P70",
            "P80",
            "Hot",
            "Cool",
            "Archive",
            "Cold"
          ]
        }
      },
      accessTierInferred: {
        serializedName: "AccessTierInferred",
        xmlName: "AccessTierInferred",
        type: {
          name: "Boolean"
        }
      },
      archiveStatus: {
        serializedName: "ArchiveStatus",
        xmlName: "ArchiveStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "rehydrate-pending-to-hot",
            "rehydrate-pending-to-cool",
            "rehydrate-pending-to-cold"
          ]
        }
      },
      customerProvidedKeySha256: {
        serializedName: "CustomerProvidedKeySha256",
        xmlName: "CustomerProvidedKeySha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "EncryptionScope",
        xmlName: "EncryptionScope",
        type: {
          name: "String"
        }
      },
      accessTierChangedOn: {
        serializedName: "AccessTierChangeTime",
        xmlName: "AccessTierChangeTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      tagCount: {
        serializedName: "TagCount",
        xmlName: "TagCount",
        type: {
          name: "Number"
        }
      },
      expiresOn: {
        serializedName: "Expiry-Time",
        xmlName: "Expiry-Time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isSealed: {
        serializedName: "Sealed",
        xmlName: "Sealed",
        type: {
          name: "Boolean"
        }
      },
      rehydratePriority: {
        serializedName: "RehydratePriority",
        xmlName: "RehydratePriority",
        type: {
          name: "Enum",
          allowedValues: ["High", "Standard"]
        }
      },
      lastAccessedOn: {
        serializedName: "LastAccessTime",
        xmlName: "LastAccessTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyExpiresOn: {
        serializedName: "ImmutabilityPolicyUntilDate",
        xmlName: "ImmutabilityPolicyUntilDate",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyMode: {
        serializedName: "ImmutabilityPolicyMode",
        xmlName: "ImmutabilityPolicyMode",
        type: {
          name: "Enum",
          allowedValues: ["Mutable", "Unlocked", "Locked"]
        }
      },
      legalHold: {
        serializedName: "LegalHold",
        xmlName: "LegalHold",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
var ListBlobsHierarchySegmentResponse = {
  serializedName: "ListBlobsHierarchySegmentResponse",
  xmlName: "EnumerationResults",
  type: {
    name: "Composite",
    className: "ListBlobsHierarchySegmentResponse",
    modelProperties: {
      serviceEndpoint: {
        serializedName: "ServiceEndpoint",
        required: true,
        xmlName: "ServiceEndpoint",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "ContainerName",
        required: true,
        xmlName: "ContainerName",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      prefix: {
        serializedName: "Prefix",
        xmlName: "Prefix",
        type: {
          name: "String"
        }
      },
      marker: {
        serializedName: "Marker",
        xmlName: "Marker",
        type: {
          name: "String"
        }
      },
      maxPageSize: {
        serializedName: "MaxResults",
        xmlName: "MaxResults",
        type: {
          name: "Number"
        }
      },
      delimiter: {
        serializedName: "Delimiter",
        xmlName: "Delimiter",
        type: {
          name: "String"
        }
      },
      segment: {
        serializedName: "Segment",
        xmlName: "Blobs",
        type: {
          name: "Composite",
          className: "BlobHierarchyListSegment"
        }
      },
      continuationToken: {
        serializedName: "NextMarker",
        xmlName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobHierarchyListSegment = {
  serializedName: "BlobHierarchyListSegment",
  xmlName: "Blobs",
  type: {
    name: "Composite",
    className: "BlobHierarchyListSegment",
    modelProperties: {
      blobPrefixes: {
        serializedName: "BlobPrefixes",
        xmlName: "BlobPrefixes",
        xmlElementName: "BlobPrefix",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobPrefix"
            }
          }
        }
      },
      blobItems: {
        serializedName: "BlobItems",
        required: true,
        xmlName: "BlobItems",
        xmlElementName: "Blob",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobItemInternal"
            }
          }
        }
      }
    }
  }
};
var BlobPrefix = {
  serializedName: "BlobPrefix",
  type: {
    name: "Composite",
    className: "BlobPrefix",
    modelProperties: {
      name: {
        serializedName: "Name",
        xmlName: "Name",
        type: {
          name: "Composite",
          className: "BlobName"
        }
      }
    }
  }
};
var BlockLookupList = {
  serializedName: "BlockLookupList",
  xmlName: "BlockList",
  type: {
    name: "Composite",
    className: "BlockLookupList",
    modelProperties: {
      committed: {
        serializedName: "Committed",
        xmlName: "Committed",
        xmlElementName: "Committed",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      uncommitted: {
        serializedName: "Uncommitted",
        xmlName: "Uncommitted",
        xmlElementName: "Uncommitted",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      latest: {
        serializedName: "Latest",
        xmlName: "Latest",
        xmlElementName: "Latest",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};
var BlockList = {
  serializedName: "BlockList",
  type: {
    name: "Composite",
    className: "BlockList",
    modelProperties: {
      committedBlocks: {
        serializedName: "CommittedBlocks",
        xmlName: "CommittedBlocks",
        xmlIsWrapped: true,
        xmlElementName: "Block",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Block"
            }
          }
        }
      },
      uncommittedBlocks: {
        serializedName: "UncommittedBlocks",
        xmlName: "UncommittedBlocks",
        xmlIsWrapped: true,
        xmlElementName: "Block",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Block"
            }
          }
        }
      }
    }
  }
};
var Block = {
  serializedName: "Block",
  type: {
    name: "Composite",
    className: "Block",
    modelProperties: {
      name: {
        serializedName: "Name",
        required: true,
        xmlName: "Name",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "Size",
        required: true,
        xmlName: "Size",
        type: {
          name: "Number"
        }
      }
    }
  }
};
var PageList = {
  serializedName: "PageList",
  type: {
    name: "Composite",
    className: "PageList",
    modelProperties: {
      pageRange: {
        serializedName: "PageRange",
        xmlName: "PageRange",
        xmlElementName: "PageRange",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PageRange"
            }
          }
        }
      },
      clearRange: {
        serializedName: "ClearRange",
        xmlName: "ClearRange",
        xmlElementName: "ClearRange",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClearRange"
            }
          }
        }
      },
      continuationToken: {
        serializedName: "NextMarker",
        xmlName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageRange = {
  serializedName: "PageRange",
  xmlName: "PageRange",
  type: {
    name: "Composite",
    className: "PageRange",
    modelProperties: {
      start: {
        serializedName: "Start",
        required: true,
        xmlName: "Start",
        type: {
          name: "Number"
        }
      },
      end: {
        serializedName: "End",
        required: true,
        xmlName: "End",
        type: {
          name: "Number"
        }
      }
    }
  }
};
var ClearRange = {
  serializedName: "ClearRange",
  xmlName: "ClearRange",
  type: {
    name: "Composite",
    className: "ClearRange",
    modelProperties: {
      start: {
        serializedName: "Start",
        required: true,
        xmlName: "Start",
        type: {
          name: "Number"
        }
      },
      end: {
        serializedName: "End",
        required: true,
        xmlName: "End",
        type: {
          name: "Number"
        }
      }
    }
  }
};
var QueryRequest = {
  serializedName: "QueryRequest",
  xmlName: "QueryRequest",
  type: {
    name: "Composite",
    className: "QueryRequest",
    modelProperties: {
      queryType: {
        serializedName: "QueryType",
        required: true,
        xmlName: "QueryType",
        type: {
          name: "String"
        }
      },
      expression: {
        serializedName: "Expression",
        required: true,
        xmlName: "Expression",
        type: {
          name: "String"
        }
      },
      inputSerialization: {
        serializedName: "InputSerialization",
        xmlName: "InputSerialization",
        type: {
          name: "Composite",
          className: "QuerySerialization"
        }
      },
      outputSerialization: {
        serializedName: "OutputSerialization",
        xmlName: "OutputSerialization",
        type: {
          name: "Composite",
          className: "QuerySerialization"
        }
      }
    }
  }
};
var QuerySerialization = {
  serializedName: "QuerySerialization",
  type: {
    name: "Composite",
    className: "QuerySerialization",
    modelProperties: {
      format: {
        serializedName: "Format",
        xmlName: "Format",
        type: {
          name: "Composite",
          className: "QueryFormat"
        }
      }
    }
  }
};
var QueryFormat = {
  serializedName: "QueryFormat",
  type: {
    name: "Composite",
    className: "QueryFormat",
    modelProperties: {
      type: {
        serializedName: "Type",
        required: true,
        xmlName: "Type",
        type: {
          name: "Enum",
          allowedValues: ["delimited", "json", "arrow", "parquet"]
        }
      },
      delimitedTextConfiguration: {
        serializedName: "DelimitedTextConfiguration",
        xmlName: "DelimitedTextConfiguration",
        type: {
          name: "Composite",
          className: "DelimitedTextConfiguration"
        }
      },
      jsonTextConfiguration: {
        serializedName: "JsonTextConfiguration",
        xmlName: "JsonTextConfiguration",
        type: {
          name: "Composite",
          className: "JsonTextConfiguration"
        }
      },
      arrowConfiguration: {
        serializedName: "ArrowConfiguration",
        xmlName: "ArrowConfiguration",
        type: {
          name: "Composite",
          className: "ArrowConfiguration"
        }
      },
      parquetTextConfiguration: {
        serializedName: "ParquetTextConfiguration",
        xmlName: "ParquetTextConfiguration",
        type: {
          name: "any"
        }
      }
    }
  }
};
var DelimitedTextConfiguration = {
  serializedName: "DelimitedTextConfiguration",
  xmlName: "DelimitedTextConfiguration",
  type: {
    name: "Composite",
    className: "DelimitedTextConfiguration",
    modelProperties: {
      columnSeparator: {
        serializedName: "ColumnSeparator",
        xmlName: "ColumnSeparator",
        type: {
          name: "String"
        }
      },
      fieldQuote: {
        serializedName: "FieldQuote",
        xmlName: "FieldQuote",
        type: {
          name: "String"
        }
      },
      recordSeparator: {
        serializedName: "RecordSeparator",
        xmlName: "RecordSeparator",
        type: {
          name: "String"
        }
      },
      escapeChar: {
        serializedName: "EscapeChar",
        xmlName: "EscapeChar",
        type: {
          name: "String"
        }
      },
      headersPresent: {
        serializedName: "HeadersPresent",
        xmlName: "HasHeaders",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
var JsonTextConfiguration = {
  serializedName: "JsonTextConfiguration",
  xmlName: "JsonTextConfiguration",
  type: {
    name: "Composite",
    className: "JsonTextConfiguration",
    modelProperties: {
      recordSeparator: {
        serializedName: "RecordSeparator",
        xmlName: "RecordSeparator",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ArrowConfiguration = {
  serializedName: "ArrowConfiguration",
  xmlName: "ArrowConfiguration",
  type: {
    name: "Composite",
    className: "ArrowConfiguration",
    modelProperties: {
      schema: {
        serializedName: "Schema",
        required: true,
        xmlName: "Schema",
        xmlIsWrapped: true,
        xmlElementName: "Field",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ArrowField"
            }
          }
        }
      }
    }
  }
};
var ArrowField = {
  serializedName: "ArrowField",
  xmlName: "Field",
  type: {
    name: "Composite",
    className: "ArrowField",
    modelProperties: {
      type: {
        serializedName: "Type",
        required: true,
        xmlName: "Type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "Name",
        xmlName: "Name",
        type: {
          name: "String"
        }
      },
      precision: {
        serializedName: "Precision",
        xmlName: "Precision",
        type: {
          name: "Number"
        }
      },
      scale: {
        serializedName: "Scale",
        xmlName: "Scale",
        type: {
          name: "Number"
        }
      }
    }
  }
};
var ServiceSetPropertiesHeaders = {
  serializedName: "Service_setPropertiesHeaders",
  type: {
    name: "Composite",
    className: "ServiceSetPropertiesHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceSetPropertiesExceptionHeaders = {
  serializedName: "Service_setPropertiesExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceSetPropertiesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceGetPropertiesHeaders = {
  serializedName: "Service_getPropertiesHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetPropertiesHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceGetPropertiesExceptionHeaders = {
  serializedName: "Service_getPropertiesExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetPropertiesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceGetStatisticsHeaders = {
  serializedName: "Service_getStatisticsHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetStatisticsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceGetStatisticsExceptionHeaders = {
  serializedName: "Service_getStatisticsExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetStatisticsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceListContainersSegmentHeaders = {
  serializedName: "Service_listContainersSegmentHeaders",
  type: {
    name: "Composite",
    className: "ServiceListContainersSegmentHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceListContainersSegmentExceptionHeaders = {
  serializedName: "Service_listContainersSegmentExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceListContainersSegmentExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceGetUserDelegationKeyHeaders = {
  serializedName: "Service_getUserDelegationKeyHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetUserDelegationKeyHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceGetUserDelegationKeyExceptionHeaders = {
  serializedName: "Service_getUserDelegationKeyExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetUserDelegationKeyExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceGetAccountInfoHeaders = {
  serializedName: "Service_getAccountInfoHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetAccountInfoHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      skuName: {
        serializedName: "x-ms-sku-name",
        xmlName: "x-ms-sku-name",
        type: {
          name: "Enum",
          allowedValues: [
            "Standard_LRS",
            "Standard_GRS",
            "Standard_RAGRS",
            "Standard_ZRS",
            "Premium_LRS"
          ]
        }
      },
      accountKind: {
        serializedName: "x-ms-account-kind",
        xmlName: "x-ms-account-kind",
        type: {
          name: "Enum",
          allowedValues: [
            "Storage",
            "BlobStorage",
            "StorageV2",
            "FileStorage",
            "BlockBlobStorage"
          ]
        }
      },
      isHierarchicalNamespaceEnabled: {
        serializedName: "x-ms-is-hns-enabled",
        xmlName: "x-ms-is-hns-enabled",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceGetAccountInfoExceptionHeaders = {
  serializedName: "Service_getAccountInfoExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetAccountInfoExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceSubmitBatchHeaders = {
  serializedName: "Service_submitBatchHeaders",
  type: {
    name: "Composite",
    className: "ServiceSubmitBatchHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceSubmitBatchExceptionHeaders = {
  serializedName: "Service_submitBatchExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceSubmitBatchExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceFilterBlobsHeaders = {
  serializedName: "Service_filterBlobsHeaders",
  type: {
    name: "Composite",
    className: "ServiceFilterBlobsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceFilterBlobsExceptionHeaders = {
  serializedName: "Service_filterBlobsExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceFilterBlobsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerCreateHeaders = {
  serializedName: "Container_createHeaders",
  type: {
    name: "Composite",
    className: "ContainerCreateHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerCreateExceptionHeaders = {
  serializedName: "Container_createExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerCreateExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerGetPropertiesHeaders = {
  serializedName: "Container_getPropertiesHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetPropertiesHeaders",
    modelProperties: {
      metadata: {
        serializedName: "x-ms-meta",
        xmlName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        },
        headerCollectionPrefix: "x-ms-meta-"
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        xmlName: "x-ms-lease-duration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        xmlName: "x-ms-lease-state",
        type: {
          name: "Enum",
          allowedValues: [
            "available",
            "leased",
            "expired",
            "breaking",
            "broken"
          ]
        }
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        xmlName: "x-ms-lease-status",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobPublicAccess: {
        serializedName: "x-ms-blob-public-access",
        xmlName: "x-ms-blob-public-access",
        type: {
          name: "Enum",
          allowedValues: ["container", "blob"]
        }
      },
      hasImmutabilityPolicy: {
        serializedName: "x-ms-has-immutability-policy",
        xmlName: "x-ms-has-immutability-policy",
        type: {
          name: "Boolean"
        }
      },
      hasLegalHold: {
        serializedName: "x-ms-has-legal-hold",
        xmlName: "x-ms-has-legal-hold",
        type: {
          name: "Boolean"
        }
      },
      defaultEncryptionScope: {
        serializedName: "x-ms-default-encryption-scope",
        xmlName: "x-ms-default-encryption-scope",
        type: {
          name: "String"
        }
      },
      denyEncryptionScopeOverride: {
        serializedName: "x-ms-deny-encryption-scope-override",
        xmlName: "x-ms-deny-encryption-scope-override",
        type: {
          name: "Boolean"
        }
      },
      isImmutableStorageWithVersioningEnabled: {
        serializedName: "x-ms-immutable-storage-with-versioning-enabled",
        xmlName: "x-ms-immutable-storage-with-versioning-enabled",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerGetPropertiesExceptionHeaders = {
  serializedName: "Container_getPropertiesExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetPropertiesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerDeleteHeaders = {
  serializedName: "Container_deleteHeaders",
  type: {
    name: "Composite",
    className: "ContainerDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerDeleteExceptionHeaders = {
  serializedName: "Container_deleteExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerDeleteExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerSetMetadataHeaders = {
  serializedName: "Container_setMetadataHeaders",
  type: {
    name: "Composite",
    className: "ContainerSetMetadataHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerSetMetadataExceptionHeaders = {
  serializedName: "Container_setMetadataExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerSetMetadataExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerGetAccessPolicyHeaders = {
  serializedName: "Container_getAccessPolicyHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetAccessPolicyHeaders",
    modelProperties: {
      blobPublicAccess: {
        serializedName: "x-ms-blob-public-access",
        xmlName: "x-ms-blob-public-access",
        type: {
          name: "Enum",
          allowedValues: ["container", "blob"]
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerGetAccessPolicyExceptionHeaders = {
  serializedName: "Container_getAccessPolicyExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetAccessPolicyExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerSetAccessPolicyHeaders = {
  serializedName: "Container_setAccessPolicyHeaders",
  type: {
    name: "Composite",
    className: "ContainerSetAccessPolicyHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerSetAccessPolicyExceptionHeaders = {
  serializedName: "Container_setAccessPolicyExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerSetAccessPolicyExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerRestoreHeaders = {
  serializedName: "Container_restoreHeaders",
  type: {
    name: "Composite",
    className: "ContainerRestoreHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerRestoreExceptionHeaders = {
  serializedName: "Container_restoreExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerRestoreExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerRenameHeaders = {
  serializedName: "Container_renameHeaders",
  type: {
    name: "Composite",
    className: "ContainerRenameHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerRenameExceptionHeaders = {
  serializedName: "Container_renameExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerRenameExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerSubmitBatchHeaders = {
  serializedName: "Container_submitBatchHeaders",
  type: {
    name: "Composite",
    className: "ContainerSubmitBatchHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerSubmitBatchExceptionHeaders = {
  serializedName: "Container_submitBatchExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerSubmitBatchExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerFilterBlobsHeaders = {
  serializedName: "Container_filterBlobsHeaders",
  type: {
    name: "Composite",
    className: "ContainerFilterBlobsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var ContainerFilterBlobsExceptionHeaders = {
  serializedName: "Container_filterBlobsExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerFilterBlobsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerAcquireLeaseHeaders = {
  serializedName: "Container_acquireLeaseHeaders",
  type: {
    name: "Composite",
    className: "ContainerAcquireLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var ContainerAcquireLeaseExceptionHeaders = {
  serializedName: "Container_acquireLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerAcquireLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerReleaseLeaseHeaders = {
  serializedName: "Container_releaseLeaseHeaders",
  type: {
    name: "Composite",
    className: "ContainerReleaseLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var ContainerReleaseLeaseExceptionHeaders = {
  serializedName: "Container_releaseLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerReleaseLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerRenewLeaseHeaders = {
  serializedName: "Container_renewLeaseHeaders",
  type: {
    name: "Composite",
    className: "ContainerRenewLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var ContainerRenewLeaseExceptionHeaders = {
  serializedName: "Container_renewLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerRenewLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerBreakLeaseHeaders = {
  serializedName: "Container_breakLeaseHeaders",
  type: {
    name: "Composite",
    className: "ContainerBreakLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseTime: {
        serializedName: "x-ms-lease-time",
        xmlName: "x-ms-lease-time",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var ContainerBreakLeaseExceptionHeaders = {
  serializedName: "Container_breakLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerBreakLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerChangeLeaseHeaders = {
  serializedName: "Container_changeLeaseHeaders",
  type: {
    name: "Composite",
    className: "ContainerChangeLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var ContainerChangeLeaseExceptionHeaders = {
  serializedName: "Container_changeLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerChangeLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerListBlobFlatSegmentHeaders = {
  serializedName: "Container_listBlobFlatSegmentHeaders",
  type: {
    name: "Composite",
    className: "ContainerListBlobFlatSegmentHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerListBlobFlatSegmentExceptionHeaders = {
  serializedName: "Container_listBlobFlatSegmentExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerListBlobFlatSegmentExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerListBlobHierarchySegmentHeaders = {
  serializedName: "Container_listBlobHierarchySegmentHeaders",
  type: {
    name: "Composite",
    className: "ContainerListBlobHierarchySegmentHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerListBlobHierarchySegmentExceptionHeaders = {
  serializedName: "Container_listBlobHierarchySegmentExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerListBlobHierarchySegmentExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerGetAccountInfoHeaders = {
  serializedName: "Container_getAccountInfoHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetAccountInfoHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      skuName: {
        serializedName: "x-ms-sku-name",
        xmlName: "x-ms-sku-name",
        type: {
          name: "Enum",
          allowedValues: [
            "Standard_LRS",
            "Standard_GRS",
            "Standard_RAGRS",
            "Standard_ZRS",
            "Premium_LRS"
          ]
        }
      },
      accountKind: {
        serializedName: "x-ms-account-kind",
        xmlName: "x-ms-account-kind",
        type: {
          name: "Enum",
          allowedValues: [
            "Storage",
            "BlobStorage",
            "StorageV2",
            "FileStorage",
            "BlockBlobStorage"
          ]
        }
      }
    }
  }
};
var ContainerGetAccountInfoExceptionHeaders = {
  serializedName: "Container_getAccountInfoExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetAccountInfoExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobDownloadHeaders = {
  serializedName: "Blob_downloadHeaders",
  type: {
    name: "Composite",
    className: "BlobDownloadHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      createdOn: {
        serializedName: "x-ms-creation-time",
        xmlName: "x-ms-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      metadata: {
        serializedName: "x-ms-meta",
        xmlName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        },
        headerCollectionPrefix: "x-ms-meta-"
      },
      objectReplicationPolicyId: {
        serializedName: "x-ms-or-policy-id",
        xmlName: "x-ms-or-policy-id",
        type: {
          name: "String"
        }
      },
      objectReplicationRules: {
        serializedName: "x-ms-or",
        xmlName: "x-ms-or",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        },
        headerCollectionPrefix: "x-ms-or-"
      },
      contentLength: {
        serializedName: "content-length",
        xmlName: "content-length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      contentRange: {
        serializedName: "content-range",
        xmlName: "content-range",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      contentEncoding: {
        serializedName: "content-encoding",
        xmlName: "content-encoding",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "cache-control",
        xmlName: "cache-control",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        serializedName: "content-disposition",
        xmlName: "content-disposition",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "content-language",
        xmlName: "content-language",
        type: {
          name: "String"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      blobType: {
        serializedName: "x-ms-blob-type",
        xmlName: "x-ms-blob-type",
        type: {
          name: "Enum",
          allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
        }
      },
      copyCompletedOn: {
        serializedName: "x-ms-copy-completion-time",
        xmlName: "x-ms-copy-completion-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        serializedName: "x-ms-copy-status-description",
        xmlName: "x-ms-copy-status-description",
        type: {
          name: "String"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        serializedName: "x-ms-copy-progress",
        xmlName: "x-ms-copy-progress",
        type: {
          name: "String"
        }
      },
      copySource: {
        serializedName: "x-ms-copy-source",
        xmlName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        xmlName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        xmlName: "x-ms-lease-duration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        xmlName: "x-ms-lease-state",
        type: {
          name: "Enum",
          allowedValues: [
            "available",
            "leased",
            "expired",
            "breaking",
            "broken"
          ]
        }
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        xmlName: "x-ms-lease-status",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      isCurrentVersion: {
        serializedName: "x-ms-is-current-version",
        xmlName: "x-ms-is-current-version",
        type: {
          name: "Boolean"
        }
      },
      acceptRanges: {
        serializedName: "accept-ranges",
        xmlName: "accept-ranges",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        xmlName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-server-encrypted",
        xmlName: "x-ms-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      blobContentMD5: {
        serializedName: "x-ms-blob-content-md5",
        xmlName: "x-ms-blob-content-md5",
        type: {
          name: "ByteArray"
        }
      },
      tagCount: {
        serializedName: "x-ms-tag-count",
        xmlName: "x-ms-tag-count",
        type: {
          name: "Number"
        }
      },
      isSealed: {
        serializedName: "x-ms-blob-sealed",
        xmlName: "x-ms-blob-sealed",
        type: {
          name: "Boolean"
        }
      },
      lastAccessed: {
        serializedName: "x-ms-last-access-time",
        xmlName: "x-ms-last-access-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyExpiresOn: {
        serializedName: "x-ms-immutability-policy-until-date",
        xmlName: "x-ms-immutability-policy-until-date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyMode: {
        serializedName: "x-ms-immutability-policy-mode",
        xmlName: "x-ms-immutability-policy-mode",
        type: {
          name: "Enum",
          allowedValues: ["Mutable", "Unlocked", "Locked"]
        }
      },
      legalHold: {
        serializedName: "x-ms-legal-hold",
        xmlName: "x-ms-legal-hold",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      },
      contentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};
var BlobDownloadExceptionHeaders = {
  serializedName: "Blob_downloadExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobDownloadExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobGetPropertiesHeaders = {
  serializedName: "Blob_getPropertiesHeaders",
  type: {
    name: "Composite",
    className: "BlobGetPropertiesHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      createdOn: {
        serializedName: "x-ms-creation-time",
        xmlName: "x-ms-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      metadata: {
        serializedName: "x-ms-meta",
        xmlName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        },
        headerCollectionPrefix: "x-ms-meta-"
      },
      objectReplicationPolicyId: {
        serializedName: "x-ms-or-policy-id",
        xmlName: "x-ms-or-policy-id",
        type: {
          name: "String"
        }
      },
      objectReplicationRules: {
        serializedName: "x-ms-or",
        xmlName: "x-ms-or",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        },
        headerCollectionPrefix: "x-ms-or-"
      },
      blobType: {
        serializedName: "x-ms-blob-type",
        xmlName: "x-ms-blob-type",
        type: {
          name: "Enum",
          allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
        }
      },
      copyCompletedOn: {
        serializedName: "x-ms-copy-completion-time",
        xmlName: "x-ms-copy-completion-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        serializedName: "x-ms-copy-status-description",
        xmlName: "x-ms-copy-status-description",
        type: {
          name: "String"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        serializedName: "x-ms-copy-progress",
        xmlName: "x-ms-copy-progress",
        type: {
          name: "String"
        }
      },
      copySource: {
        serializedName: "x-ms-copy-source",
        xmlName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        xmlName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      isIncrementalCopy: {
        serializedName: "x-ms-incremental-copy",
        xmlName: "x-ms-incremental-copy",
        type: {
          name: "Boolean"
        }
      },
      destinationSnapshot: {
        serializedName: "x-ms-copy-destination-snapshot",
        xmlName: "x-ms-copy-destination-snapshot",
        type: {
          name: "String"
        }
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        xmlName: "x-ms-lease-duration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        xmlName: "x-ms-lease-state",
        type: {
          name: "Enum",
          allowedValues: [
            "available",
            "leased",
            "expired",
            "breaking",
            "broken"
          ]
        }
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        xmlName: "x-ms-lease-status",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      contentLength: {
        serializedName: "content-length",
        xmlName: "content-length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      contentEncoding: {
        serializedName: "content-encoding",
        xmlName: "content-encoding",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        serializedName: "content-disposition",
        xmlName: "content-disposition",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "content-language",
        xmlName: "content-language",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "cache-control",
        xmlName: "cache-control",
        type: {
          name: "String"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      acceptRanges: {
        serializedName: "accept-ranges",
        xmlName: "accept-ranges",
        type: {
          name: "String"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        xmlName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-server-encrypted",
        xmlName: "x-ms-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      accessTier: {
        serializedName: "x-ms-access-tier",
        xmlName: "x-ms-access-tier",
        type: {
          name: "String"
        }
      },
      accessTierInferred: {
        serializedName: "x-ms-access-tier-inferred",
        xmlName: "x-ms-access-tier-inferred",
        type: {
          name: "Boolean"
        }
      },
      archiveStatus: {
        serializedName: "x-ms-archive-status",
        xmlName: "x-ms-archive-status",
        type: {
          name: "String"
        }
      },
      accessTierChangedOn: {
        serializedName: "x-ms-access-tier-change-time",
        xmlName: "x-ms-access-tier-change-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      isCurrentVersion: {
        serializedName: "x-ms-is-current-version",
        xmlName: "x-ms-is-current-version",
        type: {
          name: "Boolean"
        }
      },
      tagCount: {
        serializedName: "x-ms-tag-count",
        xmlName: "x-ms-tag-count",
        type: {
          name: "Number"
        }
      },
      expiresOn: {
        serializedName: "x-ms-expiry-time",
        xmlName: "x-ms-expiry-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isSealed: {
        serializedName: "x-ms-blob-sealed",
        xmlName: "x-ms-blob-sealed",
        type: {
          name: "Boolean"
        }
      },
      rehydratePriority: {
        serializedName: "x-ms-rehydrate-priority",
        xmlName: "x-ms-rehydrate-priority",
        type: {
          name: "Enum",
          allowedValues: ["High", "Standard"]
        }
      },
      lastAccessed: {
        serializedName: "x-ms-last-access-time",
        xmlName: "x-ms-last-access-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyExpiresOn: {
        serializedName: "x-ms-immutability-policy-until-date",
        xmlName: "x-ms-immutability-policy-until-date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyMode: {
        serializedName: "x-ms-immutability-policy-mode",
        xmlName: "x-ms-immutability-policy-mode",
        type: {
          name: "Enum",
          allowedValues: ["Mutable", "Unlocked", "Locked"]
        }
      },
      legalHold: {
        serializedName: "x-ms-legal-hold",
        xmlName: "x-ms-legal-hold",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobGetPropertiesExceptionHeaders = {
  serializedName: "Blob_getPropertiesExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobGetPropertiesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobDeleteHeaders = {
  serializedName: "Blob_deleteHeaders",
  type: {
    name: "Composite",
    className: "BlobDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobDeleteExceptionHeaders = {
  serializedName: "Blob_deleteExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobDeleteExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobUndeleteHeaders = {
  serializedName: "Blob_undeleteHeaders",
  type: {
    name: "Composite",
    className: "BlobUndeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobUndeleteExceptionHeaders = {
  serializedName: "Blob_undeleteExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobUndeleteExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetExpiryHeaders = {
  serializedName: "Blob_setExpiryHeaders",
  type: {
    name: "Composite",
    className: "BlobSetExpiryHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var BlobSetExpiryExceptionHeaders = {
  serializedName: "Blob_setExpiryExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetExpiryExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetHttpHeadersHeaders = {
  serializedName: "Blob_setHttpHeadersHeaders",
  type: {
    name: "Composite",
    className: "BlobSetHttpHeadersHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetHttpHeadersExceptionHeaders = {
  serializedName: "Blob_setHttpHeadersExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetHttpHeadersExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetImmutabilityPolicyHeaders = {
  serializedName: "Blob_setImmutabilityPolicyHeaders",
  type: {
    name: "Composite",
    className: "BlobSetImmutabilityPolicyHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyExpiry: {
        serializedName: "x-ms-immutability-policy-until-date",
        xmlName: "x-ms-immutability-policy-until-date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyMode: {
        serializedName: "x-ms-immutability-policy-mode",
        xmlName: "x-ms-immutability-policy-mode",
        type: {
          name: "Enum",
          allowedValues: ["Mutable", "Unlocked", "Locked"]
        }
      }
    }
  }
};
var BlobSetImmutabilityPolicyExceptionHeaders = {
  serializedName: "Blob_setImmutabilityPolicyExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetImmutabilityPolicyExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobDeleteImmutabilityPolicyHeaders = {
  serializedName: "Blob_deleteImmutabilityPolicyHeaders",
  type: {
    name: "Composite",
    className: "BlobDeleteImmutabilityPolicyHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var BlobDeleteImmutabilityPolicyExceptionHeaders = {
  serializedName: "Blob_deleteImmutabilityPolicyExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobDeleteImmutabilityPolicyExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetLegalHoldHeaders = {
  serializedName: "Blob_setLegalHoldHeaders",
  type: {
    name: "Composite",
    className: "BlobSetLegalHoldHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      legalHold: {
        serializedName: "x-ms-legal-hold",
        xmlName: "x-ms-legal-hold",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
var BlobSetLegalHoldExceptionHeaders = {
  serializedName: "Blob_setLegalHoldExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetLegalHoldExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetMetadataHeaders = {
  serializedName: "Blob_setMetadataHeaders",
  type: {
    name: "Composite",
    className: "BlobSetMetadataHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetMetadataExceptionHeaders = {
  serializedName: "Blob_setMetadataExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetMetadataExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobAcquireLeaseHeaders = {
  serializedName: "Blob_acquireLeaseHeaders",
  type: {
    name: "Composite",
    className: "BlobAcquireLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var BlobAcquireLeaseExceptionHeaders = {
  serializedName: "Blob_acquireLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobAcquireLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobReleaseLeaseHeaders = {
  serializedName: "Blob_releaseLeaseHeaders",
  type: {
    name: "Composite",
    className: "BlobReleaseLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var BlobReleaseLeaseExceptionHeaders = {
  serializedName: "Blob_releaseLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobReleaseLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobRenewLeaseHeaders = {
  serializedName: "Blob_renewLeaseHeaders",
  type: {
    name: "Composite",
    className: "BlobRenewLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var BlobRenewLeaseExceptionHeaders = {
  serializedName: "Blob_renewLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobRenewLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobChangeLeaseHeaders = {
  serializedName: "Blob_changeLeaseHeaders",
  type: {
    name: "Composite",
    className: "BlobChangeLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var BlobChangeLeaseExceptionHeaders = {
  serializedName: "Blob_changeLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobChangeLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobBreakLeaseHeaders = {
  serializedName: "Blob_breakLeaseHeaders",
  type: {
    name: "Composite",
    className: "BlobBreakLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseTime: {
        serializedName: "x-ms-lease-time",
        xmlName: "x-ms-lease-time",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var BlobBreakLeaseExceptionHeaders = {
  serializedName: "Blob_breakLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobBreakLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobCreateSnapshotHeaders = {
  serializedName: "Blob_createSnapshotHeaders",
  type: {
    name: "Composite",
    className: "BlobCreateSnapshotHeaders",
    modelProperties: {
      snapshot: {
        serializedName: "x-ms-snapshot",
        xmlName: "x-ms-snapshot",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobCreateSnapshotExceptionHeaders = {
  serializedName: "Blob_createSnapshotExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobCreateSnapshotExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobStartCopyFromURLHeaders = {
  serializedName: "Blob_startCopyFromURLHeaders",
  type: {
    name: "Composite",
    className: "BlobStartCopyFromURLHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        xmlName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobStartCopyFromURLExceptionHeaders = {
  serializedName: "Blob_startCopyFromURLExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobStartCopyFromURLExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobCopyFromURLHeaders = {
  serializedName: "Blob_copyFromURLHeaders",
  type: {
    name: "Composite",
    className: "BlobCopyFromURLHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        defaultValue: "success",
        isConstant: true,
        serializedName: "x-ms-copy-status",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobCopyFromURLExceptionHeaders = {
  serializedName: "Blob_copyFromURLExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobCopyFromURLExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobAbortCopyFromURLHeaders = {
  serializedName: "Blob_abortCopyFromURLHeaders",
  type: {
    name: "Composite",
    className: "BlobAbortCopyFromURLHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobAbortCopyFromURLExceptionHeaders = {
  serializedName: "Blob_abortCopyFromURLExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobAbortCopyFromURLExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetTierHeaders = {
  serializedName: "Blob_setTierHeaders",
  type: {
    name: "Composite",
    className: "BlobSetTierHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetTierExceptionHeaders = {
  serializedName: "Blob_setTierExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetTierExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobGetAccountInfoHeaders = {
  serializedName: "Blob_getAccountInfoHeaders",
  type: {
    name: "Composite",
    className: "BlobGetAccountInfoHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      skuName: {
        serializedName: "x-ms-sku-name",
        xmlName: "x-ms-sku-name",
        type: {
          name: "Enum",
          allowedValues: [
            "Standard_LRS",
            "Standard_GRS",
            "Standard_RAGRS",
            "Standard_ZRS",
            "Premium_LRS"
          ]
        }
      },
      accountKind: {
        serializedName: "x-ms-account-kind",
        xmlName: "x-ms-account-kind",
        type: {
          name: "Enum",
          allowedValues: [
            "Storage",
            "BlobStorage",
            "StorageV2",
            "FileStorage",
            "BlockBlobStorage"
          ]
        }
      }
    }
  }
};
var BlobGetAccountInfoExceptionHeaders = {
  serializedName: "Blob_getAccountInfoExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobGetAccountInfoExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobQueryHeaders = {
  serializedName: "Blob_queryHeaders",
  type: {
    name: "Composite",
    className: "BlobQueryHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      metadata: {
        serializedName: "x-ms-meta",
        xmlName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      contentLength: {
        serializedName: "content-length",
        xmlName: "content-length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      contentRange: {
        serializedName: "content-range",
        xmlName: "content-range",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      contentEncoding: {
        serializedName: "content-encoding",
        xmlName: "content-encoding",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "cache-control",
        xmlName: "cache-control",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        serializedName: "content-disposition",
        xmlName: "content-disposition",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "content-language",
        xmlName: "content-language",
        type: {
          name: "String"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      blobType: {
        serializedName: "x-ms-blob-type",
        xmlName: "x-ms-blob-type",
        type: {
          name: "Enum",
          allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
        }
      },
      copyCompletionTime: {
        serializedName: "x-ms-copy-completion-time",
        xmlName: "x-ms-copy-completion-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        serializedName: "x-ms-copy-status-description",
        xmlName: "x-ms-copy-status-description",
        type: {
          name: "String"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        serializedName: "x-ms-copy-progress",
        xmlName: "x-ms-copy-progress",
        type: {
          name: "String"
        }
      },
      copySource: {
        serializedName: "x-ms-copy-source",
        xmlName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        xmlName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        xmlName: "x-ms-lease-duration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        xmlName: "x-ms-lease-state",
        type: {
          name: "Enum",
          allowedValues: [
            "available",
            "leased",
            "expired",
            "breaking",
            "broken"
          ]
        }
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        xmlName: "x-ms-lease-status",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      acceptRanges: {
        serializedName: "accept-ranges",
        xmlName: "accept-ranges",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        xmlName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-server-encrypted",
        xmlName: "x-ms-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      blobContentMD5: {
        serializedName: "x-ms-blob-content-md5",
        xmlName: "x-ms-blob-content-md5",
        type: {
          name: "ByteArray"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      },
      contentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};
var BlobQueryExceptionHeaders = {
  serializedName: "Blob_queryExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobQueryExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobGetTagsHeaders = {
  serializedName: "Blob_getTagsHeaders",
  type: {
    name: "Composite",
    className: "BlobGetTagsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobGetTagsExceptionHeaders = {
  serializedName: "Blob_getTagsExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobGetTagsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetTagsHeaders = {
  serializedName: "Blob_setTagsHeaders",
  type: {
    name: "Composite",
    className: "BlobSetTagsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetTagsExceptionHeaders = {
  serializedName: "Blob_setTagsExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetTagsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobCreateHeaders = {
  serializedName: "PageBlob_createHeaders",
  type: {
    name: "Composite",
    className: "PageBlobCreateHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobCreateExceptionHeaders = {
  serializedName: "PageBlob_createExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobCreateExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobUploadPagesHeaders = {
  serializedName: "PageBlob_uploadPagesHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUploadPagesHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobUploadPagesExceptionHeaders = {
  serializedName: "PageBlob_uploadPagesExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUploadPagesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobClearPagesHeaders = {
  serializedName: "PageBlob_clearPagesHeaders",
  type: {
    name: "Composite",
    className: "PageBlobClearPagesHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobClearPagesExceptionHeaders = {
  serializedName: "PageBlob_clearPagesExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobClearPagesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobUploadPagesFromURLHeaders = {
  serializedName: "PageBlob_uploadPagesFromURLHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUploadPagesFromURLHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobUploadPagesFromURLExceptionHeaders = {
  serializedName: "PageBlob_uploadPagesFromURLExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUploadPagesFromURLExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobGetPageRangesHeaders = {
  serializedName: "PageBlob_getPageRangesHeaders",
  type: {
    name: "Composite",
    className: "PageBlobGetPageRangesHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      blobContentLength: {
        serializedName: "x-ms-blob-content-length",
        xmlName: "x-ms-blob-content-length",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobGetPageRangesExceptionHeaders = {
  serializedName: "PageBlob_getPageRangesExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobGetPageRangesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobGetPageRangesDiffHeaders = {
  serializedName: "PageBlob_getPageRangesDiffHeaders",
  type: {
    name: "Composite",
    className: "PageBlobGetPageRangesDiffHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      blobContentLength: {
        serializedName: "x-ms-blob-content-length",
        xmlName: "x-ms-blob-content-length",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobGetPageRangesDiffExceptionHeaders = {
  serializedName: "PageBlob_getPageRangesDiffExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobGetPageRangesDiffExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobResizeHeaders = {
  serializedName: "PageBlob_resizeHeaders",
  type: {
    name: "Composite",
    className: "PageBlobResizeHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobResizeExceptionHeaders = {
  serializedName: "PageBlob_resizeExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobResizeExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobUpdateSequenceNumberHeaders = {
  serializedName: "PageBlob_updateSequenceNumberHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUpdateSequenceNumberHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobUpdateSequenceNumberExceptionHeaders = {
  serializedName: "PageBlob_updateSequenceNumberExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUpdateSequenceNumberExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobCopyIncrementalHeaders = {
  serializedName: "PageBlob_copyIncrementalHeaders",
  type: {
    name: "Composite",
    className: "PageBlobCopyIncrementalHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        xmlName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobCopyIncrementalExceptionHeaders = {
  serializedName: "PageBlob_copyIncrementalExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobCopyIncrementalExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var AppendBlobCreateHeaders = {
  serializedName: "AppendBlob_createHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobCreateHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var AppendBlobCreateExceptionHeaders = {
  serializedName: "AppendBlob_createExceptionHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobCreateExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var AppendBlobAppendBlockHeaders = {
  serializedName: "AppendBlob_appendBlockHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobAppendBlockHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobAppendOffset: {
        serializedName: "x-ms-blob-append-offset",
        xmlName: "x-ms-blob-append-offset",
        type: {
          name: "String"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        xmlName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var AppendBlobAppendBlockExceptionHeaders = {
  serializedName: "AppendBlob_appendBlockExceptionHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobAppendBlockExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var AppendBlobAppendBlockFromUrlHeaders = {
  serializedName: "AppendBlob_appendBlockFromUrlHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobAppendBlockFromUrlHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobAppendOffset: {
        serializedName: "x-ms-blob-append-offset",
        xmlName: "x-ms-blob-append-offset",
        type: {
          name: "String"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        xmlName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var AppendBlobAppendBlockFromUrlExceptionHeaders = {
  serializedName: "AppendBlob_appendBlockFromUrlExceptionHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobAppendBlockFromUrlExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var AppendBlobSealHeaders = {
  serializedName: "AppendBlob_sealHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobSealHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isSealed: {
        serializedName: "x-ms-blob-sealed",
        xmlName: "x-ms-blob-sealed",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
var AppendBlobSealExceptionHeaders = {
  serializedName: "AppendBlob_sealExceptionHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobSealExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobUploadHeaders = {
  serializedName: "BlockBlob_uploadHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobUploadHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobUploadExceptionHeaders = {
  serializedName: "BlockBlob_uploadExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobUploadExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobPutBlobFromUrlHeaders = {
  serializedName: "BlockBlob_putBlobFromUrlHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobPutBlobFromUrlHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobPutBlobFromUrlExceptionHeaders = {
  serializedName: "BlockBlob_putBlobFromUrlExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobPutBlobFromUrlExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobStageBlockHeaders = {
  serializedName: "BlockBlob_stageBlockHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobStageBlockHeaders",
    modelProperties: {
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobStageBlockExceptionHeaders = {
  serializedName: "BlockBlob_stageBlockExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobStageBlockExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobStageBlockFromURLHeaders = {
  serializedName: "BlockBlob_stageBlockFromURLHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobStageBlockFromURLHeaders",
    modelProperties: {
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobStageBlockFromURLExceptionHeaders = {
  serializedName: "BlockBlob_stageBlockFromURLExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobStageBlockFromURLExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobCommitBlockListHeaders = {
  serializedName: "BlockBlob_commitBlockListHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobCommitBlockListHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobCommitBlockListExceptionHeaders = {
  serializedName: "BlockBlob_commitBlockListExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobCommitBlockListExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobGetBlockListHeaders = {
  serializedName: "BlockBlob_getBlockListHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobGetBlockListHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      blobContentLength: {
        serializedName: "x-ms-blob-content-length",
        xmlName: "x-ms-blob-content-length",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobGetBlockListExceptionHeaders = {
  serializedName: "BlockBlob_getBlockListExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobGetBlockListExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js
var contentType = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/xml",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};
var blobServiceProperties = {
  parameterPath: "blobServiceProperties",
  mapper: BlobServiceProperties
};
var accept = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/xml",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};
var url = {
  parameterPath: "url",
  mapper: {
    serializedName: "url",
    required: true,
    xmlName: "url",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
var restype = {
  parameterPath: "restype",
  mapper: {
    defaultValue: "service",
    isConstant: true,
    serializedName: "restype",
    type: {
      name: "String"
    }
  }
};
var comp = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "properties",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var timeoutInSeconds = {
  parameterPath: ["options", "timeoutInSeconds"],
  mapper: {
    constraints: {
      InclusiveMinimum: 0
    },
    serializedName: "timeout",
    xmlName: "timeout",
    type: {
      name: "Number"
    }
  }
};
var version = {
  parameterPath: "version",
  mapper: {
    defaultValue: "2023-08-03",
    isConstant: true,
    serializedName: "x-ms-version",
    type: {
      name: "String"
    }
  }
};
var requestId = {
  parameterPath: ["options", "requestId"],
  mapper: {
    serializedName: "x-ms-client-request-id",
    xmlName: "x-ms-client-request-id",
    type: {
      name: "String"
    }
  }
};
var accept1 = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/xml",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};
var comp1 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "stats",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var comp2 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "list",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var prefix = {
  parameterPath: ["options", "prefix"],
  mapper: {
    serializedName: "prefix",
    xmlName: "prefix",
    type: {
      name: "String"
    }
  }
};
var marker = {
  parameterPath: ["options", "marker"],
  mapper: {
    serializedName: "marker",
    xmlName: "marker",
    type: {
      name: "String"
    }
  }
};
var maxPageSize = {
  parameterPath: ["options", "maxPageSize"],
  mapper: {
    constraints: {
      InclusiveMinimum: 1
    },
    serializedName: "maxresults",
    xmlName: "maxresults",
    type: {
      name: "Number"
    }
  }
};
var include = {
  parameterPath: ["options", "include"],
  mapper: {
    serializedName: "include",
    xmlName: "include",
    xmlElementName: "ListContainersIncludeType",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Enum",
          allowedValues: ["metadata", "deleted", "system"]
        }
      }
    }
  },
  collectionFormat: QueryCollectionFormat.Csv
};
var keyInfo = {
  parameterPath: "keyInfo",
  mapper: KeyInfo
};
var comp3 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "userdelegationkey",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var restype1 = {
  parameterPath: "restype",
  mapper: {
    defaultValue: "account",
    isConstant: true,
    serializedName: "restype",
    type: {
      name: "String"
    }
  }
};
var body = {
  parameterPath: "body",
  mapper: {
    serializedName: "body",
    required: true,
    xmlName: "body",
    type: {
      name: "Stream"
    }
  }
};
var comp4 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "batch",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var contentLength = {
  parameterPath: "contentLength",
  mapper: {
    serializedName: "Content-Length",
    required: true,
    xmlName: "Content-Length",
    type: {
      name: "Number"
    }
  }
};
var multipartContentType = {
  parameterPath: "multipartContentType",
  mapper: {
    serializedName: "Content-Type",
    required: true,
    xmlName: "Content-Type",
    type: {
      name: "String"
    }
  }
};
var comp5 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "blobs",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var where = {
  parameterPath: ["options", "where"],
  mapper: {
    serializedName: "where",
    xmlName: "where",
    type: {
      name: "String"
    }
  }
};
var restype2 = {
  parameterPath: "restype",
  mapper: {
    defaultValue: "container",
    isConstant: true,
    serializedName: "restype",
    type: {
      name: "String"
    }
  }
};
var metadata = {
  parameterPath: ["options", "metadata"],
  mapper: {
    serializedName: "x-ms-meta",
    xmlName: "x-ms-meta",
    type: {
      name: "Dictionary",
      value: { type: { name: "String" } }
    },
    headerCollectionPrefix: "x-ms-meta-"
  }
};
var access = {
  parameterPath: ["options", "access"],
  mapper: {
    serializedName: "x-ms-blob-public-access",
    xmlName: "x-ms-blob-public-access",
    type: {
      name: "Enum",
      allowedValues: ["container", "blob"]
    }
  }
};
var defaultEncryptionScope = {
  parameterPath: [
    "options",
    "containerEncryptionScope",
    "defaultEncryptionScope"
  ],
  mapper: {
    serializedName: "x-ms-default-encryption-scope",
    xmlName: "x-ms-default-encryption-scope",
    type: {
      name: "String"
    }
  }
};
var preventEncryptionScopeOverride = {
  parameterPath: [
    "options",
    "containerEncryptionScope",
    "preventEncryptionScopeOverride"
  ],
  mapper: {
    serializedName: "x-ms-deny-encryption-scope-override",
    xmlName: "x-ms-deny-encryption-scope-override",
    type: {
      name: "Boolean"
    }
  }
};
var leaseId = {
  parameterPath: ["options", "leaseAccessConditions", "leaseId"],
  mapper: {
    serializedName: "x-ms-lease-id",
    xmlName: "x-ms-lease-id",
    type: {
      name: "String"
    }
  }
};
var ifModifiedSince = {
  parameterPath: ["options", "modifiedAccessConditions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    xmlName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
var ifUnmodifiedSince = {
  parameterPath: ["options", "modifiedAccessConditions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    xmlName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
var comp6 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "metadata",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var comp7 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "acl",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var containerAcl = {
  parameterPath: ["options", "containerAcl"],
  mapper: {
    serializedName: "containerAcl",
    xmlName: "SignedIdentifiers",
    xmlIsWrapped: true,
    xmlElementName: "SignedIdentifier",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Composite",
          className: "SignedIdentifier"
        }
      }
    }
  }
};
var comp8 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "undelete",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var deletedContainerName = {
  parameterPath: ["options", "deletedContainerName"],
  mapper: {
    serializedName: "x-ms-deleted-container-name",
    xmlName: "x-ms-deleted-container-name",
    type: {
      name: "String"
    }
  }
};
var deletedContainerVersion = {
  parameterPath: ["options", "deletedContainerVersion"],
  mapper: {
    serializedName: "x-ms-deleted-container-version",
    xmlName: "x-ms-deleted-container-version",
    type: {
      name: "String"
    }
  }
};
var comp9 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "rename",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var sourceContainerName = {
  parameterPath: "sourceContainerName",
  mapper: {
    serializedName: "x-ms-source-container-name",
    required: true,
    xmlName: "x-ms-source-container-name",
    type: {
      name: "String"
    }
  }
};
var sourceLeaseId = {
  parameterPath: ["options", "sourceLeaseId"],
  mapper: {
    serializedName: "x-ms-source-lease-id",
    xmlName: "x-ms-source-lease-id",
    type: {
      name: "String"
    }
  }
};
var comp10 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "lease",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var action = {
  parameterPath: "action",
  mapper: {
    defaultValue: "acquire",
    isConstant: true,
    serializedName: "x-ms-lease-action",
    type: {
      name: "String"
    }
  }
};
var duration = {
  parameterPath: ["options", "duration"],
  mapper: {
    serializedName: "x-ms-lease-duration",
    xmlName: "x-ms-lease-duration",
    type: {
      name: "Number"
    }
  }
};
var proposedLeaseId = {
  parameterPath: ["options", "proposedLeaseId"],
  mapper: {
    serializedName: "x-ms-proposed-lease-id",
    xmlName: "x-ms-proposed-lease-id",
    type: {
      name: "String"
    }
  }
};
var action1 = {
  parameterPath: "action",
  mapper: {
    defaultValue: "release",
    isConstant: true,
    serializedName: "x-ms-lease-action",
    type: {
      name: "String"
    }
  }
};
var leaseId1 = {
  parameterPath: "leaseId",
  mapper: {
    serializedName: "x-ms-lease-id",
    required: true,
    xmlName: "x-ms-lease-id",
    type: {
      name: "String"
    }
  }
};
var action2 = {
  parameterPath: "action",
  mapper: {
    defaultValue: "renew",
    isConstant: true,
    serializedName: "x-ms-lease-action",
    type: {
      name: "String"
    }
  }
};
var action3 = {
  parameterPath: "action",
  mapper: {
    defaultValue: "break",
    isConstant: true,
    serializedName: "x-ms-lease-action",
    type: {
      name: "String"
    }
  }
};
var breakPeriod = {
  parameterPath: ["options", "breakPeriod"],
  mapper: {
    serializedName: "x-ms-lease-break-period",
    xmlName: "x-ms-lease-break-period",
    type: {
      name: "Number"
    }
  }
};
var action4 = {
  parameterPath: "action",
  mapper: {
    defaultValue: "change",
    isConstant: true,
    serializedName: "x-ms-lease-action",
    type: {
      name: "String"
    }
  }
};
var proposedLeaseId1 = {
  parameterPath: "proposedLeaseId",
  mapper: {
    serializedName: "x-ms-proposed-lease-id",
    required: true,
    xmlName: "x-ms-proposed-lease-id",
    type: {
      name: "String"
    }
  }
};
var include1 = {
  parameterPath: ["options", "include"],
  mapper: {
    serializedName: "include",
    xmlName: "include",
    xmlElementName: "ListBlobsIncludeItem",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Enum",
          allowedValues: [
            "copy",
            "deleted",
            "metadata",
            "snapshots",
            "uncommittedblobs",
            "versions",
            "tags",
            "immutabilitypolicy",
            "legalhold",
            "deletedwithversions"
          ]
        }
      }
    }
  },
  collectionFormat: QueryCollectionFormat.Csv
};
var delimiter = {
  parameterPath: "delimiter",
  mapper: {
    serializedName: "delimiter",
    required: true,
    xmlName: "delimiter",
    type: {
      name: "String"
    }
  }
};
var snapshot = {
  parameterPath: ["options", "snapshot"],
  mapper: {
    serializedName: "snapshot",
    xmlName: "snapshot",
    type: {
      name: "String"
    }
  }
};
var versionId = {
  parameterPath: ["options", "versionId"],
  mapper: {
    serializedName: "versionid",
    xmlName: "versionid",
    type: {
      name: "String"
    }
  }
};
var range = {
  parameterPath: ["options", "range"],
  mapper: {
    serializedName: "x-ms-range",
    xmlName: "x-ms-range",
    type: {
      name: "String"
    }
  }
};
var rangeGetContentMD5 = {
  parameterPath: ["options", "rangeGetContentMD5"],
  mapper: {
    serializedName: "x-ms-range-get-content-md5",
    xmlName: "x-ms-range-get-content-md5",
    type: {
      name: "Boolean"
    }
  }
};
var rangeGetContentCRC64 = {
  parameterPath: ["options", "rangeGetContentCRC64"],
  mapper: {
    serializedName: "x-ms-range-get-content-crc64",
    xmlName: "x-ms-range-get-content-crc64",
    type: {
      name: "Boolean"
    }
  }
};
var encryptionKey = {
  parameterPath: ["options", "cpkInfo", "encryptionKey"],
  mapper: {
    serializedName: "x-ms-encryption-key",
    xmlName: "x-ms-encryption-key",
    type: {
      name: "String"
    }
  }
};
var encryptionKeySha256 = {
  parameterPath: ["options", "cpkInfo", "encryptionKeySha256"],
  mapper: {
    serializedName: "x-ms-encryption-key-sha256",
    xmlName: "x-ms-encryption-key-sha256",
    type: {
      name: "String"
    }
  }
};
var encryptionAlgorithm = {
  parameterPath: ["options", "cpkInfo", "encryptionAlgorithm"],
  mapper: {
    serializedName: "x-ms-encryption-algorithm",
    xmlName: "x-ms-encryption-algorithm",
    type: {
      name: "String"
    }
  }
};
var ifMatch = {
  parameterPath: ["options", "modifiedAccessConditions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};
var ifNoneMatch = {
  parameterPath: ["options", "modifiedAccessConditions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    xmlName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};
var ifTags = {
  parameterPath: ["options", "modifiedAccessConditions", "ifTags"],
  mapper: {
    serializedName: "x-ms-if-tags",
    xmlName: "x-ms-if-tags",
    type: {
      name: "String"
    }
  }
};
var deleteSnapshots = {
  parameterPath: ["options", "deleteSnapshots"],
  mapper: {
    serializedName: "x-ms-delete-snapshots",
    xmlName: "x-ms-delete-snapshots",
    type: {
      name: "Enum",
      allowedValues: ["include", "only"]
    }
  }
};
var blobDeleteType = {
  parameterPath: ["options", "blobDeleteType"],
  mapper: {
    serializedName: "deletetype",
    xmlName: "deletetype",
    type: {
      name: "String"
    }
  }
};
var comp11 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "expiry",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var expiryOptions = {
  parameterPath: "expiryOptions",
  mapper: {
    serializedName: "x-ms-expiry-option",
    required: true,
    xmlName: "x-ms-expiry-option",
    type: {
      name: "String"
    }
  }
};
var expiresOn = {
  parameterPath: ["options", "expiresOn"],
  mapper: {
    serializedName: "x-ms-expiry-time",
    xmlName: "x-ms-expiry-time",
    type: {
      name: "String"
    }
  }
};
var blobCacheControl = {
  parameterPath: ["options", "blobHttpHeaders", "blobCacheControl"],
  mapper: {
    serializedName: "x-ms-blob-cache-control",
    xmlName: "x-ms-blob-cache-control",
    type: {
      name: "String"
    }
  }
};
var blobContentType = {
  parameterPath: ["options", "blobHttpHeaders", "blobContentType"],
  mapper: {
    serializedName: "x-ms-blob-content-type",
    xmlName: "x-ms-blob-content-type",
    type: {
      name: "String"
    }
  }
};
var blobContentMD5 = {
  parameterPath: ["options", "blobHttpHeaders", "blobContentMD5"],
  mapper: {
    serializedName: "x-ms-blob-content-md5",
    xmlName: "x-ms-blob-content-md5",
    type: {
      name: "ByteArray"
    }
  }
};
var blobContentEncoding = {
  parameterPath: ["options", "blobHttpHeaders", "blobContentEncoding"],
  mapper: {
    serializedName: "x-ms-blob-content-encoding",
    xmlName: "x-ms-blob-content-encoding",
    type: {
      name: "String"
    }
  }
};
var blobContentLanguage = {
  parameterPath: ["options", "blobHttpHeaders", "blobContentLanguage"],
  mapper: {
    serializedName: "x-ms-blob-content-language",
    xmlName: "x-ms-blob-content-language",
    type: {
      name: "String"
    }
  }
};
var blobContentDisposition = {
  parameterPath: ["options", "blobHttpHeaders", "blobContentDisposition"],
  mapper: {
    serializedName: "x-ms-blob-content-disposition",
    xmlName: "x-ms-blob-content-disposition",
    type: {
      name: "String"
    }
  }
};
var comp12 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "immutabilityPolicies",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var immutabilityPolicyExpiry = {
  parameterPath: ["options", "immutabilityPolicyExpiry"],
  mapper: {
    serializedName: "x-ms-immutability-policy-until-date",
    xmlName: "x-ms-immutability-policy-until-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
var immutabilityPolicyMode = {
  parameterPath: ["options", "immutabilityPolicyMode"],
  mapper: {
    serializedName: "x-ms-immutability-policy-mode",
    xmlName: "x-ms-immutability-policy-mode",
    type: {
      name: "Enum",
      allowedValues: ["Mutable", "Unlocked", "Locked"]
    }
  }
};
var comp13 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "legalhold",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var legalHold = {
  parameterPath: "legalHold",
  mapper: {
    serializedName: "x-ms-legal-hold",
    required: true,
    xmlName: "x-ms-legal-hold",
    type: {
      name: "Boolean"
    }
  }
};
var encryptionScope = {
  parameterPath: ["options", "encryptionScope"],
  mapper: {
    serializedName: "x-ms-encryption-scope",
    xmlName: "x-ms-encryption-scope",
    type: {
      name: "String"
    }
  }
};
var comp14 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "snapshot",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var tier = {
  parameterPath: ["options", "tier"],
  mapper: {
    serializedName: "x-ms-access-tier",
    xmlName: "x-ms-access-tier",
    type: {
      name: "Enum",
      allowedValues: [
        "P4",
        "P6",
        "P10",
        "P15",
        "P20",
        "P30",
        "P40",
        "P50",
        "P60",
        "P70",
        "P80",
        "Hot",
        "Cool",
        "Archive",
        "Cold"
      ]
    }
  }
};
var rehydratePriority = {
  parameterPath: ["options", "rehydratePriority"],
  mapper: {
    serializedName: "x-ms-rehydrate-priority",
    xmlName: "x-ms-rehydrate-priority",
    type: {
      name: "Enum",
      allowedValues: ["High", "Standard"]
    }
  }
};
var sourceIfModifiedSince = {
  parameterPath: [
    "options",
    "sourceModifiedAccessConditions",
    "sourceIfModifiedSince"
  ],
  mapper: {
    serializedName: "x-ms-source-if-modified-since",
    xmlName: "x-ms-source-if-modified-since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
var sourceIfUnmodifiedSince = {
  parameterPath: [
    "options",
    "sourceModifiedAccessConditions",
    "sourceIfUnmodifiedSince"
  ],
  mapper: {
    serializedName: "x-ms-source-if-unmodified-since",
    xmlName: "x-ms-source-if-unmodified-since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
var sourceIfMatch = {
  parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfMatch"],
  mapper: {
    serializedName: "x-ms-source-if-match",
    xmlName: "x-ms-source-if-match",
    type: {
      name: "String"
    }
  }
};
var sourceIfNoneMatch = {
  parameterPath: [
    "options",
    "sourceModifiedAccessConditions",
    "sourceIfNoneMatch"
  ],
  mapper: {
    serializedName: "x-ms-source-if-none-match",
    xmlName: "x-ms-source-if-none-match",
    type: {
      name: "String"
    }
  }
};
var sourceIfTags = {
  parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfTags"],
  mapper: {
    serializedName: "x-ms-source-if-tags",
    xmlName: "x-ms-source-if-tags",
    type: {
      name: "String"
    }
  }
};
var copySource = {
  parameterPath: "copySource",
  mapper: {
    serializedName: "x-ms-copy-source",
    required: true,
    xmlName: "x-ms-copy-source",
    type: {
      name: "String"
    }
  }
};
var blobTagsString = {
  parameterPath: ["options", "blobTagsString"],
  mapper: {
    serializedName: "x-ms-tags",
    xmlName: "x-ms-tags",
    type: {
      name: "String"
    }
  }
};
var sealBlob = {
  parameterPath: ["options", "sealBlob"],
  mapper: {
    serializedName: "x-ms-seal-blob",
    xmlName: "x-ms-seal-blob",
    type: {
      name: "Boolean"
    }
  }
};
var legalHold1 = {
  parameterPath: ["options", "legalHold"],
  mapper: {
    serializedName: "x-ms-legal-hold",
    xmlName: "x-ms-legal-hold",
    type: {
      name: "Boolean"
    }
  }
};
var xMsRequiresSync = {
  parameterPath: "xMsRequiresSync",
  mapper: {
    defaultValue: "true",
    isConstant: true,
    serializedName: "x-ms-requires-sync",
    type: {
      name: "String"
    }
  }
};
var sourceContentMD5 = {
  parameterPath: ["options", "sourceContentMD5"],
  mapper: {
    serializedName: "x-ms-source-content-md5",
    xmlName: "x-ms-source-content-md5",
    type: {
      name: "ByteArray"
    }
  }
};
var copySourceAuthorization = {
  parameterPath: ["options", "copySourceAuthorization"],
  mapper: {
    serializedName: "x-ms-copy-source-authorization",
    xmlName: "x-ms-copy-source-authorization",
    type: {
      name: "String"
    }
  }
};
var copySourceTags = {
  parameterPath: ["options", "copySourceTags"],
  mapper: {
    serializedName: "x-ms-copy-source-tag-option",
    xmlName: "x-ms-copy-source-tag-option",
    type: {
      name: "Enum",
      allowedValues: ["REPLACE", "COPY"]
    }
  }
};
var comp15 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "copy",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var copyActionAbortConstant = {
  parameterPath: "copyActionAbortConstant",
  mapper: {
    defaultValue: "abort",
    isConstant: true,
    serializedName: "x-ms-copy-action",
    type: {
      name: "String"
    }
  }
};
var copyId = {
  parameterPath: "copyId",
  mapper: {
    serializedName: "copyid",
    required: true,
    xmlName: "copyid",
    type: {
      name: "String"
    }
  }
};
var comp16 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "tier",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var tier1 = {
  parameterPath: "tier",
  mapper: {
    serializedName: "x-ms-access-tier",
    required: true,
    xmlName: "x-ms-access-tier",
    type: {
      name: "Enum",
      allowedValues: [
        "P4",
        "P6",
        "P10",
        "P15",
        "P20",
        "P30",
        "P40",
        "P50",
        "P60",
        "P70",
        "P80",
        "Hot",
        "Cool",
        "Archive",
        "Cold"
      ]
    }
  }
};
var queryRequest = {
  parameterPath: ["options", "queryRequest"],
  mapper: QueryRequest
};
var comp17 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "query",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var comp18 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "tags",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var tags = {
  parameterPath: ["options", "tags"],
  mapper: BlobTags
};
var transactionalContentMD5 = {
  parameterPath: ["options", "transactionalContentMD5"],
  mapper: {
    serializedName: "Content-MD5",
    xmlName: "Content-MD5",
    type: {
      name: "ByteArray"
    }
  }
};
var transactionalContentCrc64 = {
  parameterPath: ["options", "transactionalContentCrc64"],
  mapper: {
    serializedName: "x-ms-content-crc64",
    xmlName: "x-ms-content-crc64",
    type: {
      name: "ByteArray"
    }
  }
};
var blobType = {
  parameterPath: "blobType",
  mapper: {
    defaultValue: "PageBlob",
    isConstant: true,
    serializedName: "x-ms-blob-type",
    type: {
      name: "String"
    }
  }
};
var blobContentLength = {
  parameterPath: "blobContentLength",
  mapper: {
    serializedName: "x-ms-blob-content-length",
    required: true,
    xmlName: "x-ms-blob-content-length",
    type: {
      name: "Number"
    }
  }
};
var blobSequenceNumber = {
  parameterPath: ["options", "blobSequenceNumber"],
  mapper: {
    serializedName: "x-ms-blob-sequence-number",
    xmlName: "x-ms-blob-sequence-number",
    type: {
      name: "Number"
    }
  }
};
var contentType1 = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/octet-stream",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};
var body1 = {
  parameterPath: "body",
  mapper: {
    serializedName: "body",
    required: true,
    xmlName: "body",
    type: {
      name: "Stream"
    }
  }
};
var accept2 = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/xml",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};
var comp19 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "page",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var pageWrite = {
  parameterPath: "pageWrite",
  mapper: {
    defaultValue: "update",
    isConstant: true,
    serializedName: "x-ms-page-write",
    type: {
      name: "String"
    }
  }
};
var ifSequenceNumberLessThanOrEqualTo = {
  parameterPath: [
    "options",
    "sequenceNumberAccessConditions",
    "ifSequenceNumberLessThanOrEqualTo"
  ],
  mapper: {
    serializedName: "x-ms-if-sequence-number-le",
    xmlName: "x-ms-if-sequence-number-le",
    type: {
      name: "Number"
    }
  }
};
var ifSequenceNumberLessThan = {
  parameterPath: [
    "options",
    "sequenceNumberAccessConditions",
    "ifSequenceNumberLessThan"
  ],
  mapper: {
    serializedName: "x-ms-if-sequence-number-lt",
    xmlName: "x-ms-if-sequence-number-lt",
    type: {
      name: "Number"
    }
  }
};
var ifSequenceNumberEqualTo = {
  parameterPath: [
    "options",
    "sequenceNumberAccessConditions",
    "ifSequenceNumberEqualTo"
  ],
  mapper: {
    serializedName: "x-ms-if-sequence-number-eq",
    xmlName: "x-ms-if-sequence-number-eq",
    type: {
      name: "Number"
    }
  }
};
var pageWrite1 = {
  parameterPath: "pageWrite",
  mapper: {
    defaultValue: "clear",
    isConstant: true,
    serializedName: "x-ms-page-write",
    type: {
      name: "String"
    }
  }
};
var sourceUrl = {
  parameterPath: "sourceUrl",
  mapper: {
    serializedName: "x-ms-copy-source",
    required: true,
    xmlName: "x-ms-copy-source",
    type: {
      name: "String"
    }
  }
};
var sourceRange = {
  parameterPath: "sourceRange",
  mapper: {
    serializedName: "x-ms-source-range",
    required: true,
    xmlName: "x-ms-source-range",
    type: {
      name: "String"
    }
  }
};
var sourceContentCrc64 = {
  parameterPath: ["options", "sourceContentCrc64"],
  mapper: {
    serializedName: "x-ms-source-content-crc64",
    xmlName: "x-ms-source-content-crc64",
    type: {
      name: "ByteArray"
    }
  }
};
var range1 = {
  parameterPath: "range",
  mapper: {
    serializedName: "x-ms-range",
    required: true,
    xmlName: "x-ms-range",
    type: {
      name: "String"
    }
  }
};
var comp20 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "pagelist",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var prevsnapshot = {
  parameterPath: ["options", "prevsnapshot"],
  mapper: {
    serializedName: "prevsnapshot",
    xmlName: "prevsnapshot",
    type: {
      name: "String"
    }
  }
};
var prevSnapshotUrl = {
  parameterPath: ["options", "prevSnapshotUrl"],
  mapper: {
    serializedName: "x-ms-previous-snapshot-url",
    xmlName: "x-ms-previous-snapshot-url",
    type: {
      name: "String"
    }
  }
};
var sequenceNumberAction = {
  parameterPath: "sequenceNumberAction",
  mapper: {
    serializedName: "x-ms-sequence-number-action",
    required: true,
    xmlName: "x-ms-sequence-number-action",
    type: {
      name: "Enum",
      allowedValues: ["max", "update", "increment"]
    }
  }
};
var comp21 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "incrementalcopy",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var blobType1 = {
  parameterPath: "blobType",
  mapper: {
    defaultValue: "AppendBlob",
    isConstant: true,
    serializedName: "x-ms-blob-type",
    type: {
      name: "String"
    }
  }
};
var comp22 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "appendblock",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var maxSize = {
  parameterPath: ["options", "appendPositionAccessConditions", "maxSize"],
  mapper: {
    serializedName: "x-ms-blob-condition-maxsize",
    xmlName: "x-ms-blob-condition-maxsize",
    type: {
      name: "Number"
    }
  }
};
var appendPosition = {
  parameterPath: [
    "options",
    "appendPositionAccessConditions",
    "appendPosition"
  ],
  mapper: {
    serializedName: "x-ms-blob-condition-appendpos",
    xmlName: "x-ms-blob-condition-appendpos",
    type: {
      name: "Number"
    }
  }
};
var sourceRange1 = {
  parameterPath: ["options", "sourceRange"],
  mapper: {
    serializedName: "x-ms-source-range",
    xmlName: "x-ms-source-range",
    type: {
      name: "String"
    }
  }
};
var comp23 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "seal",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var blobType2 = {
  parameterPath: "blobType",
  mapper: {
    defaultValue: "BlockBlob",
    isConstant: true,
    serializedName: "x-ms-blob-type",
    type: {
      name: "String"
    }
  }
};
var copySourceBlobProperties = {
  parameterPath: ["options", "copySourceBlobProperties"],
  mapper: {
    serializedName: "x-ms-copy-source-blob-properties",
    xmlName: "x-ms-copy-source-blob-properties",
    type: {
      name: "Boolean"
    }
  }
};
var comp24 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "block",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var blockId = {
  parameterPath: "blockId",
  mapper: {
    serializedName: "blockid",
    required: true,
    xmlName: "blockid",
    type: {
      name: "String"
    }
  }
};
var blocks = {
  parameterPath: "blocks",
  mapper: BlockLookupList
};
var comp25 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "blocklist",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var listType = {
  parameterPath: "listType",
  mapper: {
    defaultValue: "committed",
    serializedName: "blocklisttype",
    required: true,
    xmlName: "blocklisttype",
    type: {
      name: "Enum",
      allowedValues: ["committed", "uncommitted", "all"]
    }
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js
var Service = class {
  /**
   * Initialize a new instance of the class Service class.
   * @param client Reference to the service client
   */
  constructor(client) {
    this.client = client;
  }
  /**
   * Sets properties for a storage account's Blob service endpoint, including properties for Storage
   * Analytics and CORS (Cross-Origin Resource Sharing) rules
   * @param blobServiceProperties The StorageService properties.
   * @param options The options parameters.
   */
  setProperties(blobServiceProperties2, options) {
    const operationArguments = {
      blobServiceProperties: blobServiceProperties2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, setPropertiesOperationSpec);
  }
  /**
   * gets the properties of a storage account's Blob service, including properties for Storage Analytics
   * and CORS (Cross-Origin Resource Sharing) rules.
   * @param options The options parameters.
   */
  getProperties(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, getPropertiesOperationSpec);
  }
  /**
   * Retrieves statistics related to replication for the Blob service. It is only available on the
   * secondary location endpoint when read-access geo-redundant replication is enabled for the storage
   * account.
   * @param options The options parameters.
   */
  getStatistics(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, getStatisticsOperationSpec);
  }
  /**
   * The List Containers Segment operation returns a list of the containers under the specified account
   * @param options The options parameters.
   */
  listContainersSegment(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, listContainersSegmentOperationSpec);
  }
  /**
   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using
   * bearer token authentication.
   * @param keyInfo Key information
   * @param options The options parameters.
   */
  getUserDelegationKey(keyInfo2, options) {
    const operationArguments = {
      keyInfo: keyInfo2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, getUserDelegationKeyOperationSpec);
  }
  /**
   * Returns the sku name and account kind
   * @param options The options parameters.
   */
  getAccountInfo(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, getAccountInfoOperationSpec);
  }
  /**
   * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
   * @param contentLength The length of the request.
   * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch
   *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>
   * @param body Initial data
   * @param options The options parameters.
   */
  submitBatch(contentLength2, multipartContentType2, body2, options) {
    const operationArguments = {
      contentLength: contentLength2,
      multipartContentType: multipartContentType2,
      body: body2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, submitBatchOperationSpec);
  }
  /**
   * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a
   * given search expression.  Filter blobs searches across all containers within a storage account but
   * can be scoped within the expression to a single container.
   * @param options The options parameters.
   */
  filterBlobs(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, filterBlobsOperationSpec);
  }
};
var xmlSerializer = new Serializer(
  mappers_exports,
  /* isXml */
  true
);
var setPropertiesOperationSpec = {
  path: "/",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: ServiceSetPropertiesHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ServiceSetPropertiesExceptionHeaders
    }
  },
  requestBody: blobServiceProperties,
  queryParameters: [
    restype,
    comp,
    timeoutInSeconds
  ],
  urlParameters: [url],
  headerParameters: [
    contentType,
    accept,
    version,
    requestId
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
var getPropertiesOperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: BlobServiceProperties,
      headersMapper: ServiceGetPropertiesHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ServiceGetPropertiesExceptionHeaders
    }
  },
  queryParameters: [
    restype,
    comp,
    timeoutInSeconds
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer
};
var getStatisticsOperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: BlobServiceStatistics,
      headersMapper: ServiceGetStatisticsHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ServiceGetStatisticsExceptionHeaders
    }
  },
  queryParameters: [
    restype,
    timeoutInSeconds,
    comp1
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer
};
var listContainersSegmentOperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: ListContainersSegmentResponse,
      headersMapper: ServiceListContainersSegmentHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ServiceListContainersSegmentExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    comp2,
    prefix,
    marker,
    maxPageSize,
    include
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer
};
var getUserDelegationKeyOperationSpec = {
  path: "/",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: UserDelegationKey,
      headersMapper: ServiceGetUserDelegationKeyHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ServiceGetUserDelegationKeyExceptionHeaders
    }
  },
  requestBody: keyInfo,
  queryParameters: [
    restype,
    timeoutInSeconds,
    comp3
  ],
  urlParameters: [url],
  headerParameters: [
    contentType,
    accept,
    version,
    requestId
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
var getAccountInfoOperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      headersMapper: ServiceGetAccountInfoHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ServiceGetAccountInfoExceptionHeaders
    }
  },
  queryParameters: [comp, restype1],
  urlParameters: [url],
  headerParameters: [version, accept1],
  isXML: true,
  serializer: xmlSerializer
};
var submitBatchOperationSpec = {
  path: "/",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: ServiceSubmitBatchHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ServiceSubmitBatchExceptionHeaders
    }
  },
  requestBody: body,
  queryParameters: [timeoutInSeconds, comp4],
  urlParameters: [url],
  headerParameters: [
    contentType,
    accept,
    version,
    requestId,
    contentLength,
    multipartContentType
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
var filterBlobsOperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: FilterBlobSegment,
      headersMapper: ServiceFilterBlobsHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ServiceFilterBlobsExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    marker,
    maxPageSize,
    comp5,
    where
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js
var Container = class {
  /**
   * Initialize a new instance of the class Container class.
   * @param client Reference to the service client
   */
  constructor(client) {
    this.client = client;
  }
  /**
   * creates a new container under the specified account. If the container with the same name already
   * exists, the operation fails
   * @param options The options parameters.
   */
  create(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, createOperationSpec);
  }
  /**
   * returns all user-defined metadata and system properties for the specified container. The data
   * returned does not include the container's list of blobs
   * @param options The options parameters.
   */
  getProperties(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, getPropertiesOperationSpec2);
  }
  /**
   * operation marks the specified container for deletion. The container and any blobs contained within
   * it are later deleted during garbage collection
   * @param options The options parameters.
   */
  delete(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, deleteOperationSpec);
  }
  /**
   * operation sets one or more user-defined name-value pairs for the specified container.
   * @param options The options parameters.
   */
  setMetadata(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, setMetadataOperationSpec);
  }
  /**
   * gets the permissions for the specified container. The permissions indicate whether container data
   * may be accessed publicly.
   * @param options The options parameters.
   */
  getAccessPolicy(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, getAccessPolicyOperationSpec);
  }
  /**
   * sets the permissions for the specified container. The permissions indicate whether blobs in a
   * container may be accessed publicly.
   * @param options The options parameters.
   */
  setAccessPolicy(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, setAccessPolicyOperationSpec);
  }
  /**
   * Restores a previously-deleted container.
   * @param options The options parameters.
   */
  restore(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, restoreOperationSpec);
  }
  /**
   * Renames an existing container.
   * @param sourceContainerName Required.  Specifies the name of the container to rename.
   * @param options The options parameters.
   */
  rename(sourceContainerName2, options) {
    const operationArguments = {
      sourceContainerName: sourceContainerName2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, renameOperationSpec);
  }
  /**
   * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
   * @param contentLength The length of the request.
   * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch
   *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>
   * @param body Initial data
   * @param options The options parameters.
   */
  submitBatch(contentLength2, multipartContentType2, body2, options) {
    const operationArguments = {
      contentLength: contentLength2,
      multipartContentType: multipartContentType2,
      body: body2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, submitBatchOperationSpec2);
  }
  /**
   * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given
   * search expression.  Filter blobs searches within the given container.
   * @param options The options parameters.
   */
  filterBlobs(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, filterBlobsOperationSpec2);
  }
  /**
   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
   * be 15 to 60 seconds, or can be infinite
   * @param options The options parameters.
   */
  acquireLease(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, acquireLeaseOperationSpec);
  }
  /**
   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
   * be 15 to 60 seconds, or can be infinite
   * @param leaseId Specifies the current lease ID on the resource.
   * @param options The options parameters.
   */
  releaseLease(leaseId2, options) {
    const operationArguments = {
      leaseId: leaseId2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, releaseLeaseOperationSpec);
  }
  /**
   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
   * be 15 to 60 seconds, or can be infinite
   * @param leaseId Specifies the current lease ID on the resource.
   * @param options The options parameters.
   */
  renewLease(leaseId2, options) {
    const operationArguments = {
      leaseId: leaseId2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, renewLeaseOperationSpec);
  }
  /**
   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
   * be 15 to 60 seconds, or can be infinite
   * @param options The options parameters.
   */
  breakLease(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, breakLeaseOperationSpec);
  }
  /**
   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
   * be 15 to 60 seconds, or can be infinite
   * @param leaseId Specifies the current lease ID on the resource.
   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400
   *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor
   *                        (String) for a list of valid GUID string formats.
   * @param options The options parameters.
   */
  changeLease(leaseId2, proposedLeaseId2, options) {
    const operationArguments = {
      leaseId: leaseId2,
      proposedLeaseId: proposedLeaseId2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, changeLeaseOperationSpec);
  }
  /**
   * [Update] The List Blobs operation returns a list of the blobs under the specified container
   * @param options The options parameters.
   */
  listBlobFlatSegment(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, listBlobFlatSegmentOperationSpec);
  }
  /**
   * [Update] The List Blobs operation returns a list of the blobs under the specified container
   * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix
   *                  element in the response body that acts as a placeholder for all blobs whose names begin with the
   *                  same substring up to the appearance of the delimiter character. The delimiter may be a single
   *                  character or a string.
   * @param options The options parameters.
   */
  listBlobHierarchySegment(delimiter2, options) {
    const operationArguments = {
      delimiter: delimiter2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, listBlobHierarchySegmentOperationSpec);
  }
  /**
   * Returns the sku name and account kind
   * @param options The options parameters.
   */
  getAccountInfo(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, getAccountInfoOperationSpec2);
  }
};
var xmlSerializer2 = new Serializer(
  mappers_exports,
  /* isXml */
  true
);
var createOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: ContainerCreateHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerCreateExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, restype2],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    metadata,
    access,
    defaultEncryptionScope,
    preventEncryptionScopeOverride
  ],
  isXML: true,
  serializer: xmlSerializer2
};
var getPropertiesOperationSpec2 = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      headersMapper: ContainerGetPropertiesHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerGetPropertiesExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, restype2],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId
  ],
  isXML: true,
  serializer: xmlSerializer2
};
var deleteOperationSpec = {
  path: "/{containerName}",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: ContainerDeleteHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerDeleteExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, restype2],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince
  ],
  isXML: true,
  serializer: xmlSerializer2
};
var setMetadataOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: ContainerSetMetadataHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerSetMetadataExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp6
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    metadata,
    leaseId,
    ifModifiedSince
  ],
  isXML: true,
  serializer: xmlSerializer2
};
var getAccessPolicyOperationSpec = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SignedIdentifier" }
          }
        },
        serializedName: "SignedIdentifiers",
        xmlName: "SignedIdentifiers",
        xmlIsWrapped: true,
        xmlElementName: "SignedIdentifier"
      },
      headersMapper: ContainerGetAccessPolicyHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerGetAccessPolicyExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp7
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId
  ],
  isXML: true,
  serializer: xmlSerializer2
};
var setAccessPolicyOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: ContainerSetAccessPolicyHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerSetAccessPolicyExceptionHeaders
    }
  },
  requestBody: containerAcl,
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp7
  ],
  urlParameters: [url],
  headerParameters: [
    contentType,
    accept,
    version,
    requestId,
    access,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer2
};
var restoreOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: ContainerRestoreHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerRestoreExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp8
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    deletedContainerName,
    deletedContainerVersion
  ],
  isXML: true,
  serializer: xmlSerializer2
};
var renameOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: ContainerRenameHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerRenameExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp9
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    sourceContainerName,
    sourceLeaseId
  ],
  isXML: true,
  serializer: xmlSerializer2
};
var submitBatchOperationSpec2 = {
  path: "/{containerName}",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: ContainerSubmitBatchHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerSubmitBatchExceptionHeaders
    }
  },
  requestBody: body,
  queryParameters: [
    timeoutInSeconds,
    comp4,
    restype2
  ],
  urlParameters: [url],
  headerParameters: [
    contentType,
    accept,
    version,
    requestId,
    contentLength,
    multipartContentType
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer2
};
var filterBlobsOperationSpec2 = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: FilterBlobSegment,
      headersMapper: ContainerFilterBlobsHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerFilterBlobsExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    marker,
    maxPageSize,
    comp5,
    where,
    restype2
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer2
};
var acquireLeaseOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: ContainerAcquireLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerAcquireLeaseExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp10
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    action,
    duration,
    proposedLeaseId
  ],
  isXML: true,
  serializer: xmlSerializer2
};
var releaseLeaseOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: ContainerReleaseLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerReleaseLeaseExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp10
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    action1,
    leaseId1
  ],
  isXML: true,
  serializer: xmlSerializer2
};
var renewLeaseOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: ContainerRenewLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerRenewLeaseExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp10
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    leaseId1,
    action2
  ],
  isXML: true,
  serializer: xmlSerializer2
};
var breakLeaseOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: ContainerBreakLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerBreakLeaseExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp10
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    action3,
    breakPeriod
  ],
  isXML: true,
  serializer: xmlSerializer2
};
var changeLeaseOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: ContainerChangeLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerChangeLeaseExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp10
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    leaseId1,
    action4,
    proposedLeaseId1
  ],
  isXML: true,
  serializer: xmlSerializer2
};
var listBlobFlatSegmentOperationSpec = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: ListBlobsFlatSegmentResponse,
      headersMapper: ContainerListBlobFlatSegmentHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerListBlobFlatSegmentExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    comp2,
    prefix,
    marker,
    maxPageSize,
    restype2,
    include1
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer2
};
var listBlobHierarchySegmentOperationSpec = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: ListBlobsHierarchySegmentResponse,
      headersMapper: ContainerListBlobHierarchySegmentHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerListBlobHierarchySegmentExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    comp2,
    prefix,
    marker,
    maxPageSize,
    restype2,
    include1,
    delimiter
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer2
};
var getAccountInfoOperationSpec2 = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      headersMapper: ContainerGetAccountInfoHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerGetAccountInfoExceptionHeaders
    }
  },
  queryParameters: [comp, restype1],
  urlParameters: [url],
  headerParameters: [version, accept1],
  isXML: true,
  serializer: xmlSerializer2
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js
var Blob2 = class {
  /**
   * Initialize a new instance of the class Blob class.
   * @param client Reference to the service client
   */
  constructor(client) {
    this.client = client;
  }
  /**
   * The Download operation reads or downloads a blob from the system, including its metadata and
   * properties. You can also call Download to read a snapshot.
   * @param options The options parameters.
   */
  download(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, downloadOperationSpec);
  }
  /**
   * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system
   * properties for the blob. It does not return the content of the blob.
   * @param options The options parameters.
   */
  getProperties(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, getPropertiesOperationSpec3);
  }
  /**
   * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is
   * permanently removed from the storage account. If the storage account's soft delete feature is
   * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible
   * immediately. However, the blob service retains the blob or snapshot for the number of days specified
   * by the DeleteRetentionPolicy section of [Storage service properties]
   * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is
   * permanently removed from the storage account. Note that you continue to be charged for the
   * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the
   * "include=deleted" query parameter to discover which blobs and snapshots have been soft deleted. You
   * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a
   * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404
   * (ResourceNotFound).
   * @param options The options parameters.
   */
  delete(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, deleteOperationSpec2);
  }
  /**
   * Undelete a blob that was previously soft deleted
   * @param options The options parameters.
   */
  undelete(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, undeleteOperationSpec);
  }
  /**
   * Sets the time a blob will expire and be deleted.
   * @param expiryOptions Required. Indicates mode of the expiry time
   * @param options The options parameters.
   */
  setExpiry(expiryOptions2, options) {
    const operationArguments = {
      expiryOptions: expiryOptions2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, setExpiryOperationSpec);
  }
  /**
   * The Set HTTP Headers operation sets system properties on the blob
   * @param options The options parameters.
   */
  setHttpHeaders(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, setHttpHeadersOperationSpec);
  }
  /**
   * The Set Immutability Policy operation sets the immutability policy on the blob
   * @param options The options parameters.
   */
  setImmutabilityPolicy(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, setImmutabilityPolicyOperationSpec);
  }
  /**
   * The Delete Immutability Policy operation deletes the immutability policy on the blob
   * @param options The options parameters.
   */
  deleteImmutabilityPolicy(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, deleteImmutabilityPolicyOperationSpec);
  }
  /**
   * The Set Legal Hold operation sets a legal hold on the blob.
   * @param legalHold Specified if a legal hold should be set on the blob.
   * @param options The options parameters.
   */
  setLegalHold(legalHold2, options) {
    const operationArguments = {
      legalHold: legalHold2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, setLegalHoldOperationSpec);
  }
  /**
   * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more
   * name-value pairs
   * @param options The options parameters.
   */
  setMetadata(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, setMetadataOperationSpec2);
  }
  /**
   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
   * operations
   * @param options The options parameters.
   */
  acquireLease(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, acquireLeaseOperationSpec2);
  }
  /**
   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
   * operations
   * @param leaseId Specifies the current lease ID on the resource.
   * @param options The options parameters.
   */
  releaseLease(leaseId2, options) {
    const operationArguments = {
      leaseId: leaseId2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, releaseLeaseOperationSpec2);
  }
  /**
   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
   * operations
   * @param leaseId Specifies the current lease ID on the resource.
   * @param options The options parameters.
   */
  renewLease(leaseId2, options) {
    const operationArguments = {
      leaseId: leaseId2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, renewLeaseOperationSpec2);
  }
  /**
   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
   * operations
   * @param leaseId Specifies the current lease ID on the resource.
   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400
   *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor
   *                        (String) for a list of valid GUID string formats.
   * @param options The options parameters.
   */
  changeLease(leaseId2, proposedLeaseId2, options) {
    const operationArguments = {
      leaseId: leaseId2,
      proposedLeaseId: proposedLeaseId2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, changeLeaseOperationSpec2);
  }
  /**
   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
   * operations
   * @param options The options parameters.
   */
  breakLease(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, breakLeaseOperationSpec2);
  }
  /**
   * The Create Snapshot operation creates a read-only snapshot of a blob
   * @param options The options parameters.
   */
  createSnapshot(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, createSnapshotOperationSpec);
  }
  /**
   * The Start Copy From URL operation copies a blob or an internet resource to a new blob.
   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
   *                   access signature.
   * @param options The options parameters.
   */
  startCopyFromURL(copySource2, options) {
    const operationArguments = {
      copySource: copySource2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, startCopyFromURLOperationSpec);
  }
  /**
   * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return
   * a response until the copy is complete.
   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
   *                   access signature.
   * @param options The options parameters.
   */
  copyFromURL(copySource2, options) {
    const operationArguments = {
      copySource: copySource2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, copyFromURLOperationSpec);
  }
  /**
   * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination
   * blob with zero length and full metadata.
   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob
   *               operation.
   * @param options The options parameters.
   */
  abortCopyFromURL(copyId2, options) {
    const operationArguments = {
      copyId: copyId2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, abortCopyFromURLOperationSpec);
  }
  /**
   * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium
   * storage account and on a block blob in a blob storage account (locally redundant storage only). A
   * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block
   * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's
   * ETag.
   * @param tier Indicates the tier to be set on the blob.
   * @param options The options parameters.
   */
  setTier(tier2, options) {
    const operationArguments = {
      tier: tier2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, setTierOperationSpec);
  }
  /**
   * Returns the sku name and account kind
   * @param options The options parameters.
   */
  getAccountInfo(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, getAccountInfoOperationSpec3);
  }
  /**
   * The Query operation enables users to select/project on blob data by providing simple query
   * expressions.
   * @param options The options parameters.
   */
  query(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, queryOperationSpec);
  }
  /**
   * The Get Tags operation enables users to get the tags associated with a blob.
   * @param options The options parameters.
   */
  getTags(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, getTagsOperationSpec);
  }
  /**
   * The Set Tags operation enables users to set tags on a blob.
   * @param options The options parameters.
   */
  setTags(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, setTagsOperationSpec);
  }
};
var xmlSerializer3 = new Serializer(
  mappers_exports,
  /* isXml */
  true
);
var downloadOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: BlobDownloadHeaders
    },
    206: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: BlobDownloadHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobDownloadExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    snapshot,
    versionId
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    range,
    rangeGetContentMD5,
    rangeGetContentCRC64,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var getPropertiesOperationSpec3 = {
  path: "/{containerName}/{blob}",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: BlobGetPropertiesHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobGetPropertiesExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    snapshot,
    versionId
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var deleteOperationSpec2 = {
  path: "/{containerName}/{blob}",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: BlobDeleteHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobDeleteExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    snapshot,
    versionId,
    blobDeleteType
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    ifMatch,
    ifNoneMatch,
    ifTags,
    deleteSnapshots
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var undeleteOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobUndeleteHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobUndeleteExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp8],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var setExpiryOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobSetExpiryHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetExpiryExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp11],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    expiryOptions,
    expiresOn
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var setHttpHeadersOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobSetHttpHeadersHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetHttpHeadersExceptionHeaders
    }
  },
  queryParameters: [comp, timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    ifMatch,
    ifNoneMatch,
    ifTags,
    blobCacheControl,
    blobContentType,
    blobContentMD5,
    blobContentEncoding,
    blobContentLanguage,
    blobContentDisposition
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var setImmutabilityPolicyOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobSetImmutabilityPolicyHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetImmutabilityPolicyExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp12],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifUnmodifiedSince,
    immutabilityPolicyExpiry,
    immutabilityPolicyMode
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var deleteImmutabilityPolicyOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: BlobDeleteImmutabilityPolicyHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobDeleteImmutabilityPolicyExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp12],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var setLegalHoldOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobSetLegalHoldHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetLegalHoldExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp13],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    legalHold
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var setMetadataOperationSpec2 = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobSetMetadataHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetMetadataExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp6],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    encryptionScope
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var acquireLeaseOperationSpec2 = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: BlobAcquireLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobAcquireLeaseExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp10],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    action,
    duration,
    proposedLeaseId,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var releaseLeaseOperationSpec2 = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobReleaseLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobReleaseLeaseExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp10],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    action1,
    leaseId1,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var renewLeaseOperationSpec2 = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobRenewLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobRenewLeaseExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp10],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    leaseId1,
    action2,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var changeLeaseOperationSpec2 = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobChangeLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobChangeLeaseExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp10],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    leaseId1,
    action4,
    proposedLeaseId1,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var breakLeaseOperationSpec2 = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: BlobBreakLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobBreakLeaseExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp10],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    action3,
    breakPeriod,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var createSnapshotOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: BlobCreateSnapshotHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobCreateSnapshotExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp14],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    encryptionScope
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var startCopyFromURLOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: BlobStartCopyFromURLHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobStartCopyFromURLExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    ifMatch,
    ifNoneMatch,
    ifTags,
    immutabilityPolicyExpiry,
    immutabilityPolicyMode,
    tier,
    rehydratePriority,
    sourceIfModifiedSince,
    sourceIfUnmodifiedSince,
    sourceIfMatch,
    sourceIfNoneMatch,
    sourceIfTags,
    copySource,
    blobTagsString,
    sealBlob,
    legalHold1
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var copyFromURLOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: BlobCopyFromURLHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobCopyFromURLExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    ifMatch,
    ifNoneMatch,
    ifTags,
    immutabilityPolicyExpiry,
    immutabilityPolicyMode,
    encryptionScope,
    tier,
    sourceIfModifiedSince,
    sourceIfUnmodifiedSince,
    sourceIfMatch,
    sourceIfNoneMatch,
    copySource,
    blobTagsString,
    legalHold1,
    xMsRequiresSync,
    sourceContentMD5,
    copySourceAuthorization,
    copySourceTags
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var abortCopyFromURLOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    204: {
      headersMapper: BlobAbortCopyFromURLHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobAbortCopyFromURLExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    comp15,
    copyId
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    copyActionAbortConstant
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var setTierOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobSetTierHeaders
    },
    202: {
      headersMapper: BlobSetTierHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetTierExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    snapshot,
    versionId,
    comp16
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifTags,
    rehydratePriority,
    tier1
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var getAccountInfoOperationSpec3 = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      headersMapper: BlobGetAccountInfoHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobGetAccountInfoExceptionHeaders
    }
  },
  queryParameters: [comp, restype1],
  urlParameters: [url],
  headerParameters: [version, accept1],
  isXML: true,
  serializer: xmlSerializer3
};
var queryOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: BlobQueryHeaders
    },
    206: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: BlobQueryHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobQueryExceptionHeaders
    }
  },
  requestBody: queryRequest,
  queryParameters: [
    timeoutInSeconds,
    snapshot,
    comp17
  ],
  urlParameters: [url],
  headerParameters: [
    contentType,
    accept,
    version,
    requestId,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer3
};
var getTagsOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: BlobTags,
      headersMapper: BlobGetTagsHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobGetTagsExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    snapshot,
    versionId,
    comp18
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer3
};
var setTagsOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    204: {
      headersMapper: BlobSetTagsHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetTagsExceptionHeaders
    }
  },
  requestBody: tags,
  queryParameters: [
    timeoutInSeconds,
    versionId,
    comp18
  ],
  urlParameters: [url],
  headerParameters: [
    contentType,
    accept,
    version,
    requestId,
    leaseId,
    ifTags,
    transactionalContentMD5,
    transactionalContentCrc64
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer3
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js
var PageBlob = class {
  /**
   * Initialize a new instance of the class PageBlob class.
   * @param client Reference to the service client
   */
  constructor(client) {
    this.client = client;
  }
  /**
   * The Create operation creates a new page blob.
   * @param contentLength The length of the request.
   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The
   *                          page blob size must be aligned to a 512-byte boundary.
   * @param options The options parameters.
   */
  create(contentLength2, blobContentLength2, options) {
    const operationArguments = {
      contentLength: contentLength2,
      blobContentLength: blobContentLength2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, createOperationSpec2);
  }
  /**
   * The Upload Pages operation writes a range of pages to a page blob
   * @param contentLength The length of the request.
   * @param body Initial data
   * @param options The options parameters.
   */
  uploadPages(contentLength2, body2, options) {
    const operationArguments = {
      contentLength: contentLength2,
      body: body2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, uploadPagesOperationSpec);
  }
  /**
   * The Clear Pages operation clears a set of pages from a page blob
   * @param contentLength The length of the request.
   * @param options The options parameters.
   */
  clearPages(contentLength2, options) {
    const operationArguments = {
      contentLength: contentLength2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, clearPagesOperationSpec);
  }
  /**
   * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a
   * URL
   * @param sourceUrl Specify a URL to the copy source.
   * @param sourceRange Bytes of source data in the specified range. The length of this range should
   *                    match the ContentLength header and x-ms-range/Range destination range header.
   * @param contentLength The length of the request.
   * @param range The range of bytes to which the source range would be written. The range should be 512
   *              aligned and range-end is required.
   * @param options The options parameters.
   */
  uploadPagesFromURL(sourceUrl2, sourceRange2, contentLength2, range2, options) {
    const operationArguments = {
      sourceUrl: sourceUrl2,
      sourceRange: sourceRange2,
      contentLength: contentLength2,
      range: range2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, uploadPagesFromURLOperationSpec);
  }
  /**
   * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a
   * page blob
   * @param options The options parameters.
   */
  getPageRanges(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, getPageRangesOperationSpec);
  }
  /**
   * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were
   * changed between target blob and previous snapshot.
   * @param options The options parameters.
   */
  getPageRangesDiff(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, getPageRangesDiffOperationSpec);
  }
  /**
   * Resize the Blob
   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The
   *                          page blob size must be aligned to a 512-byte boundary.
   * @param options The options parameters.
   */
  resize(blobContentLength2, options) {
    const operationArguments = {
      blobContentLength: blobContentLength2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, resizeOperationSpec);
  }
  /**
   * Update the sequence number of the blob
   * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.
   *                             This property applies to page blobs only. This property indicates how the service should modify the
   *                             blob's sequence number
   * @param options The options parameters.
   */
  updateSequenceNumber(sequenceNumberAction2, options) {
    const operationArguments = {
      sequenceNumberAction: sequenceNumberAction2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, updateSequenceNumberOperationSpec);
  }
  /**
   * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.
   * The snapshot is copied such that only the differential changes between the previously copied
   * snapshot are transferred to the destination. The copied snapshots are complete copies of the
   * original snapshot and can be read or copied from as usual. This API is supported since REST version
   * 2016-05-31.
   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
   *                   access signature.
   * @param options The options parameters.
   */
  copyIncremental(copySource2, options) {
    const operationArguments = {
      copySource: copySource2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, copyIncrementalOperationSpec);
  }
};
var xmlSerializer4 = new Serializer(
  mappers_exports,
  /* isXml */
  true
);
var serializer = new Serializer(
  mappers_exports,
  /* isXml */
  false
);
var createOperationSpec2 = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: PageBlobCreateHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobCreateExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    contentLength,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    blobCacheControl,
    blobContentType,
    blobContentMD5,
    blobContentEncoding,
    blobContentLanguage,
    blobContentDisposition,
    immutabilityPolicyExpiry,
    immutabilityPolicyMode,
    encryptionScope,
    tier,
    blobTagsString,
    legalHold1,
    blobType,
    blobContentLength,
    blobSequenceNumber
  ],
  isXML: true,
  serializer: xmlSerializer4
};
var uploadPagesOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: PageBlobUploadPagesHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobUploadPagesExceptionHeaders
    }
  },
  requestBody: body1,
  queryParameters: [timeoutInSeconds, comp19],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    contentLength,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    range,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    encryptionScope,
    transactionalContentMD5,
    transactionalContentCrc64,
    contentType1,
    accept2,
    pageWrite,
    ifSequenceNumberLessThanOrEqualTo,
    ifSequenceNumberLessThan,
    ifSequenceNumberEqualTo
  ],
  mediaType: "binary",
  serializer
};
var clearPagesOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: PageBlobClearPagesHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobClearPagesExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp19],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    contentLength,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    range,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    encryptionScope,
    ifSequenceNumberLessThanOrEqualTo,
    ifSequenceNumberLessThan,
    ifSequenceNumberEqualTo,
    pageWrite1
  ],
  isXML: true,
  serializer: xmlSerializer4
};
var uploadPagesFromURLOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: PageBlobUploadPagesFromURLHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobUploadPagesFromURLExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp19],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    contentLength,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    encryptionScope,
    sourceIfModifiedSince,
    sourceIfUnmodifiedSince,
    sourceIfMatch,
    sourceIfNoneMatch,
    sourceContentMD5,
    copySourceAuthorization,
    pageWrite,
    ifSequenceNumberLessThanOrEqualTo,
    ifSequenceNumberLessThan,
    ifSequenceNumberEqualTo,
    sourceUrl,
    sourceRange,
    sourceContentCrc64,
    range1
  ],
  isXML: true,
  serializer: xmlSerializer4
};
var getPageRangesOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: PageList,
      headersMapper: PageBlobGetPageRangesHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobGetPageRangesExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    marker,
    maxPageSize,
    snapshot,
    comp20
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    range,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer4
};
var getPageRangesDiffOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: PageList,
      headersMapper: PageBlobGetPageRangesDiffHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobGetPageRangesDiffExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    marker,
    maxPageSize,
    snapshot,
    comp20,
    prevsnapshot
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    range,
    ifMatch,
    ifNoneMatch,
    ifTags,
    prevSnapshotUrl
  ],
  isXML: true,
  serializer: xmlSerializer4
};
var resizeOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: PageBlobResizeHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobResizeExceptionHeaders
    }
  },
  queryParameters: [comp, timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    encryptionScope,
    blobContentLength
  ],
  isXML: true,
  serializer: xmlSerializer4
};
var updateSequenceNumberOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: PageBlobUpdateSequenceNumberHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobUpdateSequenceNumberExceptionHeaders
    }
  },
  queryParameters: [comp, timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    ifMatch,
    ifNoneMatch,
    ifTags,
    blobSequenceNumber,
    sequenceNumberAction
  ],
  isXML: true,
  serializer: xmlSerializer4
};
var copyIncrementalOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: PageBlobCopyIncrementalHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobCopyIncrementalExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp21],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    ifMatch,
    ifNoneMatch,
    ifTags,
    copySource
  ],
  isXML: true,
  serializer: xmlSerializer4
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js
var AppendBlob = class {
  /**
   * Initialize a new instance of the class AppendBlob class.
   * @param client Reference to the service client
   */
  constructor(client) {
    this.client = client;
  }
  /**
   * The Create Append Blob operation creates a new append blob.
   * @param contentLength The length of the request.
   * @param options The options parameters.
   */
  create(contentLength2, options) {
    const operationArguments = {
      contentLength: contentLength2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, createOperationSpec3);
  }
  /**
   * The Append Block operation commits a new block of data to the end of an existing append blob. The
   * Append Block operation is permitted only if the blob was created with x-ms-blob-type set to
   * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.
   * @param contentLength The length of the request.
   * @param body Initial data
   * @param options The options parameters.
   */
  appendBlock(contentLength2, body2, options) {
    const operationArguments = {
      contentLength: contentLength2,
      body: body2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, appendBlockOperationSpec);
  }
  /**
   * The Append Block operation commits a new block of data to the end of an existing append blob where
   * the contents are read from a source url. The Append Block operation is permitted only if the blob
   * was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on version
   * 2015-02-21 version or later.
   * @param sourceUrl Specify a URL to the copy source.
   * @param contentLength The length of the request.
   * @param options The options parameters.
   */
  appendBlockFromUrl(sourceUrl2, contentLength2, options) {
    const operationArguments = {
      sourceUrl: sourceUrl2,
      contentLength: contentLength2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, appendBlockFromUrlOperationSpec);
  }
  /**
   * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version
   * 2019-12-12 version or later.
   * @param options The options parameters.
   */
  seal(options) {
    const operationArguments = {
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, sealOperationSpec);
  }
};
var xmlSerializer5 = new Serializer(
  mappers_exports,
  /* isXml */
  true
);
var serializer2 = new Serializer(
  mappers_exports,
  /* isXml */
  false
);
var createOperationSpec3 = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: AppendBlobCreateHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: AppendBlobCreateExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    contentLength,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    blobCacheControl,
    blobContentType,
    blobContentMD5,
    blobContentEncoding,
    blobContentLanguage,
    blobContentDisposition,
    immutabilityPolicyExpiry,
    immutabilityPolicyMode,
    encryptionScope,
    blobTagsString,
    legalHold1,
    blobType1
  ],
  isXML: true,
  serializer: xmlSerializer5
};
var appendBlockOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: AppendBlobAppendBlockHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: AppendBlobAppendBlockExceptionHeaders
    }
  },
  requestBody: body1,
  queryParameters: [timeoutInSeconds, comp22],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    contentLength,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    encryptionScope,
    transactionalContentMD5,
    transactionalContentCrc64,
    contentType1,
    accept2,
    maxSize,
    appendPosition
  ],
  mediaType: "binary",
  serializer: serializer2
};
var appendBlockFromUrlOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: AppendBlobAppendBlockFromUrlHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: AppendBlobAppendBlockFromUrlExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp22],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    contentLength,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    encryptionScope,
    sourceIfModifiedSince,
    sourceIfUnmodifiedSince,
    sourceIfMatch,
    sourceIfNoneMatch,
    sourceContentMD5,
    copySourceAuthorization,
    transactionalContentMD5,
    sourceUrl,
    sourceContentCrc64,
    maxSize,
    appendPosition,
    sourceRange1
  ],
  isXML: true,
  serializer: xmlSerializer5
};
var sealOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: AppendBlobSealHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: AppendBlobSealExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp23],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    ifMatch,
    ifNoneMatch,
    appendPosition
  ],
  isXML: true,
  serializer: xmlSerializer5
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js
var BlockBlob = class {
  /**
   * Initialize a new instance of the class BlockBlob class.
   * @param client Reference to the service client
   */
  constructor(client) {
    this.client = client;
  }
  /**
   * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing
   * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put
   * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a
   * partial update of the content of a block blob, use the Put Block List operation.
   * @param contentLength The length of the request.
   * @param body Initial data
   * @param options The options parameters.
   */
  upload(contentLength2, body2, options) {
    const operationArguments = {
      contentLength: contentLength2,
      body: body2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, uploadOperationSpec);
  }
  /**
   * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read
   * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are
   * not supported with Put Blob from URL; the content of an existing blob is overwritten with the
   * content of the new blob.  To perform partial updates to a block blob’s contents using a source URL,
   * use the Put Block from URL API in conjunction with Put Block List.
   * @param contentLength The length of the request.
   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
   *                   access signature.
   * @param options The options parameters.
   */
  putBlobFromUrl(contentLength2, copySource2, options) {
    const operationArguments = {
      contentLength: contentLength2,
      copySource: copySource2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, putBlobFromUrlOperationSpec);
  }
  /**
   * The Stage Block operation creates a new block to be committed as part of a blob
   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string
   *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified
   *                for the blockid parameter must be the same size for each block.
   * @param contentLength The length of the request.
   * @param body Initial data
   * @param options The options parameters.
   */
  stageBlock(blockId2, contentLength2, body2, options) {
    const operationArguments = {
      blockId: blockId2,
      contentLength: contentLength2,
      body: body2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, stageBlockOperationSpec);
  }
  /**
   * The Stage Block operation creates a new block to be committed as part of a blob where the contents
   * are read from a URL.
   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string
   *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified
   *                for the blockid parameter must be the same size for each block.
   * @param contentLength The length of the request.
   * @param sourceUrl Specify a URL to the copy source.
   * @param options The options parameters.
   */
  stageBlockFromURL(blockId2, contentLength2, sourceUrl2, options) {
    const operationArguments = {
      blockId: blockId2,
      contentLength: contentLength2,
      sourceUrl: sourceUrl2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, stageBlockFromURLOperationSpec);
  }
  /**
   * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the
   * blob. In order to be written as part of a blob, a block must have been successfully written to the
   * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading
   * only those blocks that have changed, then committing the new and existing blocks together. You can
   * do this by specifying whether to commit a block from the committed block list or from the
   * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list
   * it may belong to.
   * @param blocks Blob Blocks.
   * @param options The options parameters.
   */
  commitBlockList(blocks2, options) {
    const operationArguments = {
      blocks: blocks2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, commitBlockListOperationSpec);
  }
  /**
   * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block
   * blob
   * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted
   *                 blocks, or both lists together.
   * @param options The options parameters.
   */
  getBlockList(listType2, options) {
    const operationArguments = {
      listType: listType2,
      options: operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(operationArguments, getBlockListOperationSpec);
  }
};
var xmlSerializer6 = new Serializer(
  mappers_exports,
  /* isXml */
  true
);
var serializer3 = new Serializer(
  mappers_exports,
  /* isXml */
  false
);
var uploadOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: BlockBlobUploadHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobUploadExceptionHeaders
    }
  },
  requestBody: body1,
  queryParameters: [timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    contentLength,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    blobCacheControl,
    blobContentType,
    blobContentMD5,
    blobContentEncoding,
    blobContentLanguage,
    blobContentDisposition,
    immutabilityPolicyExpiry,
    immutabilityPolicyMode,
    encryptionScope,
    tier,
    blobTagsString,
    legalHold1,
    transactionalContentMD5,
    transactionalContentCrc64,
    contentType1,
    accept2,
    blobType2
  ],
  mediaType: "binary",
  serializer: serializer3
};
var putBlobFromUrlOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: BlockBlobPutBlobFromUrlHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobPutBlobFromUrlExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    contentLength,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    blobCacheControl,
    blobContentType,
    blobContentMD5,
    blobContentEncoding,
    blobContentLanguage,
    blobContentDisposition,
    encryptionScope,
    tier,
    sourceIfModifiedSince,
    sourceIfUnmodifiedSince,
    sourceIfMatch,
    sourceIfNoneMatch,
    sourceIfTags,
    copySource,
    blobTagsString,
    sourceContentMD5,
    copySourceAuthorization,
    copySourceTags,
    transactionalContentMD5,
    blobType2,
    copySourceBlobProperties
  ],
  isXML: true,
  serializer: xmlSerializer6
};
var stageBlockOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: BlockBlobStageBlockHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobStageBlockExceptionHeaders
    }
  },
  requestBody: body1,
  queryParameters: [
    timeoutInSeconds,
    comp24,
    blockId
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    contentLength,
    leaseId,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    encryptionScope,
    transactionalContentMD5,
    transactionalContentCrc64,
    contentType1,
    accept2
  ],
  mediaType: "binary",
  serializer: serializer3
};
var stageBlockFromURLOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: BlockBlobStageBlockFromURLHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobStageBlockFromURLExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    comp24,
    blockId
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    contentLength,
    leaseId,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    encryptionScope,
    sourceIfModifiedSince,
    sourceIfUnmodifiedSince,
    sourceIfMatch,
    sourceIfNoneMatch,
    sourceContentMD5,
    copySourceAuthorization,
    sourceUrl,
    sourceContentCrc64,
    sourceRange1
  ],
  isXML: true,
  serializer: xmlSerializer6
};
var commitBlockListOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: BlockBlobCommitBlockListHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobCommitBlockListExceptionHeaders
    }
  },
  requestBody: blocks,
  queryParameters: [timeoutInSeconds, comp25],
  urlParameters: [url],
  headerParameters: [
    contentType,
    accept,
    version,
    requestId,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    blobCacheControl,
    blobContentType,
    blobContentMD5,
    blobContentEncoding,
    blobContentLanguage,
    blobContentDisposition,
    immutabilityPolicyExpiry,
    immutabilityPolicyMode,
    encryptionScope,
    tier,
    blobTagsString,
    legalHold1,
    transactionalContentMD5,
    transactionalContentCrc64
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer6
};
var getBlockListOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: BlockList,
      headersMapper: BlockBlobGetBlockListHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobGetBlockListExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    snapshot,
    comp25,
    listType
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer6
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js
var logger2 = createClientLogger("storage-blob");

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js
var SDK_VERSION = "12.16.0";
var SERVICE_VERSION = "2023-08-03";
var BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = 256 * 1024 * 1024;
var BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = 4e3 * 1024 * 1024;
var BLOCK_BLOB_MAX_BLOCKS = 5e4;
var DEFAULT_BLOCK_BUFFER_SIZE_BYTES = 8 * 1024 * 1024;
var DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = 4 * 1024 * 1024;
var DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = 5;
var REQUEST_TIMEOUT = 100 * 1e3;
var StorageOAuthScopes = "https://storage.azure.com/.default";
var URLConstants = {
  Parameters: {
    FORCE_BROWSER_NO_CACHE: "_",
    SIGNATURE: "sig",
    SNAPSHOT: "snapshot",
    VERSIONID: "versionid",
    TIMEOUT: "timeout"
  }
};
var HTTPURLConnection = {
  HTTP_ACCEPTED: 202,
  HTTP_CONFLICT: 409,
  HTTP_NOT_FOUND: 404,
  HTTP_PRECON_FAILED: 412,
  HTTP_RANGE_NOT_SATISFIABLE: 416
};
var HeaderConstants2 = {
  AUTHORIZATION: "Authorization",
  AUTHORIZATION_SCHEME: "Bearer",
  CONTENT_ENCODING: "Content-Encoding",
  CONTENT_ID: "Content-ID",
  CONTENT_LANGUAGE: "Content-Language",
  CONTENT_LENGTH: "Content-Length",
  CONTENT_MD5: "Content-Md5",
  CONTENT_TRANSFER_ENCODING: "Content-Transfer-Encoding",
  CONTENT_TYPE: "Content-Type",
  COOKIE: "Cookie",
  DATE: "date",
  IF_MATCH: "if-match",
  IF_MODIFIED_SINCE: "if-modified-since",
  IF_NONE_MATCH: "if-none-match",
  IF_UNMODIFIED_SINCE: "if-unmodified-since",
  PREFIX_FOR_STORAGE: "x-ms-",
  RANGE: "Range",
  USER_AGENT: "User-Agent",
  X_MS_CLIENT_REQUEST_ID: "x-ms-client-request-id",
  X_MS_COPY_SOURCE: "x-ms-copy-source",
  X_MS_DATE: "x-ms-date",
  X_MS_ERROR_CODE: "x-ms-error-code",
  X_MS_VERSION: "x-ms-version"
};
var ETagNone = "";
var ETagAny = "*";
var SIZE_1_MB = 1 * 1024 * 1024;
var BATCH_MAX_REQUEST = 256;
var BATCH_MAX_PAYLOAD_IN_BYTES = 4 * SIZE_1_MB;
var HTTP_LINE_ENDING = "\r\n";
var HTTP_VERSION_1_1 = "HTTP/1.1";
var EncryptionAlgorithmAES25 = "AES256";
var DevelopmentConnectionString = `DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;`;
var StorageBlobLoggingAllowedHeaderNames = [
  "Access-Control-Allow-Origin",
  "Cache-Control",
  "Content-Length",
  "Content-Type",
  "Date",
  "Request-Id",
  "traceparent",
  "Transfer-Encoding",
  "User-Agent",
  "x-ms-client-request-id",
  "x-ms-date",
  "x-ms-error-code",
  "x-ms-request-id",
  "x-ms-return-client-request-id",
  "x-ms-version",
  "Accept-Ranges",
  "Content-Disposition",
  "Content-Encoding",
  "Content-Language",
  "Content-MD5",
  "Content-Range",
  "ETag",
  "Last-Modified",
  "Server",
  "Vary",
  "x-ms-content-crc64",
  "x-ms-copy-action",
  "x-ms-copy-completion-time",
  "x-ms-copy-id",
  "x-ms-copy-progress",
  "x-ms-copy-status",
  "x-ms-has-immutability-policy",
  "x-ms-has-legal-hold",
  "x-ms-lease-state",
  "x-ms-lease-status",
  "x-ms-range",
  "x-ms-request-server-encrypted",
  "x-ms-server-encrypted",
  "x-ms-snapshot",
  "x-ms-source-range",
  "If-Match",
  "If-Modified-Since",
  "If-None-Match",
  "If-Unmodified-Since",
  "x-ms-access-tier",
  "x-ms-access-tier-change-time",
  "x-ms-access-tier-inferred",
  "x-ms-account-kind",
  "x-ms-archive-status",
  "x-ms-blob-append-offset",
  "x-ms-blob-cache-control",
  "x-ms-blob-committed-block-count",
  "x-ms-blob-condition-appendpos",
  "x-ms-blob-condition-maxsize",
  "x-ms-blob-content-disposition",
  "x-ms-blob-content-encoding",
  "x-ms-blob-content-language",
  "x-ms-blob-content-length",
  "x-ms-blob-content-md5",
  "x-ms-blob-content-type",
  "x-ms-blob-public-access",
  "x-ms-blob-sequence-number",
  "x-ms-blob-type",
  "x-ms-copy-destination-snapshot",
  "x-ms-creation-time",
  "x-ms-default-encryption-scope",
  "x-ms-delete-snapshots",
  "x-ms-delete-type-permanent",
  "x-ms-deny-encryption-scope-override",
  "x-ms-encryption-algorithm",
  "x-ms-if-sequence-number-eq",
  "x-ms-if-sequence-number-le",
  "x-ms-if-sequence-number-lt",
  "x-ms-incremental-copy",
  "x-ms-lease-action",
  "x-ms-lease-break-period",
  "x-ms-lease-duration",
  "x-ms-lease-id",
  "x-ms-lease-time",
  "x-ms-page-write",
  "x-ms-proposed-lease-id",
  "x-ms-range-get-content-md5",
  "x-ms-rehydrate-priority",
  "x-ms-sequence-number-action",
  "x-ms-sku-name",
  "x-ms-source-content-md5",
  "x-ms-source-if-match",
  "x-ms-source-if-modified-since",
  "x-ms-source-if-none-match",
  "x-ms-source-if-unmodified-since",
  "x-ms-tag-count",
  "x-ms-encryption-key-sha256",
  "x-ms-if-tags",
  "x-ms-source-if-tags"
];
var StorageBlobLoggingAllowedQueryParameters = [
  "comp",
  "maxresults",
  "rscc",
  "rscd",
  "rsce",
  "rscl",
  "rsct",
  "se",
  "si",
  "sip",
  "sp",
  "spr",
  "sr",
  "srt",
  "ss",
  "st",
  "sv",
  "include",
  "marker",
  "prefix",
  "copyid",
  "restype",
  "blockid",
  "blocklisttype",
  "delimiter",
  "prevsnapshot",
  "ske",
  "skoid",
  "sks",
  "skt",
  "sktid",
  "skv",
  "snapshot"
];
var BlobUsesCustomerSpecifiedEncryptionMsg = "BlobUsesCustomerSpecifiedEncryption";
var BlobDoesNotUseCustomerSpecifiedEncryption = "BlobDoesNotUseCustomerSpecifiedEncryption";
var PathStylePorts = [
  "10000",
  "10001",
  "10002",
  "10003",
  "10004",
  "10100",
  "10101",
  "10102",
  "10103",
  "10104",
  "11000",
  "11001",
  "11002",
  "11003",
  "11004",
  "11100",
  "11101",
  "11102",
  "11103",
  "11104"
];

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js
function escapeURLPath(url2) {
  const urlParsed = URLBuilder.parse(url2);
  let path = urlParsed.getPath();
  path = path || "/";
  path = escape(path);
  urlParsed.setPath(path);
  return urlParsed.toString();
}
function getProxyUriFromDevConnString(connectionString) {
  let proxyUri = "";
  if (connectionString.search("DevelopmentStorageProxyUri=") !== -1) {
    const matchCredentials = connectionString.split(";");
    for (const element of matchCredentials) {
      if (element.trim().startsWith("DevelopmentStorageProxyUri=")) {
        proxyUri = element.trim().match("DevelopmentStorageProxyUri=(.*)")[1];
      }
    }
  }
  return proxyUri;
}
function getValueInConnString(connectionString, argument) {
  const elements = connectionString.split(";");
  for (const element of elements) {
    if (element.trim().startsWith(argument)) {
      return element.trim().match(argument + "=(.*)")[1];
    }
  }
  return "";
}
function extractConnectionStringParts(connectionString) {
  let proxyUri = "";
  if (connectionString.startsWith("UseDevelopmentStorage=true")) {
    proxyUri = getProxyUriFromDevConnString(connectionString);
    connectionString = DevelopmentConnectionString;
  }
  let blobEndpoint = getValueInConnString(connectionString, "BlobEndpoint");
  blobEndpoint = blobEndpoint.endsWith("/") ? blobEndpoint.slice(0, -1) : blobEndpoint;
  if (connectionString.search("DefaultEndpointsProtocol=") !== -1 && connectionString.search("AccountKey=") !== -1) {
    let defaultEndpointsProtocol = "";
    let accountName = "";
    let accountKey = Buffer.from("accountKey", "base64");
    let endpointSuffix = "";
    accountName = getValueInConnString(connectionString, "AccountName");
    accountKey = Buffer.from(getValueInConnString(connectionString, "AccountKey"), "base64");
    if (!blobEndpoint) {
      defaultEndpointsProtocol = getValueInConnString(connectionString, "DefaultEndpointsProtocol");
      const protocol = defaultEndpointsProtocol.toLowerCase();
      if (protocol !== "https" && protocol !== "http") {
        throw new Error("Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'");
      }
      endpointSuffix = getValueInConnString(connectionString, "EndpointSuffix");
      if (!endpointSuffix) {
        throw new Error("Invalid EndpointSuffix in the provided Connection String");
      }
      blobEndpoint = `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;
    }
    if (!accountName) {
      throw new Error("Invalid AccountName in the provided Connection String");
    } else if (accountKey.length === 0) {
      throw new Error("Invalid AccountKey in the provided Connection String");
    }
    return {
      kind: "AccountConnString",
      url: blobEndpoint,
      accountName,
      accountKey,
      proxyUri
    };
  } else {
    const accountSas = getValueInConnString(connectionString, "SharedAccessSignature");
    let accountName = getValueInConnString(connectionString, "AccountName");
    if (!accountName) {
      accountName = getAccountNameFromUrl(blobEndpoint);
    }
    if (!blobEndpoint) {
      throw new Error("Invalid BlobEndpoint in the provided SAS Connection String");
    } else if (!accountSas) {
      throw new Error("Invalid SharedAccessSignature in the provided SAS Connection String");
    }
    return { kind: "SASConnString", url: blobEndpoint, accountName, accountSas };
  }
}
function escape(text) {
  return encodeURIComponent(text).replace(/%2F/g, "/").replace(/'/g, "%27").replace(/\+/g, "%20").replace(/%25/g, "%");
}
function appendToURLPath(url2, name) {
  const urlParsed = URLBuilder.parse(url2);
  let path = urlParsed.getPath();
  path = path ? path.endsWith("/") ? `${path}${name}` : `${path}/${name}` : name;
  urlParsed.setPath(path);
  const normalizedUrl = new URL(urlParsed.toString());
  return normalizedUrl.toString();
}
function setURLParameter(url2, name, value) {
  const urlParsed = URLBuilder.parse(url2);
  urlParsed.setQueryParameter(name, value);
  return urlParsed.toString();
}
function getURLParameter(url2, name) {
  const urlParsed = URLBuilder.parse(url2);
  return urlParsed.getQueryParameterValue(name);
}
function setURLHost(url2, host) {
  const urlParsed = URLBuilder.parse(url2);
  urlParsed.setHost(host);
  return urlParsed.toString();
}
function getURLPath(url2) {
  const urlParsed = URLBuilder.parse(url2);
  return urlParsed.getPath();
}
function getURLScheme(url2) {
  const urlParsed = URLBuilder.parse(url2);
  return urlParsed.getScheme();
}
function getURLPathAndQuery(url2) {
  const urlParsed = URLBuilder.parse(url2);
  const pathString = urlParsed.getPath();
  if (!pathString) {
    throw new RangeError("Invalid url without valid path.");
  }
  let queryString = urlParsed.getQuery() || "";
  queryString = queryString.trim();
  if (queryString !== "") {
    queryString = queryString.startsWith("?") ? queryString : `?${queryString}`;
  }
  return `${pathString}${queryString}`;
}
function appendToURLQuery(url2, queryParts) {
  const urlParsed = URLBuilder.parse(url2);
  let query = urlParsed.getQuery();
  if (query) {
    query += "&" + queryParts;
  } else {
    query = queryParts;
  }
  urlParsed.setQuery(query);
  return urlParsed.toString();
}
function truncatedISO8061Date(date, withMilliseconds = true) {
  const dateString = date.toISOString();
  return withMilliseconds ? dateString.substring(0, dateString.length - 1) + "0000Z" : dateString.substring(0, dateString.length - 5) + "Z";
}
function base64encode(content) {
  return !isNode ? btoa(content) : Buffer.from(content).toString("base64");
}
function generateBlockID(blockIDPrefix, blockIndex) {
  const maxSourceStringLength = 48;
  const maxBlockIndexLength = 6;
  const maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;
  if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {
    blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);
  }
  const res = blockIDPrefix + padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, "0");
  return base64encode(res);
}
async function delay2(timeInMs, aborter, abortError) {
  return new Promise((resolve, reject) => {
    let timeout;
    const abortHandler = () => {
      if (timeout !== void 0) {
        clearTimeout(timeout);
      }
      reject(abortError);
    };
    const resolveHandler = () => {
      if (aborter !== void 0) {
        aborter.removeEventListener("abort", abortHandler);
      }
      resolve();
    };
    timeout = setTimeout(resolveHandler, timeInMs);
    if (aborter !== void 0) {
      aborter.addEventListener("abort", abortHandler);
    }
  });
}
function padStart(currentString, targetLength, padString = " ") {
  if (String.prototype.padStart) {
    return currentString.padStart(targetLength, padString);
  }
  padString = padString || " ";
  if (currentString.length > targetLength) {
    return currentString;
  } else {
    targetLength = targetLength - currentString.length;
    if (targetLength > padString.length) {
      padString += padString.repeat(targetLength / padString.length);
    }
    return padString.slice(0, targetLength) + currentString;
  }
}
function iEqual(str1, str2) {
  return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();
}
function getAccountNameFromUrl(url2) {
  const parsedUrl = URLBuilder.parse(url2);
  let accountName;
  try {
    if (parsedUrl.getHost().split(".")[1] === "blob") {
      accountName = parsedUrl.getHost().split(".")[0];
    } else if (isIpEndpointStyle(parsedUrl)) {
      accountName = parsedUrl.getPath().split("/")[1];
    } else {
      accountName = "";
    }
    return accountName;
  } catch (error) {
    throw new Error("Unable to extract accountName with provided information.");
  }
}
function isIpEndpointStyle(parsedUrl) {
  if (parsedUrl.getHost() === void 0) {
    return false;
  }
  const host = parsedUrl.getHost() + (parsedUrl.getPort() === void 0 ? "" : ":" + parsedUrl.getPort());
  return /^.*:.*:.*$|^(localhost|host.docker.internal)(:[0-9]+)?$|^(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])(\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])){3}(:[0-9]+)?$/.test(host) || parsedUrl.getPort() !== void 0 && PathStylePorts.includes(parsedUrl.getPort());
}
function toBlobTagsString(tags2) {
  if (tags2 === void 0) {
    return void 0;
  }
  const tagPairs = [];
  for (const key in tags2) {
    if (Object.prototype.hasOwnProperty.call(tags2, key)) {
      const value = tags2[key];
      tagPairs.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);
    }
  }
  return tagPairs.join("&");
}
function toBlobTags(tags2) {
  if (tags2 === void 0) {
    return void 0;
  }
  const res = {
    blobTagSet: []
  };
  for (const key in tags2) {
    if (Object.prototype.hasOwnProperty.call(tags2, key)) {
      const value = tags2[key];
      res.blobTagSet.push({
        key,
        value
      });
    }
  }
  return res;
}
function toTags(tags2) {
  if (tags2 === void 0) {
    return void 0;
  }
  const res = {};
  for (const blobTag of tags2.blobTagSet) {
    res[blobTag.key] = blobTag.value;
  }
  return res;
}
function toQuerySerialization(textConfiguration) {
  if (textConfiguration === void 0) {
    return void 0;
  }
  switch (textConfiguration.kind) {
    case "csv":
      return {
        format: {
          type: "delimited",
          delimitedTextConfiguration: {
            columnSeparator: textConfiguration.columnSeparator || ",",
            fieldQuote: textConfiguration.fieldQuote || "",
            recordSeparator: textConfiguration.recordSeparator,
            escapeChar: textConfiguration.escapeCharacter || "",
            headersPresent: textConfiguration.hasHeaders || false
          }
        }
      };
    case "json":
      return {
        format: {
          type: "json",
          jsonTextConfiguration: {
            recordSeparator: textConfiguration.recordSeparator
          }
        }
      };
    case "arrow":
      return {
        format: {
          type: "arrow",
          arrowConfiguration: {
            schema: textConfiguration.schema
          }
        }
      };
    case "parquet":
      return {
        format: {
          type: "parquet"
        }
      };
    default:
      throw Error("Invalid BlobQueryTextConfiguration.");
  }
}
function parseObjectReplicationRecord(objectReplicationRecord) {
  if (!objectReplicationRecord) {
    return void 0;
  }
  if ("policy-id" in objectReplicationRecord) {
    return void 0;
  }
  const orProperties = [];
  for (const key in objectReplicationRecord) {
    const ids = key.split("_");
    const policyPrefix = "or-";
    if (ids[0].startsWith(policyPrefix)) {
      ids[0] = ids[0].substring(policyPrefix.length);
    }
    const rule = {
      ruleId: ids[1],
      replicationStatus: objectReplicationRecord[key]
    };
    const policyIndex = orProperties.findIndex((policy) => policy.policyId === ids[0]);
    if (policyIndex > -1) {
      orProperties[policyIndex].rules.push(rule);
    } else {
      orProperties.push({
        policyId: ids[0],
        rules: [rule]
      });
    }
  }
  return orProperties;
}
function attachCredential(thing, credential) {
  thing.credential = credential;
  return thing;
}
function httpAuthorizationToString(httpAuthorization) {
  return httpAuthorization ? httpAuthorization.scheme + " " + httpAuthorization.value : void 0;
}
function BlobNameToString(name) {
  if (name.encoded) {
    return decodeURIComponent(name.content);
  } else {
    return name.content;
  }
}
function ConvertInternalResponseOfListBlobFlat(internalResponse) {
  return Object.assign(Object.assign({}, internalResponse), { segment: {
    blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {
      const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name) });
      return blobItem;
    })
  } });
}
function ConvertInternalResponseOfListBlobHierarchy(internalResponse) {
  var _a3;
  return Object.assign(Object.assign({}, internalResponse), { segment: {
    blobPrefixes: (_a3 = internalResponse.segment.blobPrefixes) === null || _a3 === void 0 ? void 0 : _a3.map((blobPrefixInternal) => {
      const blobPrefix = Object.assign(Object.assign({}, blobPrefixInternal), { name: BlobNameToString(blobPrefixInternal.name) });
      return blobPrefix;
    }),
    blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {
      const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name) });
      return blobItem;
    })
  } });
}
function* ExtractPageRangeInfoItems(getPageRangesSegment) {
  let pageRange = [];
  let clearRange = [];
  if (getPageRangesSegment.pageRange)
    pageRange = getPageRangesSegment.pageRange;
  if (getPageRangesSegment.clearRange)
    clearRange = getPageRangesSegment.clearRange;
  let pageRangeIndex = 0;
  let clearRangeIndex = 0;
  while (pageRangeIndex < pageRange.length && clearRangeIndex < clearRange.length) {
    if (pageRange[pageRangeIndex].start < clearRange[clearRangeIndex].start) {
      yield {
        start: pageRange[pageRangeIndex].start,
        end: pageRange[pageRangeIndex].end,
        isClear: false
      };
      ++pageRangeIndex;
    } else {
      yield {
        start: clearRange[clearRangeIndex].start,
        end: clearRange[clearRangeIndex].end,
        isClear: true
      };
      ++clearRangeIndex;
    }
  }
  for (; pageRangeIndex < pageRange.length; ++pageRangeIndex) {
    yield {
      start: pageRange[pageRangeIndex].start,
      end: pageRange[pageRangeIndex].end,
      isClear: false
    };
  }
  for (; clearRangeIndex < clearRange.length; ++clearRangeIndex) {
    yield {
      start: clearRange[clearRangeIndex].start,
      end: clearRange[clearRangeIndex].end,
      isClear: true
    };
  }
}
function EscapePath(blobName) {
  const split = blobName.split("/");
  for (let i = 0; i < split.length; i++) {
    split[i] = encodeURIComponent(split[i]);
  }
  return split.join("/");
}

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js
var StorageBrowserPolicy = class extends BaseRequestPolicy {
  /**
   * Creates an instance of StorageBrowserPolicy.
   * @param nextPolicy -
   * @param options -
   */
  // The base class has a protected constructor. Adding a public one to enable constructing of this class.
  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/
  constructor(nextPolicy, options) {
    super(nextPolicy, options);
  }
  /**
   * Sends out request.
   *
   * @param request -
   */
  async sendRequest(request) {
    if (isNode) {
      return this._nextPolicy.sendRequest(request);
    }
    if (request.method.toUpperCase() === "GET" || request.method.toUpperCase() === "HEAD") {
      request.url = setURLParameter(request.url, URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, (/* @__PURE__ */ new Date()).getTime().toString());
    }
    request.headers.remove(HeaderConstants2.COOKIE);
    request.headers.remove(HeaderConstants2.CONTENT_LENGTH);
    return this._nextPolicy.sendRequest(request);
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js
var StorageBrowserPolicyFactory = class {
  /**
   * Creates a StorageBrowserPolicyFactory object.
   *
   * @param nextPolicy -
   * @param options -
   */
  create(nextPolicy, options) {
    return new StorageBrowserPolicy(nextPolicy, options);
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js
var StorageRetryPolicyType;
(function(StorageRetryPolicyType2) {
  StorageRetryPolicyType2[StorageRetryPolicyType2["EXPONENTIAL"] = 0] = "EXPONENTIAL";
  StorageRetryPolicyType2[StorageRetryPolicyType2["FIXED"] = 1] = "FIXED";
})(StorageRetryPolicyType || (StorageRetryPolicyType = {}));
var DEFAULT_RETRY_OPTIONS = {
  maxRetryDelayInMs: 120 * 1e3,
  maxTries: 4,
  retryDelayInMs: 4 * 1e3,
  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,
  secondaryHost: "",
  tryTimeoutInMs: void 0
  // Use server side default timeout strategy
};
var RETRY_ABORT_ERROR = new AbortError("The operation was aborted.");
var StorageRetryPolicy = class extends BaseRequestPolicy {
  /**
   * Creates an instance of RetryPolicy.
   *
   * @param nextPolicy -
   * @param options -
   * @param retryOptions -
   */
  constructor(nextPolicy, options, retryOptions = DEFAULT_RETRY_OPTIONS) {
    super(nextPolicy, options);
    this.retryOptions = {
      retryPolicyType: retryOptions.retryPolicyType ? retryOptions.retryPolicyType : DEFAULT_RETRY_OPTIONS.retryPolicyType,
      maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1 ? Math.floor(retryOptions.maxTries) : DEFAULT_RETRY_OPTIONS.maxTries,
      tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0 ? retryOptions.tryTimeoutInMs : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,
      retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0 ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs) : DEFAULT_RETRY_OPTIONS.retryDelayInMs,
      maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0 ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,
      secondaryHost: retryOptions.secondaryHost ? retryOptions.secondaryHost : DEFAULT_RETRY_OPTIONS.secondaryHost
    };
  }
  /**
   * Sends request.
   *
   * @param request -
   */
  async sendRequest(request) {
    return this.attemptSendRequest(request, false, 1);
  }
  /**
   * Decide and perform next retry. Won't mutate request parameter.
   *
   * @param request -
   * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then
   *                                   the resource was not found. This may be due to replication delay. So, in this
   *                                   case, we'll never try the secondary again for this operation.
   * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes
   *                                   the attempt will be performed by this method call.
   */
  async attemptSendRequest(request, secondaryHas404, attempt) {
    const newRequest = request.clone();
    const isPrimaryRetry = secondaryHas404 || !this.retryOptions.secondaryHost || !(request.method === "GET" || request.method === "HEAD" || request.method === "OPTIONS") || attempt % 2 === 1;
    if (!isPrimaryRetry) {
      newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost);
    }
    if (this.retryOptions.tryTimeoutInMs) {
      newRequest.url = setURLParameter(newRequest.url, URLConstants.Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1e3).toString());
    }
    let response;
    try {
      logger2.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? "Primary" : "Secondary"}`);
      response = await this._nextPolicy.sendRequest(newRequest);
      if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {
        return response;
      }
      secondaryHas404 = secondaryHas404 || !isPrimaryRetry && response.status === 404;
    } catch (err) {
      logger2.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);
      if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {
        throw err;
      }
    }
    await this.delay(isPrimaryRetry, attempt, request.abortSignal);
    return this.attemptSendRequest(request, secondaryHas404, ++attempt);
  }
  /**
   * Decide whether to retry according to last HTTP response and retry counters.
   *
   * @param isPrimaryRetry -
   * @param attempt -
   * @param response -
   * @param err -
   */
  shouldRetry(isPrimaryRetry, attempt, response, err) {
    if (attempt >= this.retryOptions.maxTries) {
      logger2.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions.maxTries}, no further try.`);
      return false;
    }
    const retriableErrors = [
      "ETIMEDOUT",
      "ESOCKETTIMEDOUT",
      "ECONNREFUSED",
      "ECONNRESET",
      "ENOENT",
      "ENOTFOUND",
      "TIMEOUT",
      "EPIPE",
      "REQUEST_SEND_ERROR"
      // For default xhr based http client provided in ms-rest-js
    ];
    if (err) {
      for (const retriableError of retriableErrors) {
        if (err.name.toUpperCase().includes(retriableError) || err.message.toUpperCase().includes(retriableError) || err.code && err.code.toString().toUpperCase() === retriableError) {
          logger2.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);
          return true;
        }
      }
    }
    if (response || err) {
      const statusCode = response ? response.status : err ? err.statusCode : 0;
      if (!isPrimaryRetry && statusCode === 404) {
        logger2.info(`RetryPolicy: Secondary access with 404, will retry.`);
        return true;
      }
      if (statusCode === 503 || statusCode === 500) {
        logger2.info(`RetryPolicy: Will retry for status code ${statusCode}.`);
        return true;
      }
    }
    if ((err === null || err === void 0 ? void 0 : err.code) === "PARSE_ERROR" && (err === null || err === void 0 ? void 0 : err.message.startsWith(`Error "Error: Unclosed root tag`))) {
      logger2.info("RetryPolicy: Incomplete XML response likely due to service timeout, will retry.");
      return true;
    }
    return false;
  }
  /**
   * Delay a calculated time between retries.
   *
   * @param isPrimaryRetry -
   * @param attempt -
   * @param abortSignal -
   */
  async delay(isPrimaryRetry, attempt, abortSignal2) {
    let delayTimeInMs = 0;
    if (isPrimaryRetry) {
      switch (this.retryOptions.retryPolicyType) {
        case StorageRetryPolicyType.EXPONENTIAL:
          delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);
          break;
        case StorageRetryPolicyType.FIXED:
          delayTimeInMs = this.retryOptions.retryDelayInMs;
          break;
      }
    } else {
      delayTimeInMs = Math.random() * 1e3;
    }
    logger2.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);
    return delay2(delayTimeInMs, abortSignal2, RETRY_ABORT_ERROR);
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js
var StorageRetryPolicyFactory = class {
  /**
   * Creates an instance of StorageRetryPolicyFactory.
   * @param retryOptions -
   */
  constructor(retryOptions) {
    this.retryOptions = retryOptions;
  }
  /**
   * Creates a StorageRetryPolicy object.
   *
   * @param nextPolicy -
   * @param options -
   */
  create(nextPolicy, options) {
    return new StorageRetryPolicy(nextPolicy, options, this.retryOptions);
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js
var CredentialPolicy = class extends BaseRequestPolicy {
  /**
   * Sends out request.
   *
   * @param request -
   */
  sendRequest(request) {
    return this._nextPolicy.sendRequest(this.signRequest(request));
  }
  /**
   * Child classes must implement this method with request signing. This method
   * will be executed in {@link sendRequest}.
   *
   * @param request -
   */
  signRequest(request) {
    return request;
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js
var AnonymousCredentialPolicy = class extends CredentialPolicy {
  /**
   * Creates an instance of AnonymousCredentialPolicy.
   * @param nextPolicy -
   * @param options -
   */
  // The base class has a protected constructor. Adding a public one to enable constructing of this class.
  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/
  constructor(nextPolicy, options) {
    super(nextPolicy, options);
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js
var Credential = class {
  /**
   * Creates a RequestPolicy object.
   *
   * @param _nextPolicy -
   * @param _options -
   */
  create(_nextPolicy, _options) {
    throw new Error("Method should be implemented in children classes.");
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js
var AnonymousCredential = class extends Credential {
  /**
   * Creates an {@link AnonymousCredentialPolicy} object.
   *
   * @param nextPolicy -
   * @param options -
   */
  create(nextPolicy, options) {
    return new AnonymousCredentialPolicy(nextPolicy, options);
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/TelemetryPolicyFactory.js
var os = __toESM(require_os());

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/TelemetryPolicy.js
var TelemetryPolicy = class extends BaseRequestPolicy {
  /**
   * Creates an instance of TelemetryPolicy.
   * @param nextPolicy -
   * @param options -
   * @param telemetry -
   */
  constructor(nextPolicy, options, telemetry) {
    super(nextPolicy, options);
    this.telemetry = telemetry;
  }
  /**
   * Sends out request.
   *
   * @param request -
   */
  async sendRequest(request) {
    if (isNode) {
      if (!request.headers) {
        request.headers = new HttpHeaders();
      }
      if (!request.headers.get(HeaderConstants2.USER_AGENT)) {
        request.headers.set(HeaderConstants2.USER_AGENT, this.telemetry);
      }
    }
    return this._nextPolicy.sendRequest(request);
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/TelemetryPolicyFactory.js
var TelemetryPolicyFactory = class {
  /**
   * Creates an instance of TelemetryPolicyFactory.
   * @param telemetry -
   */
  constructor(telemetry) {
    const userAgentInfo = [];
    if (isNode) {
      if (telemetry) {
        const telemetryString = telemetry.userAgentPrefix || "";
        if (telemetryString.length > 0 && userAgentInfo.indexOf(telemetryString) === -1) {
          userAgentInfo.push(telemetryString);
        }
      }
      const libInfo = `azsdk-js-storageblob/${SDK_VERSION}`;
      if (userAgentInfo.indexOf(libInfo) === -1) {
        userAgentInfo.push(libInfo);
      }
      let runtimeInfo = `(NODE-VERSION ${process.version})`;
      if (os) {
        runtimeInfo = `(NODE-VERSION ${process.version}; ${os.type()} ${os.release()})`;
      }
      if (userAgentInfo.indexOf(runtimeInfo) === -1) {
        userAgentInfo.push(runtimeInfo);
      }
    }
    this.telemetryString = userAgentInfo.join(" ");
  }
  /**
   * Creates a TelemetryPolicy object.
   *
   * @param nextPolicy -
   * @param options -
   */
  create(nextPolicy, options) {
    return new TelemetryPolicy(nextPolicy, options, this.telemetryString);
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js
var _defaultHttpClient = new XhrHttpClient();
function getCachedDefaultHttpClient2() {
  return _defaultHttpClient;
}

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBearerTokenChallengeAuthenticationPolicy.js
var Constants2 = {
  DefaultScope: "/.default",
  /**
   * Defines constants for use with HTTP headers.
   */
  HeaderConstants: {
    /**
     * The Authorization header.
     */
    AUTHORIZATION: "authorization"
  }
};
var DEFAULT_CYCLER_OPTIONS2 = {
  forcedRefreshWindowInMs: 1e3,
  retryIntervalInMs: 3e3,
  refreshWindowInMs: 1e3 * 60 * 2
  // Start refreshing 2m before expiry
};
async function beginRefresh2(getAccessToken, retryIntervalInMs, timeoutInMs) {
  async function tryGetAccessToken() {
    if (Date.now() < timeoutInMs) {
      try {
        return await getAccessToken();
      } catch (_a3) {
        return null;
      }
    } else {
      const finalToken = await getAccessToken();
      if (finalToken === null) {
        throw new Error("Failed to refresh access token.");
      }
      return finalToken;
    }
  }
  let token = await tryGetAccessToken();
  while (token === null) {
    await delay(retryIntervalInMs);
    token = await tryGetAccessToken();
  }
  return token;
}
function createTokenCycler2(credential, scopes, tokenCyclerOptions) {
  let refreshWorker = null;
  let token = null;
  const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS2), tokenCyclerOptions);
  const cycler = {
    /**
     * Produces true if a refresh job is currently in progress.
     */
    get isRefreshing() {
      return refreshWorker !== null;
    },
    /**
     * Produces true if the cycler SHOULD refresh (we are within the refresh
     * window and not already refreshing)
     */
    get shouldRefresh() {
      var _a3;
      return !cycler.isRefreshing && ((_a3 = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a3 !== void 0 ? _a3 : 0) - options.refreshWindowInMs < Date.now();
    },
    /**
     * Produces true if the cycler MUST refresh (null or nearly-expired
     * token).
     */
    get mustRefresh() {
      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();
    }
  };
  function refresh(getTokenOptions) {
    var _a3;
    if (!cycler.isRefreshing) {
      const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);
      refreshWorker = beginRefresh2(
        tryGetAccessToken,
        options.retryIntervalInMs,
        // If we don't have a token, then we should timeout immediately
        (_a3 = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a3 !== void 0 ? _a3 : Date.now()
      ).then((_token) => {
        refreshWorker = null;
        token = _token;
        return token;
      }).catch((reason) => {
        refreshWorker = null;
        token = null;
        throw reason;
      });
    }
    return refreshWorker;
  }
  return async (tokenOptions) => {
    if (cycler.mustRefresh)
      return refresh(tokenOptions);
    if (cycler.shouldRefresh) {
      refresh(tokenOptions);
    }
    return token;
  };
}
function getChallenge(response) {
  const challenge = response.headers.get("WWW-Authenticate");
  if (response.status === 401 && challenge) {
    return challenge;
  }
  return;
}
function parseChallenge(challenge) {
  const bearerChallenge = challenge.slice("Bearer ".length);
  const challengeParts = `${bearerChallenge.trim()} `.split(" ").filter((x) => x);
  const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split("=")));
  return keyValuePairs.reduce((a, b) => Object.assign(Object.assign({}, a), b), {});
}
function storageBearerTokenChallengeAuthenticationPolicy(credential, scopes) {
  let getToken = createTokenCycler2(credential, scopes);
  class StorageBearerTokenChallengeAuthenticationPolicy extends BaseRequestPolicy {
    constructor(nextPolicy, options) {
      super(nextPolicy, options);
    }
    async sendRequest(webResource) {
      if (!webResource.url.toLowerCase().startsWith("https://")) {
        throw new Error("Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.");
      }
      const getTokenInternal = getToken;
      const token = (await getTokenInternal({
        abortSignal: webResource.abortSignal,
        tracingOptions: {
          tracingContext: webResource.tracingContext
        }
      })).token;
      webResource.headers.set(Constants2.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);
      const response = await this._nextPolicy.sendRequest(webResource);
      if ((response === null || response === void 0 ? void 0 : response.status) === 401) {
        const challenge = getChallenge(response);
        if (challenge) {
          const challengeInfo = parseChallenge(challenge);
          const challengeScopes = challengeInfo.resource_id + Constants2.DefaultScope;
          const parsedAuthUri = URLBuilder.parse(challengeInfo.authorization_uri);
          const pathSegments = parsedAuthUri.getPath().split("/");
          const tenantId = pathSegments[1];
          const getTokenForChallenge = createTokenCycler2(credential, challengeScopes);
          const tokenForChallenge = (await getTokenForChallenge({
            abortSignal: webResource.abortSignal,
            tracingOptions: {
              tracingContext: webResource.tracingContext
            },
            tenantId
          })).token;
          getToken = getTokenForChallenge;
          webResource.headers.set(Constants2.HeaderConstants.AUTHORIZATION, `Bearer ${tokenForChallenge}`);
          return this._nextPolicy.sendRequest(webResource);
        }
      }
      return response;
    }
  }
  return {
    create: (nextPolicy, options) => {
      return new StorageBearerTokenChallengeAuthenticationPolicy(nextPolicy, options);
    }
  };
}

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js
function isPipelineLike(pipeline) {
  if (!pipeline || typeof pipeline !== "object") {
    return false;
  }
  const castPipeline = pipeline;
  return Array.isArray(castPipeline.factories) && typeof castPipeline.options === "object" && typeof castPipeline.toServiceClientOptions === "function";
}
var Pipeline = class {
  /**
   * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.
   *
   * @param factories -
   * @param options -
   */
  constructor(factories, options = {}) {
    this.factories = factories;
    this.options = Object.assign(Object.assign({}, options), { httpClient: options.httpClient || getCachedDefaultHttpClient2() });
  }
  /**
   * Transfer Pipeline object to ServiceClientOptions object which is required by
   * ServiceClient constructor.
   *
   * @returns The ServiceClientOptions object from this Pipeline.
   */
  toServiceClientOptions() {
    return {
      httpClient: this.options.httpClient,
      requestPolicyFactories: this.factories
    };
  }
};
function newPipeline(credential, pipelineOptions = {}) {
  var _a3;
  if (credential === void 0) {
    credential = new AnonymousCredential();
  }
  const telemetryPolicy = new TelemetryPolicyFactory(pipelineOptions.userAgentOptions);
  const factories = [
    tracingPolicy({ userAgent: telemetryPolicy.telemetryString }),
    keepAlivePolicy(pipelineOptions.keepAliveOptions),
    telemetryPolicy,
    generateClientRequestIdPolicy(),
    new StorageBrowserPolicyFactory(),
    new StorageRetryPolicyFactory(pipelineOptions.retryOptions),
    // Default deserializationPolicy is provided by protocol layer
    // Use customized XML char key of "#" so we could deserialize metadata
    // with "_" key
    deserializationPolicy(void 0, { xmlCharKey: "#" }),
    logPolicy({
      logger: logger2.info,
      allowedHeaderNames: StorageBlobLoggingAllowedHeaderNames,
      allowedQueryParameters: StorageBlobLoggingAllowedQueryParameters
    })
  ];
  if (isNode) {
    factories.push(proxyPolicy(pipelineOptions.proxyOptions));
    factories.push(disableResponseDecompressionPolicy());
  }
  factories.push(isTokenCredential(credential) ? attachCredential(storageBearerTokenChallengeAuthenticationPolicy(credential, (_a3 = pipelineOptions.audience) !== null && _a3 !== void 0 ? _a3 : StorageOAuthScopes), credential) : credential);
  return new Pipeline(factories, pipelineOptions);
}

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js
var StorageSharedKeyCredential = class {
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClientContext.js
var packageName = "azure-storage-blob";
var packageVersion = "12.16.0";
var StorageClientContext = class extends ServiceClient {
  /**
   * Initializes a new instance of the StorageClientContext class.
   * @param url The URL of the service account, container, or blob that is the target of the desired
   *            operation.
   * @param options The parameter options
   */
  constructor(url2, options) {
    if (url2 === void 0) {
      throw new Error("'url' cannot be null");
    }
    if (!options) {
      options = {};
    }
    if (!options.userAgent) {
      const defaultUserAgent = getDefaultUserAgentValue();
      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;
    }
    super(void 0, options);
    this.requestContentType = "application/json; charset=utf-8";
    this.baseUri = options.endpoint || "{url}";
    this.url = url2;
    this.version = options.version || "2023-08-03";
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js
var StorageClient = class {
  /**
   * Creates an instance of StorageClient.
   * @param url - url to resource
   * @param pipeline - request policy pipeline.
   */
  constructor(url2, pipeline) {
    this.url = escapeURLPath(url2);
    this.accountName = getAccountNameFromUrl(url2);
    this.pipeline = pipeline;
    this.storageClientContext = new StorageClientContext(this.url, pipeline.toServiceClientOptions());
    this.isHttps = iEqual(getURLScheme(this.url) || "", "https");
    this.credential = new AnonymousCredential();
    for (const factory of this.pipeline.factories) {
      if (isNode && factory instanceof StorageSharedKeyCredential || factory instanceof AnonymousCredential) {
        this.credential = factory;
      } else if (isTokenCredential(factory.credential)) {
        this.credential = factory.credential;
      }
    }
    const storageClientContext = this.storageClientContext;
    storageClientContext.requestContentType = void 0;
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js
var createSpan2 = createSpanFunction({
  packagePrefix: "Azure.Storage.Blob",
  namespace: "Microsoft.Storage"
});
function convertTracingToRequestOptionsBase(options) {
  var _a3, _b2;
  return {
    // By passing spanOptions if they exist at runtime, we're backwards compatible with @azure/core-tracing@preview.13 and earlier.
    spanOptions: (_a3 = options === null || options === void 0 ? void 0 : options.tracingOptions) === null || _a3 === void 0 ? void 0 : _a3.spanOptions,
    tracingContext: (_b2 = options === null || options === void 0 ? void 0 : options.tracingOptions) === null || _b2 === void 0 ? void 0 : _b2.tracingContext
  };
}

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js
var BlobSASPermissions = class {
  constructor() {
    this.read = false;
    this.add = false;
    this.create = false;
    this.write = false;
    this.delete = false;
    this.deleteVersion = false;
    this.tag = false;
    this.move = false;
    this.execute = false;
    this.setImmutabilityPolicy = false;
    this.permanentDelete = false;
  }
  /**
   * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an
   * Error if it encounters a character that does not correspond to a valid permission.
   *
   * @param permissions -
   */
  static parse(permissions) {
    const blobSASPermissions = new BlobSASPermissions();
    for (const char of permissions) {
      switch (char) {
        case "r":
          blobSASPermissions.read = true;
          break;
        case "a":
          blobSASPermissions.add = true;
          break;
        case "c":
          blobSASPermissions.create = true;
          break;
        case "w":
          blobSASPermissions.write = true;
          break;
        case "d":
          blobSASPermissions.delete = true;
          break;
        case "x":
          blobSASPermissions.deleteVersion = true;
          break;
        case "t":
          blobSASPermissions.tag = true;
          break;
        case "m":
          blobSASPermissions.move = true;
          break;
        case "e":
          blobSASPermissions.execute = true;
          break;
        case "i":
          blobSASPermissions.setImmutabilityPolicy = true;
          break;
        case "y":
          blobSASPermissions.permanentDelete = true;
          break;
        default:
          throw new RangeError(`Invalid permission: ${char}`);
      }
    }
    return blobSASPermissions;
  }
  /**
   * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it
   * and boolean values for them.
   *
   * @param permissionLike -
   */
  static from(permissionLike) {
    const blobSASPermissions = new BlobSASPermissions();
    if (permissionLike.read) {
      blobSASPermissions.read = true;
    }
    if (permissionLike.add) {
      blobSASPermissions.add = true;
    }
    if (permissionLike.create) {
      blobSASPermissions.create = true;
    }
    if (permissionLike.write) {
      blobSASPermissions.write = true;
    }
    if (permissionLike.delete) {
      blobSASPermissions.delete = true;
    }
    if (permissionLike.deleteVersion) {
      blobSASPermissions.deleteVersion = true;
    }
    if (permissionLike.tag) {
      blobSASPermissions.tag = true;
    }
    if (permissionLike.move) {
      blobSASPermissions.move = true;
    }
    if (permissionLike.execute) {
      blobSASPermissions.execute = true;
    }
    if (permissionLike.setImmutabilityPolicy) {
      blobSASPermissions.setImmutabilityPolicy = true;
    }
    if (permissionLike.permanentDelete) {
      blobSASPermissions.permanentDelete = true;
    }
    return blobSASPermissions;
  }
  /**
   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an
   * order accepted by the service.
   *
   * @returns A string which represents the BlobSASPermissions
   */
  toString() {
    const permissions = [];
    if (this.read) {
      permissions.push("r");
    }
    if (this.add) {
      permissions.push("a");
    }
    if (this.create) {
      permissions.push("c");
    }
    if (this.write) {
      permissions.push("w");
    }
    if (this.delete) {
      permissions.push("d");
    }
    if (this.deleteVersion) {
      permissions.push("x");
    }
    if (this.tag) {
      permissions.push("t");
    }
    if (this.move) {
      permissions.push("m");
    }
    if (this.execute) {
      permissions.push("e");
    }
    if (this.setImmutabilityPolicy) {
      permissions.push("i");
    }
    if (this.permanentDelete) {
      permissions.push("y");
    }
    return permissions.join("");
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js
var ContainerSASPermissions = class {
  constructor() {
    this.read = false;
    this.add = false;
    this.create = false;
    this.write = false;
    this.delete = false;
    this.deleteVersion = false;
    this.list = false;
    this.tag = false;
    this.move = false;
    this.execute = false;
    this.setImmutabilityPolicy = false;
    this.permanentDelete = false;
    this.filterByTags = false;
  }
  /**
   * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an
   * Error if it encounters a character that does not correspond to a valid permission.
   *
   * @param permissions -
   */
  static parse(permissions) {
    const containerSASPermissions = new ContainerSASPermissions();
    for (const char of permissions) {
      switch (char) {
        case "r":
          containerSASPermissions.read = true;
          break;
        case "a":
          containerSASPermissions.add = true;
          break;
        case "c":
          containerSASPermissions.create = true;
          break;
        case "w":
          containerSASPermissions.write = true;
          break;
        case "d":
          containerSASPermissions.delete = true;
          break;
        case "l":
          containerSASPermissions.list = true;
          break;
        case "t":
          containerSASPermissions.tag = true;
          break;
        case "x":
          containerSASPermissions.deleteVersion = true;
          break;
        case "m":
          containerSASPermissions.move = true;
          break;
        case "e":
          containerSASPermissions.execute = true;
          break;
        case "i":
          containerSASPermissions.setImmutabilityPolicy = true;
          break;
        case "y":
          containerSASPermissions.permanentDelete = true;
          break;
        case "f":
          containerSASPermissions.filterByTags = true;
          break;
        default:
          throw new RangeError(`Invalid permission ${char}`);
      }
    }
    return containerSASPermissions;
  }
  /**
   * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it
   * and boolean values for them.
   *
   * @param permissionLike -
   */
  static from(permissionLike) {
    const containerSASPermissions = new ContainerSASPermissions();
    if (permissionLike.read) {
      containerSASPermissions.read = true;
    }
    if (permissionLike.add) {
      containerSASPermissions.add = true;
    }
    if (permissionLike.create) {
      containerSASPermissions.create = true;
    }
    if (permissionLike.write) {
      containerSASPermissions.write = true;
    }
    if (permissionLike.delete) {
      containerSASPermissions.delete = true;
    }
    if (permissionLike.list) {
      containerSASPermissions.list = true;
    }
    if (permissionLike.deleteVersion) {
      containerSASPermissions.deleteVersion = true;
    }
    if (permissionLike.tag) {
      containerSASPermissions.tag = true;
    }
    if (permissionLike.move) {
      containerSASPermissions.move = true;
    }
    if (permissionLike.execute) {
      containerSASPermissions.execute = true;
    }
    if (permissionLike.setImmutabilityPolicy) {
      containerSASPermissions.setImmutabilityPolicy = true;
    }
    if (permissionLike.permanentDelete) {
      containerSASPermissions.permanentDelete = true;
    }
    if (permissionLike.filterByTags) {
      containerSASPermissions.filterByTags = true;
    }
    return containerSASPermissions;
  }
  /**
   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an
   * order accepted by the service.
   *
   * The order of the characters should be as specified here to ensure correctness.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
   *
   */
  toString() {
    const permissions = [];
    if (this.read) {
      permissions.push("r");
    }
    if (this.add) {
      permissions.push("a");
    }
    if (this.create) {
      permissions.push("c");
    }
    if (this.write) {
      permissions.push("w");
    }
    if (this.delete) {
      permissions.push("d");
    }
    if (this.deleteVersion) {
      permissions.push("x");
    }
    if (this.list) {
      permissions.push("l");
    }
    if (this.tag) {
      permissions.push("t");
    }
    if (this.move) {
      permissions.push("m");
    }
    if (this.execute) {
      permissions.push("e");
    }
    if (this.setImmutabilityPolicy) {
      permissions.push("i");
    }
    if (this.permanentDelete) {
      permissions.push("y");
    }
    if (this.filterByTags) {
      permissions.push("f");
    }
    return permissions.join("");
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.browser.js
var UserDelegationKeyCredential = class {
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js
function ipRangeToString(ipRange) {
  return ipRange.end ? `${ipRange.start}-${ipRange.end}` : ipRange.start;
}

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js
var SASProtocol;
(function(SASProtocol2) {
  SASProtocol2["Https"] = "https";
  SASProtocol2["HttpsAndHttp"] = "https,http";
})(SASProtocol || (SASProtocol = {}));
var SASQueryParameters = class {
  constructor(version2, signature, permissionsOrOptions, services, resourceTypes, protocol, startsOn, expiresOn2, ipRange, identifier, resource, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType2, userDelegationKey, preauthorizedAgentObjectId, correlationId, encryptionScope2) {
    this.version = version2;
    this.signature = signature;
    if (permissionsOrOptions !== void 0 && typeof permissionsOrOptions !== "string") {
      this.permissions = permissionsOrOptions.permissions;
      this.services = permissionsOrOptions.services;
      this.resourceTypes = permissionsOrOptions.resourceTypes;
      this.protocol = permissionsOrOptions.protocol;
      this.startsOn = permissionsOrOptions.startsOn;
      this.expiresOn = permissionsOrOptions.expiresOn;
      this.ipRangeInner = permissionsOrOptions.ipRange;
      this.identifier = permissionsOrOptions.identifier;
      this.encryptionScope = permissionsOrOptions.encryptionScope;
      this.resource = permissionsOrOptions.resource;
      this.cacheControl = permissionsOrOptions.cacheControl;
      this.contentDisposition = permissionsOrOptions.contentDisposition;
      this.contentEncoding = permissionsOrOptions.contentEncoding;
      this.contentLanguage = permissionsOrOptions.contentLanguage;
      this.contentType = permissionsOrOptions.contentType;
      if (permissionsOrOptions.userDelegationKey) {
        this.signedOid = permissionsOrOptions.userDelegationKey.signedObjectId;
        this.signedTenantId = permissionsOrOptions.userDelegationKey.signedTenantId;
        this.signedStartsOn = permissionsOrOptions.userDelegationKey.signedStartsOn;
        this.signedExpiresOn = permissionsOrOptions.userDelegationKey.signedExpiresOn;
        this.signedService = permissionsOrOptions.userDelegationKey.signedService;
        this.signedVersion = permissionsOrOptions.userDelegationKey.signedVersion;
        this.preauthorizedAgentObjectId = permissionsOrOptions.preauthorizedAgentObjectId;
        this.correlationId = permissionsOrOptions.correlationId;
      }
    } else {
      this.services = services;
      this.resourceTypes = resourceTypes;
      this.expiresOn = expiresOn2;
      this.permissions = permissionsOrOptions;
      this.protocol = protocol;
      this.startsOn = startsOn;
      this.ipRangeInner = ipRange;
      this.encryptionScope = encryptionScope2;
      this.identifier = identifier;
      this.resource = resource;
      this.cacheControl = cacheControl;
      this.contentDisposition = contentDisposition;
      this.contentEncoding = contentEncoding;
      this.contentLanguage = contentLanguage;
      this.contentType = contentType2;
      if (userDelegationKey) {
        this.signedOid = userDelegationKey.signedObjectId;
        this.signedTenantId = userDelegationKey.signedTenantId;
        this.signedStartsOn = userDelegationKey.signedStartsOn;
        this.signedExpiresOn = userDelegationKey.signedExpiresOn;
        this.signedService = userDelegationKey.signedService;
        this.signedVersion = userDelegationKey.signedVersion;
        this.preauthorizedAgentObjectId = preauthorizedAgentObjectId;
        this.correlationId = correlationId;
      }
    }
  }
  /**
   * Optional. IP range allowed for this SAS.
   *
   * @readonly
   */
  get ipRange() {
    if (this.ipRangeInner) {
      return {
        end: this.ipRangeInner.end,
        start: this.ipRangeInner.start
      };
    }
    return void 0;
  }
  /**
   * Encodes all SAS query parameters into a string that can be appended to a URL.
   *
   */
  toString() {
    const params = [
      "sv",
      "ss",
      "srt",
      "spr",
      "st",
      "se",
      "sip",
      "si",
      "ses",
      "skoid",
      "sktid",
      "skt",
      "ske",
      "sks",
      "skv",
      "sr",
      "sp",
      "sig",
      "rscc",
      "rscd",
      "rsce",
      "rscl",
      "rsct",
      "saoid",
      "scid"
    ];
    const queries = [];
    for (const param of params) {
      switch (param) {
        case "sv":
          this.tryAppendQueryParameter(queries, param, this.version);
          break;
        case "ss":
          this.tryAppendQueryParameter(queries, param, this.services);
          break;
        case "srt":
          this.tryAppendQueryParameter(queries, param, this.resourceTypes);
          break;
        case "spr":
          this.tryAppendQueryParameter(queries, param, this.protocol);
          break;
        case "st":
          this.tryAppendQueryParameter(queries, param, this.startsOn ? truncatedISO8061Date(this.startsOn, false) : void 0);
          break;
        case "se":
          this.tryAppendQueryParameter(queries, param, this.expiresOn ? truncatedISO8061Date(this.expiresOn, false) : void 0);
          break;
        case "sip":
          this.tryAppendQueryParameter(queries, param, this.ipRange ? ipRangeToString(this.ipRange) : void 0);
          break;
        case "si":
          this.tryAppendQueryParameter(queries, param, this.identifier);
          break;
        case "ses":
          this.tryAppendQueryParameter(queries, param, this.encryptionScope);
          break;
        case "skoid":
          this.tryAppendQueryParameter(queries, param, this.signedOid);
          break;
        case "sktid":
          this.tryAppendQueryParameter(queries, param, this.signedTenantId);
          break;
        case "skt":
          this.tryAppendQueryParameter(queries, param, this.signedStartsOn ? truncatedISO8061Date(this.signedStartsOn, false) : void 0);
          break;
        case "ske":
          this.tryAppendQueryParameter(queries, param, this.signedExpiresOn ? truncatedISO8061Date(this.signedExpiresOn, false) : void 0);
          break;
        case "sks":
          this.tryAppendQueryParameter(queries, param, this.signedService);
          break;
        case "skv":
          this.tryAppendQueryParameter(queries, param, this.signedVersion);
          break;
        case "sr":
          this.tryAppendQueryParameter(queries, param, this.resource);
          break;
        case "sp":
          this.tryAppendQueryParameter(queries, param, this.permissions);
          break;
        case "sig":
          this.tryAppendQueryParameter(queries, param, this.signature);
          break;
        case "rscc":
          this.tryAppendQueryParameter(queries, param, this.cacheControl);
          break;
        case "rscd":
          this.tryAppendQueryParameter(queries, param, this.contentDisposition);
          break;
        case "rsce":
          this.tryAppendQueryParameter(queries, param, this.contentEncoding);
          break;
        case "rscl":
          this.tryAppendQueryParameter(queries, param, this.contentLanguage);
          break;
        case "rsct":
          this.tryAppendQueryParameter(queries, param, this.contentType);
          break;
        case "saoid":
          this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);
          break;
        case "scid":
          this.tryAppendQueryParameter(queries, param, this.correlationId);
          break;
      }
    }
    return queries.join("&");
  }
  /**
   * A private helper method used to filter and append query key/value pairs into an array.
   *
   * @param queries -
   * @param key -
   * @param value -
   */
  tryAppendQueryParameter(queries, key, value) {
    if (!value) {
      return;
    }
    key = encodeURIComponent(key);
    value = encodeURIComponent(value);
    if (key.length > 0 && value.length > 0) {
      queries.push(`${key}=${value}`);
    }
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js
function generateBlobSASQueryParameters(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {
  const version2 = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;
  const sharedKeyCredential = sharedKeyCredentialOrUserDelegationKey instanceof StorageSharedKeyCredential ? sharedKeyCredentialOrUserDelegationKey : void 0;
  let userDelegationKeyCredential;
  if (sharedKeyCredential === void 0 && accountName !== void 0) {
    userDelegationKeyCredential = new UserDelegationKeyCredential(accountName, sharedKeyCredentialOrUserDelegationKey);
  }
  if (sharedKeyCredential === void 0 && userDelegationKeyCredential === void 0) {
    throw TypeError("Invalid sharedKeyCredential, userDelegationKey or accountName.");
  }
  if (version2 >= "2020-12-06") {
    if (sharedKeyCredential !== void 0) {
      return generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential);
    } else {
      return generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential);
    }
  }
  if (version2 >= "2018-11-09") {
    if (sharedKeyCredential !== void 0) {
      return generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential);
    } else {
      if (version2 >= "2020-02-10") {
        return generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential);
      } else {
        return generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential);
      }
    }
  }
  if (version2 >= "2015-04-05") {
    if (sharedKeyCredential !== void 0) {
      return generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential);
    } else {
      throw new RangeError("'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.");
    }
  }
  throw new RangeError("'version' must be >= '2015-04-05'.");
}
function generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
  }
  let resource = "c";
  if (blobSASSignatureValues.blobName) {
    resource = "b";
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    blobSASSignatureValues.identifier,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "",
    blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "",
    blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "",
    blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "",
    blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : ""
  ].join("\n");
  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType);
}
function generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
  }
  let resource = "c";
  let timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    blobSASSignatureValues.identifier,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    resource,
    timestamp,
    blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "",
    blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "",
    blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "",
    blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "",
    blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : ""
  ].join("\n");
  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType);
}
function generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
  }
  let resource = "c";
  let timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    blobSASSignatureValues.identifier,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    resource,
    timestamp,
    blobSASSignatureValues.encryptionScope,
    blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "",
    blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "",
    blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "",
    blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "",
    blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : ""
  ].join("\n");
  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, void 0, void 0, void 0, blobSASSignatureValues.encryptionScope);
}
function generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
  }
  let resource = "c";
  let timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    userDelegationKeyCredential.userDelegationKey.signedObjectId,
    userDelegationKeyCredential.userDelegationKey.signedTenantId,
    userDelegationKeyCredential.userDelegationKey.signedStartsOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedService,
    userDelegationKeyCredential.userDelegationKey.signedVersion,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    resource,
    timestamp,
    blobSASSignatureValues.cacheControl,
    blobSASSignatureValues.contentDisposition,
    blobSASSignatureValues.contentEncoding,
    blobSASSignatureValues.contentLanguage,
    blobSASSignatureValues.contentType
  ].join("\n");
  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
  return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey);
}
function generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
  }
  let resource = "c";
  let timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    userDelegationKeyCredential.userDelegationKey.signedObjectId,
    userDelegationKeyCredential.userDelegationKey.signedTenantId,
    userDelegationKeyCredential.userDelegationKey.signedStartsOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedService,
    userDelegationKeyCredential.userDelegationKey.signedVersion,
    blobSASSignatureValues.preauthorizedAgentObjectId,
    void 0,
    blobSASSignatureValues.correlationId,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    resource,
    timestamp,
    blobSASSignatureValues.cacheControl,
    blobSASSignatureValues.contentDisposition,
    blobSASSignatureValues.contentEncoding,
    blobSASSignatureValues.contentLanguage,
    blobSASSignatureValues.contentType
  ].join("\n");
  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
  return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId);
}
function generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
  }
  let resource = "c";
  let timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    userDelegationKeyCredential.userDelegationKey.signedObjectId,
    userDelegationKeyCredential.userDelegationKey.signedTenantId,
    userDelegationKeyCredential.userDelegationKey.signedStartsOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedService,
    userDelegationKeyCredential.userDelegationKey.signedVersion,
    blobSASSignatureValues.preauthorizedAgentObjectId,
    void 0,
    blobSASSignatureValues.correlationId,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    resource,
    timestamp,
    blobSASSignatureValues.encryptionScope,
    blobSASSignatureValues.cacheControl,
    blobSASSignatureValues.contentDisposition,
    blobSASSignatureValues.contentEncoding,
    blobSASSignatureValues.contentLanguage,
    blobSASSignatureValues.contentType
  ].join("\n");
  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
  return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId, blobSASSignatureValues.encryptionScope);
}
function getCanonicalName(accountName, containerName, blobName) {
  const elements = [`/blob/${accountName}/${containerName}`];
  if (blobName) {
    elements.push(`/${blobName}`);
  }
  return elements.join("");
}
function SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues) {
  const version2 = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;
  if (blobSASSignatureValues.snapshotTime && version2 < "2018-11-09") {
    throw RangeError("'version' must be >= '2018-11-09' when providing 'snapshotTime'.");
  }
  if (blobSASSignatureValues.blobName === void 0 && blobSASSignatureValues.snapshotTime) {
    throw RangeError("Must provide 'blobName' when providing 'snapshotTime'.");
  }
  if (blobSASSignatureValues.versionId && version2 < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when providing 'versionId'.");
  }
  if (blobSASSignatureValues.blobName === void 0 && blobSASSignatureValues.versionId) {
    throw RangeError("Must provide 'blobName' when providing 'versionId'.");
  }
  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.setImmutabilityPolicy && version2 < "2020-08-04") {
    throw RangeError("'version' must be >= '2020-08-04' when provided 'i' permission.");
  }
  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.deleteVersion && version2 < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when providing 'x' permission.");
  }
  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.permanentDelete && version2 < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when providing 'y' permission.");
  }
  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.tag && version2 < "2019-12-12") {
    throw RangeError("'version' must be >= '2019-12-12' when providing 't' permission.");
  }
  if (version2 < "2020-02-10" && blobSASSignatureValues.permissions && (blobSASSignatureValues.permissions.move || blobSASSignatureValues.permissions.execute)) {
    throw RangeError("'version' must be >= '2020-02-10' when providing the 'm' or 'e' permission.");
  }
  if (version2 < "2021-04-10" && blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.filterByTags) {
    throw RangeError("'version' must be >= '2021-04-10' when providing the 'f' permission.");
  }
  if (version2 < "2020-02-10" && (blobSASSignatureValues.preauthorizedAgentObjectId || blobSASSignatureValues.correlationId)) {
    throw RangeError("'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId' or 'correlationId'.");
  }
  if (blobSASSignatureValues.encryptionScope && version2 < "2020-12-06") {
    throw RangeError("'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.");
  }
  blobSASSignatureValues.version = version2;
  return blobSASSignatureValues;
}

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js
var BlobLeaseClient = class {
  /**
   * Creates an instance of BlobLeaseClient.
   * @param client - The client to make the lease operation requests.
   * @param leaseId - Initial proposed lease id.
   */
  constructor(client, leaseId2) {
    const clientContext = new StorageClientContext(client.url, client.pipeline.toServiceClientOptions());
    this._url = client.url;
    if (client.name === void 0) {
      this._isContainer = true;
      this._containerOrBlobOperation = new Container(clientContext);
    } else {
      this._isContainer = false;
      this._containerOrBlobOperation = new Blob2(clientContext);
    }
    if (!leaseId2) {
      leaseId2 = generateUuid();
    }
    this._leaseId = leaseId2;
  }
  /**
   * Gets the lease Id.
   *
   * @readonly
   */
  get leaseId() {
    return this._leaseId;
  }
  /**
   * Gets the url.
   *
   * @readonly
   */
  get url() {
    return this._url;
  }
  /**
   * Establishes and manages a lock on a container for delete operations, or on a blob
   * for write and delete operations.
   * The lock duration can be 15 to 60 seconds, or can be infinite.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
   * and
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
   *
   * @param duration - Must be between 15 to 60 seconds, or infinite (-1)
   * @param options - option to configure lease management operations.
   * @returns Response data for acquire lease operation.
   */
  async acquireLease(duration2, options = {}) {
    var _a3, _b2, _c2, _d2, _e, _f;
    const { span, updatedOptions } = createSpan2("BlobLeaseClient-acquireLease", options);
    if (this._isContainer && (((_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.ifMatch) && ((_b2 = options.conditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch) !== ETagNone || ((_c2 = options.conditions) === null || _c2 === void 0 ? void 0 : _c2.ifNoneMatch) && ((_d2 = options.conditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
      throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
    }
    try {
      return await this._containerOrBlobOperation.acquireLease(Object.assign({ abortSignal: options.abortSignal, duration: duration2, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions }), proposedLeaseId: this._leaseId }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * To change the ID of the lease.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
   * and
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
   *
   * @param proposedLeaseId - the proposed new lease Id.
   * @param options - option to configure lease management operations.
   * @returns Response data for change lease operation.
   */
  async changeLease(proposedLeaseId2, options = {}) {
    var _a3, _b2, _c2, _d2, _e, _f;
    const { span, updatedOptions } = createSpan2("BlobLeaseClient-changeLease", options);
    if (this._isContainer && (((_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.ifMatch) && ((_b2 = options.conditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch) !== ETagNone || ((_c2 = options.conditions) === null || _c2 === void 0 ? void 0 : _c2.ifNoneMatch) && ((_d2 = options.conditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
      throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
    }
    try {
      const response = await this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId2, Object.assign({ abortSignal: options.abortSignal, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions)));
      this._leaseId = proposedLeaseId2;
      return response;
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * To free the lease if it is no longer needed so that another client may
   * immediately acquire a lease against the container or the blob.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
   * and
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
   *
   * @param options - option to configure lease management operations.
   * @returns Response data for release lease operation.
   */
  async releaseLease(options = {}) {
    var _a3, _b2, _c2, _d2, _e, _f;
    const { span, updatedOptions } = createSpan2("BlobLeaseClient-releaseLease", options);
    if (this._isContainer && (((_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.ifMatch) && ((_b2 = options.conditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch) !== ETagNone || ((_c2 = options.conditions) === null || _c2 === void 0 ? void 0 : _c2.ifNoneMatch) && ((_d2 = options.conditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
      throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
    }
    try {
      return await this._containerOrBlobOperation.releaseLease(this._leaseId, Object.assign({ abortSignal: options.abortSignal, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * To renew the lease.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
   * and
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
   *
   * @param options - Optional option to configure lease management operations.
   * @returns Response data for renew lease operation.
   */
  async renewLease(options = {}) {
    var _a3, _b2, _c2, _d2, _e, _f;
    const { span, updatedOptions } = createSpan2("BlobLeaseClient-renewLease", options);
    if (this._isContainer && (((_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.ifMatch) && ((_b2 = options.conditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch) !== ETagNone || ((_c2 = options.conditions) === null || _c2 === void 0 ? void 0 : _c2.ifNoneMatch) && ((_d2 = options.conditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
      throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
    }
    try {
      return await this._containerOrBlobOperation.renewLease(this._leaseId, Object.assign({ abortSignal: options.abortSignal, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * To end the lease but ensure that another client cannot acquire a new lease
   * until the current lease period has expired.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
   * and
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
   *
   * @param breakPeriod - Break period
   * @param options - Optional options to configure lease management operations.
   * @returns Response data for break lease operation.
   */
  async breakLease(breakPeriod2, options = {}) {
    var _a3, _b2, _c2, _d2, _e, _f;
    const { span, updatedOptions } = createSpan2("BlobLeaseClient-breakLease", options);
    if (this._isContainer && (((_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.ifMatch) && ((_b2 = options.conditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch) !== ETagNone || ((_c2 = options.conditions) === null || _c2 === void 0 ? void 0 : _c2.ifNoneMatch) && ((_d2 = options.conditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
      throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
    }
    try {
      const operationOptions = Object.assign({ abortSignal: options.abortSignal, breakPeriod: breakPeriod2, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions));
      return await this._containerOrBlobOperation.breakLease(operationOptions);
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.browser.js
var BlobDownloadResponse = 1;

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.browser.js
var BlobQueryResponse = class {
  /**
   * Creates an instance of BlobQueryResponse.
   *
   * @param originalResponse -
   * @param options -
   */
  constructor(originalResponse, _options = {}) {
    this.originalResponse = originalResponse;
  }
  /**
   * Indicates that the service supports
   * requests for partial file content.
   *
   * @readonly
   */
  get acceptRanges() {
    return this.originalResponse.acceptRanges;
  }
  /**
   * Returns if it was previously specified
   * for the file.
   *
   * @readonly
   */
  get cacheControl() {
    return this.originalResponse.cacheControl;
  }
  /**
   * Returns the value that was specified
   * for the 'x-ms-content-disposition' header and specifies how to process the
   * response.
   *
   * @readonly
   */
  get contentDisposition() {
    return this.originalResponse.contentDisposition;
  }
  /**
   * Returns the value that was specified
   * for the Content-Encoding request header.
   *
   * @readonly
   */
  get contentEncoding() {
    return this.originalResponse.contentEncoding;
  }
  /**
   * Returns the value that was specified
   * for the Content-Language request header.
   *
   * @readonly
   */
  get contentLanguage() {
    return this.originalResponse.contentLanguage;
  }
  /**
   * The current sequence number for a
   * page blob. This header is not returned for block blobs or append blobs.
   *
   * @readonly
   */
  get blobSequenceNumber() {
    return this.originalResponse.blobSequenceNumber;
  }
  /**
   * The blob's type. Possible values include:
   * 'BlockBlob', 'PageBlob', 'AppendBlob'.
   *
   * @readonly
   */
  get blobType() {
    return this.originalResponse.blobType;
  }
  /**
   * The number of bytes present in the
   * response body.
   *
   * @readonly
   */
  get contentLength() {
    return this.originalResponse.contentLength;
  }
  /**
   * If the file has an MD5 hash and the
   * request is to read the full file, this response header is returned so that
   * the client can check for message content integrity. If the request is to
   * read a specified range and the 'x-ms-range-get-content-md5' is set to
   * true, then the request returns an MD5 hash for the range, as long as the
   * range size is less than or equal to 4 MB. If neither of these sets of
   * conditions is true, then no value is returned for the 'Content-MD5'
   * header.
   *
   * @readonly
   */
  get contentMD5() {
    return this.originalResponse.contentMD5;
  }
  /**
   * Indicates the range of bytes returned if
   * the client requested a subset of the file by setting the Range request
   * header.
   *
   * @readonly
   */
  get contentRange() {
    return this.originalResponse.contentRange;
  }
  /**
   * The content type specified for the file.
   * The default content type is 'application/octet-stream'
   *
   * @readonly
   */
  get contentType() {
    return this.originalResponse.contentType;
  }
  /**
   * Conclusion time of the last attempted
   * Copy File operation where this file was the destination file. This value
   * can specify the time of a completed, aborted, or failed copy attempt.
   *
   * @readonly
   */
  get copyCompletedOn() {
    return void 0;
  }
  /**
   * String identifier for the last attempted Copy
   * File operation where this file was the destination file.
   *
   * @readonly
   */
  get copyId() {
    return this.originalResponse.copyId;
  }
  /**
   * Contains the number of bytes copied and
   * the total bytes in the source in the last attempted Copy File operation
   * where this file was the destination file. Can show between 0 and
   * Content-Length bytes copied.
   *
   * @readonly
   */
  get copyProgress() {
    return this.originalResponse.copyProgress;
  }
  /**
   * URL up to 2KB in length that specifies the
   * source file used in the last attempted Copy File operation where this file
   * was the destination file.
   *
   * @readonly
   */
  get copySource() {
    return this.originalResponse.copySource;
  }
  /**
   * State of the copy operation
   * identified by 'x-ms-copy-id'. Possible values include: 'pending',
   * 'success', 'aborted', 'failed'
   *
   * @readonly
   */
  get copyStatus() {
    return this.originalResponse.copyStatus;
  }
  /**
   * Only appears when
   * x-ms-copy-status is failed or pending. Describes cause of fatal or
   * non-fatal copy operation failure.
   *
   * @readonly
   */
  get copyStatusDescription() {
    return this.originalResponse.copyStatusDescription;
  }
  /**
   * When a blob is leased,
   * specifies whether the lease is of infinite or fixed duration. Possible
   * values include: 'infinite', 'fixed'.
   *
   * @readonly
   */
  get leaseDuration() {
    return this.originalResponse.leaseDuration;
  }
  /**
   * Lease state of the blob. Possible
   * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.
   *
   * @readonly
   */
  get leaseState() {
    return this.originalResponse.leaseState;
  }
  /**
   * The current lease status of the
   * blob. Possible values include: 'locked', 'unlocked'.
   *
   * @readonly
   */
  get leaseStatus() {
    return this.originalResponse.leaseStatus;
  }
  /**
   * A UTC date/time value generated by the service that
   * indicates the time at which the response was initiated.
   *
   * @readonly
   */
  get date() {
    return this.originalResponse.date;
  }
  /**
   * The number of committed blocks
   * present in the blob. This header is returned only for append blobs.
   *
   * @readonly
   */
  get blobCommittedBlockCount() {
    return this.originalResponse.blobCommittedBlockCount;
  }
  /**
   * The ETag contains a value that you can use to
   * perform operations conditionally, in quotes.
   *
   * @readonly
   */
  get etag() {
    return this.originalResponse.etag;
  }
  /**
   * The error code.
   *
   * @readonly
   */
  get errorCode() {
    return this.originalResponse.errorCode;
  }
  /**
   * The value of this header is set to
   * true if the file data and application metadata are completely encrypted
   * using the specified algorithm. Otherwise, the value is set to false (when
   * the file is unencrypted, or if only parts of the file/application metadata
   * are encrypted).
   *
   * @readonly
   */
  get isServerEncrypted() {
    return this.originalResponse.isServerEncrypted;
  }
  /**
   * If the blob has a MD5 hash, and if
   * request contains range header (Range or x-ms-range), this response header
   * is returned with the value of the whole blob's MD5 value. This value may
   * or may not be equal to the value returned in Content-MD5 header, with the
   * latter calculated from the requested range.
   *
   * @readonly
   */
  get blobContentMD5() {
    return this.originalResponse.blobContentMD5;
  }
  /**
   * Returns the date and time the file was last
   * modified. Any operation that modifies the file or its properties updates
   * the last modified time.
   *
   * @readonly
   */
  get lastModified() {
    return this.originalResponse.lastModified;
  }
  /**
   * A name-value pair
   * to associate with a file storage object.
   *
   * @readonly
   */
  get metadata() {
    return this.originalResponse.metadata;
  }
  /**
   * This header uniquely identifies the request
   * that was made and can be used for troubleshooting the request.
   *
   * @readonly
   */
  get requestId() {
    return this.originalResponse.requestId;
  }
  /**
   * If a client request id header is sent in the request, this header will be present in the
   * response with the same value.
   *
   * @readonly
   */
  get clientRequestId() {
    return this.originalResponse.clientRequestId;
  }
  /**
   * Indicates the version of the File service used
   * to execute the request.
   *
   * @readonly
   */
  get version() {
    return this.originalResponse.version;
  }
  /**
   * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned
   * when the blob was encrypted with a customer-provided key.
   *
   * @readonly
   */
  get encryptionKeySha256() {
    return this.originalResponse.encryptionKeySha256;
  }
  /**
   * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to
   * true, then the request returns a crc64 for the range, as long as the range size is less than
   * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is
   * specified in the same request, it will fail with 400(Bad Request)
   */
  get contentCrc64() {
    return this.originalResponse.contentCrc64;
  }
  /**
   * The response body as a browser Blob.
   * Always undefined in node.js.
   *
   * @readonly
   */
  get blobBody() {
    throw Error(`Quick query in browser is not supported yet.`);
  }
  /**
   * The response body as a node.js Readable stream.
   * Always undefined in the browser.
   *
   * @readonly
   */
  get readableStreamBody() {
    return void 0;
  }
  /**
   * The HTTP response.
   */
  get _response() {
    return this.originalResponse._response;
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js
var BlockBlobTier;
(function(BlockBlobTier2) {
  BlockBlobTier2["Hot"] = "Hot";
  BlockBlobTier2["Cool"] = "Cool";
  BlockBlobTier2["Cold"] = "Cold";
  BlockBlobTier2["Archive"] = "Archive";
})(BlockBlobTier || (BlockBlobTier = {}));
var PremiumPageBlobTier;
(function(PremiumPageBlobTier2) {
  PremiumPageBlobTier2["P4"] = "P4";
  PremiumPageBlobTier2["P6"] = "P6";
  PremiumPageBlobTier2["P10"] = "P10";
  PremiumPageBlobTier2["P15"] = "P15";
  PremiumPageBlobTier2["P20"] = "P20";
  PremiumPageBlobTier2["P30"] = "P30";
  PremiumPageBlobTier2["P40"] = "P40";
  PremiumPageBlobTier2["P50"] = "P50";
  PremiumPageBlobTier2["P60"] = "P60";
  PremiumPageBlobTier2["P70"] = "P70";
  PremiumPageBlobTier2["P80"] = "P80";
})(PremiumPageBlobTier || (PremiumPageBlobTier = {}));
function toAccessTier(tier2) {
  if (tier2 === void 0) {
    return void 0;
  }
  return tier2;
}
function ensureCpkIfSpecified(cpk, isHttps) {
  if (cpk && !isHttps) {
    throw new RangeError("Customer-provided encryption key must be used over HTTPS.");
  }
  if (cpk && !cpk.encryptionAlgorithm) {
    cpk.encryptionAlgorithm = EncryptionAlgorithmAES25;
  }
}
var StorageBlobAudience;
(function(StorageBlobAudience2) {
  StorageBlobAudience2["StorageOAuthScopes"] = "https://storage.azure.com/.default";
  StorageBlobAudience2["DiskComputeOAuthScopes"] = "https://disk.compute.azure.com/.default";
})(StorageBlobAudience || (StorageBlobAudience = {}));

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js
function rangeResponseFromModel(response) {
  const pageRange = (response._response.parsedBody.pageRange || []).map((x) => ({
    offset: x.start,
    count: x.end - x.start
  }));
  const clearRange = (response._response.parsedBody.clearRange || []).map((x) => ({
    offset: x.start,
    count: x.end - x.start
  }));
  return Object.assign(Object.assign({}, response), {
    pageRange,
    clearRange,
    _response: Object.assign(Object.assign({}, response._response), { parsedBody: {
      pageRange,
      clearRange
    } })
  });
}

// node_modules/@azure/core-lro/dist-esm/src/logger.js
var logger3 = createClientLogger("core-lro");

// node_modules/@azure/core-lro/dist-esm/src/legacy/poller.js
var PollerStoppedError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "PollerStoppedError";
    Object.setPrototypeOf(this, PollerStoppedError.prototype);
  }
};
var PollerCancelledError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "PollerCancelledError";
    Object.setPrototypeOf(this, PollerCancelledError.prototype);
  }
};
var Poller = class {
  /**
   * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.
   *
   * When writing an implementation of a Poller, this implementation needs to deal with the initialization
   * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's
   * operation has already been defined, at least its basic properties. The code below shows how to approach
   * the definition of the constructor of a new custom poller.
   *
   * ```ts
   * export class MyPoller extends Poller<MyOperationState, string> {
   *   constructor({
   *     // Anything you might need outside of the basics
   *   }) {
   *     let state: MyOperationState = {
   *       privateProperty: private,
   *       publicProperty: public,
   *     };
   *
   *     const operation = {
   *       state,
   *       update,
   *       cancel,
   *       toString
   *     }
   *
   *     // Sending the operation to the parent's constructor.
   *     super(operation);
   *
   *     // You can assign more local properties here.
   *   }
   * }
   * ```
   *
   * Inside of this constructor, a new promise is created. This will be used to
   * tell the user when the poller finishes (see `pollUntilDone()`). The promise's
   * resolve and reject methods are also used internally to control when to resolve
   * or reject anyone waiting for the poller to finish.
   *
   * The constructor of a custom implementation of a poller is where any serialized version of
   * a previous poller's operation should be deserialized into the operation sent to the
   * base constructor. For example:
   *
   * ```ts
   * export class MyPoller extends Poller<MyOperationState, string> {
   *   constructor(
   *     baseOperation: string | undefined
   *   ) {
   *     let state: MyOperationState = {};
   *     if (baseOperation) {
   *       state = {
   *         ...JSON.parse(baseOperation).state,
   *         ...state
   *       };
   *     }
   *     const operation = {
   *       state,
   *       // ...
   *     }
   *     super(operation);
   *   }
   * }
   * ```
   *
   * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.
   */
  constructor(operation) {
    this.resolveOnUnsuccessful = false;
    this.stopped = true;
    this.pollProgressCallbacks = [];
    this.operation = operation;
    this.promise = new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;
    });
    this.promise.catch(() => {
    });
  }
  /**
   * Starts a loop that will break only if the poller is done
   * or if the poller is stopped.
   */
  async startPolling(pollOptions = {}) {
    if (this.stopped) {
      this.stopped = false;
    }
    while (!this.isStopped() && !this.isDone()) {
      await this.poll(pollOptions);
      await this.delay();
    }
  }
  /**
   * pollOnce does one polling, by calling to the update method of the underlying
   * poll operation to make any relevant change effective.
   *
   * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
   *
   * @param options - Optional properties passed to the operation's update method.
   */
  async pollOnce(options = {}) {
    if (!this.isDone()) {
      this.operation = await this.operation.update({
        abortSignal: options.abortSignal,
        fireProgress: this.fireProgress.bind(this)
      });
    }
    this.processUpdatedState();
  }
  /**
   * fireProgress calls the functions passed in via onProgress the method of the poller.
   *
   * It loops over all of the callbacks received from onProgress, and executes them, sending them
   * the current operation state.
   *
   * @param state - The current operation state.
   */
  fireProgress(state) {
    for (const callback of this.pollProgressCallbacks) {
      callback(state);
    }
  }
  /**
   * Invokes the underlying operation's cancel method.
   */
  async cancelOnce(options = {}) {
    this.operation = await this.operation.cancel(options);
  }
  /**
   * Returns a promise that will resolve once a single polling request finishes.
   * It does this by calling the update method of the Poller's operation.
   *
   * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
   *
   * @param options - Optional properties passed to the operation's update method.
   */
  poll(options = {}) {
    if (!this.pollOncePromise) {
      this.pollOncePromise = this.pollOnce(options);
      const clearPollOncePromise = () => {
        this.pollOncePromise = void 0;
      };
      this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);
    }
    return this.pollOncePromise;
  }
  processUpdatedState() {
    if (this.operation.state.error) {
      this.stopped = true;
      if (!this.resolveOnUnsuccessful) {
        this.reject(this.operation.state.error);
        throw this.operation.state.error;
      }
    }
    if (this.operation.state.isCancelled) {
      this.stopped = true;
      if (!this.resolveOnUnsuccessful) {
        const error = new PollerCancelledError("Operation was canceled");
        this.reject(error);
        throw error;
      }
    }
    if (this.isDone() && this.resolve) {
      this.resolve(this.getResult());
    }
  }
  /**
   * Returns a promise that will resolve once the underlying operation is completed.
   */
  async pollUntilDone(pollOptions = {}) {
    if (this.stopped) {
      this.startPolling(pollOptions).catch(this.reject);
    }
    this.processUpdatedState();
    return this.promise;
  }
  /**
   * Invokes the provided callback after each polling is completed,
   * sending the current state of the poller's operation.
   *
   * It returns a method that can be used to stop receiving updates on the given callback function.
   */
  onProgress(callback) {
    this.pollProgressCallbacks.push(callback);
    return () => {
      this.pollProgressCallbacks = this.pollProgressCallbacks.filter((c) => c !== callback);
    };
  }
  /**
   * Returns true if the poller has finished polling.
   */
  isDone() {
    const state = this.operation.state;
    return Boolean(state.isCompleted || state.isCancelled || state.error);
  }
  /**
   * Stops the poller from continuing to poll.
   */
  stopPolling() {
    if (!this.stopped) {
      this.stopped = true;
      if (this.reject) {
        this.reject(new PollerStoppedError("This poller is already stopped"));
      }
    }
  }
  /**
   * Returns true if the poller is stopped.
   */
  isStopped() {
    return this.stopped;
  }
  /**
   * Attempts to cancel the underlying operation.
   *
   * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
   *
   * If it's called again before it finishes, it will throw an error.
   *
   * @param options - Optional properties passed to the operation's update method.
   */
  cancelOperation(options = {}) {
    if (!this.cancelPromise) {
      this.cancelPromise = this.cancelOnce(options);
    } else if (options.abortSignal) {
      throw new Error("A cancel request is currently pending");
    }
    return this.cancelPromise;
  }
  /**
   * Returns the state of the operation.
   *
   * Even though TState will be the same type inside any of the methods of any extension of the Poller class,
   * implementations of the pollers can customize what's shared with the public by writing their own
   * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller
   * and a public type representing a safe to share subset of the properties of the internal state.
   * Their definition of getOperationState can then return their public type.
   *
   * Example:
   *
   * ```ts
   * // Let's say we have our poller's operation state defined as:
   * interface MyOperationState extends PollOperationState<ResultType> {
   *   privateProperty?: string;
   *   publicProperty?: string;
   * }
   *
   * // To allow us to have a true separation of public and private state, we have to define another interface:
   * interface PublicState extends PollOperationState<ResultType> {
   *   publicProperty?: string;
   * }
   *
   * // Then, we define our Poller as follows:
   * export class MyPoller extends Poller<MyOperationState, ResultType> {
   *   // ... More content is needed here ...
   *
   *   public getOperationState(): PublicState {
   *     const state: PublicState = this.operation.state;
   *     return {
   *       // Properties from PollOperationState<TResult>
   *       isStarted: state.isStarted,
   *       isCompleted: state.isCompleted,
   *       isCancelled: state.isCancelled,
   *       error: state.error,
   *       result: state.result,
   *
   *       // The only other property needed by PublicState.
   *       publicProperty: state.publicProperty
   *     }
   *   }
   * }
   * ```
   *
   * You can see this in the tests of this repository, go to the file:
   * `../test/utils/testPoller.ts`
   * and look for the getOperationState implementation.
   */
  getOperationState() {
    return this.operation.state;
  }
  /**
   * Returns the result value of the operation,
   * regardless of the state of the poller.
   * It can return undefined or an incomplete form of the final TResult value
   * depending on the implementation.
   */
  getResult() {
    const state = this.operation.state;
    return state.result;
  }
  /**
   * Returns a serialized version of the poller's operation
   * by invoking the operation's toString method.
   */
  toString() {
    return this.operation.toString();
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js
var BlobBeginCopyFromUrlPoller = class extends Poller {
  constructor(options) {
    const { blobClient, copySource: copySource2, intervalInMs = 15e3, onProgress, resumeFrom, startCopyFromURLOptions } = options;
    let state;
    if (resumeFrom) {
      state = JSON.parse(resumeFrom).state;
    }
    const operation = makeBlobBeginCopyFromURLPollOperation(Object.assign(Object.assign({}, state), {
      blobClient,
      copySource: copySource2,
      startCopyFromURLOptions
    }));
    super(operation);
    if (typeof onProgress === "function") {
      this.onProgress(onProgress);
    }
    this.intervalInMs = intervalInMs;
  }
  delay() {
    return delay(this.intervalInMs);
  }
};
var cancel = async function cancel2(options = {}) {
  const state = this.state;
  const { copyId: copyId2 } = state;
  if (state.isCompleted) {
    return makeBlobBeginCopyFromURLPollOperation(state);
  }
  if (!copyId2) {
    state.isCancelled = true;
    return makeBlobBeginCopyFromURLPollOperation(state);
  }
  await state.blobClient.abortCopyFromURL(copyId2, {
    abortSignal: options.abortSignal
  });
  state.isCancelled = true;
  return makeBlobBeginCopyFromURLPollOperation(state);
};
var update = async function update2(options = {}) {
  const state = this.state;
  const { blobClient, copySource: copySource2, startCopyFromURLOptions } = state;
  if (!state.isStarted) {
    state.isStarted = true;
    const result = await blobClient.startCopyFromURL(copySource2, startCopyFromURLOptions);
    state.copyId = result.copyId;
    if (result.copyStatus === "success") {
      state.result = result;
      state.isCompleted = true;
    }
  } else if (!state.isCompleted) {
    try {
      const result = await state.blobClient.getProperties({ abortSignal: options.abortSignal });
      const { copyStatus, copyProgress } = result;
      const prevCopyProgress = state.copyProgress;
      if (copyProgress) {
        state.copyProgress = copyProgress;
      }
      if (copyStatus === "pending" && copyProgress !== prevCopyProgress && typeof options.fireProgress === "function") {
        options.fireProgress(state);
      } else if (copyStatus === "success") {
        state.result = result;
        state.isCompleted = true;
      } else if (copyStatus === "failed") {
        state.error = new Error(`Blob copy failed with reason: "${result.copyStatusDescription || "unknown"}"`);
        state.isCompleted = true;
      }
    } catch (err) {
      state.error = err;
      state.isCompleted = true;
    }
  }
  return makeBlobBeginCopyFromURLPollOperation(state);
};
var toString = function toString2() {
  return JSON.stringify({ state: this.state }, (key, value) => {
    if (key === "blobClient") {
      return void 0;
    }
    return value;
  });
};
function makeBlobBeginCopyFromURLPollOperation(state) {
  return {
    state: Object.assign({}, state),
    cancel,
    toString,
    update
  };
}

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js
function rangeToString(iRange) {
  if (iRange.offset < 0) {
    throw new RangeError(`Range.offset cannot be smaller than 0.`);
  }
  if (iRange.count && iRange.count <= 0) {
    throw new RangeError(`Range.count must be larger than 0. Leave it undefined if you want a range from offset to the end.`);
  }
  return iRange.count ? `bytes=${iRange.offset}-${iRange.offset + iRange.count - 1}` : `bytes=${iRange.offset}-`;
}

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js
var import_events = __toESM(require_events());
var BatchStates;
(function(BatchStates2) {
  BatchStates2[BatchStates2["Good"] = 0] = "Good";
  BatchStates2[BatchStates2["Error"] = 1] = "Error";
})(BatchStates || (BatchStates = {}));
var Batch = class {
  /**
   * Creates an instance of Batch.
   * @param concurrency -
   */
  constructor(concurrency = 5) {
    this.actives = 0;
    this.completed = 0;
    this.offset = 0;
    this.operations = [];
    this.state = BatchStates.Good;
    if (concurrency < 1) {
      throw new RangeError("concurrency must be larger than 0");
    }
    this.concurrency = concurrency;
    this.emitter = new import_events.EventEmitter();
  }
  /**
   * Add a operation into queue.
   *
   * @param operation -
   */
  addOperation(operation) {
    this.operations.push(async () => {
      try {
        this.actives++;
        await operation();
        this.actives--;
        this.completed++;
        this.parallelExecute();
      } catch (error) {
        this.emitter.emit("error", error);
      }
    });
  }
  /**
   * Start execute operations in the queue.
   *
   */
  async do() {
    if (this.operations.length === 0) {
      return Promise.resolve();
    }
    this.parallelExecute();
    return new Promise((resolve, reject) => {
      this.emitter.on("finish", resolve);
      this.emitter.on("error", (error) => {
        this.state = BatchStates.Error;
        reject(error);
      });
    });
  }
  /**
   * Get next operation to be executed. Return null when reaching ends.
   *
   */
  nextOperation() {
    if (this.offset < this.operations.length) {
      return this.operations[this.offset++];
    }
    return null;
  }
  /**
   * Start execute operations. One one the most important difference between
   * this method with do() is that do() wraps as an sync method.
   *
   */
  parallelExecute() {
    if (this.state === BatchStates.Error) {
      return;
    }
    if (this.completed >= this.operations.length) {
      this.emitter.emit("finish");
      return;
    }
    while (this.actives < this.concurrency) {
      const operation = this.nextOperation();
      if (operation) {
        operation();
      } else {
        return;
      }
    }
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.browser.js
var BufferScheduler = class {
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js
async function blobToString(blob) {
  const fileReader = new FileReader();
  return new Promise((resolve, reject) => {
    fileReader.onloadend = (ev) => {
      resolve(ev.target.result);
    };
    fileReader.onerror = reject;
    fileReader.readAsText(blob);
  });
}
function streamToBuffer() {
}
function readStreamToLocalFile() {
}
var fsStat = function stat() {
};
var fsCreateReadStream = function createReadStream() {
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js
var BlobClient = class extends StorageClient {
  constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
    options = options || {};
    let pipeline;
    let url2;
    if (isPipelineLike(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      options = blobNameOrOptions;
      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      url2 = urlOrConnectionString;
      if (blobNameOrOptions && typeof blobNameOrOptions !== "string") {
        options = blobNameOrOptions;
      }
      pipeline = newPipeline(new AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
      const containerName = credentialOrPipelineOrContainerName;
      const blobName = blobNameOrOptions;
      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);
      if (extractedCreds.kind === "AccountConnString") {
        if (isNode) {
          const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
          if (!options.proxyOptions) {
            options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
          }
          pipeline = newPipeline(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
        pipeline = newPipeline(new AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName and blobName parameters");
    }
    super(url2, pipeline);
    ({ blobName: this._name, containerName: this._containerName } = this.getBlobAndContainerNamesFromUrl());
    this.blobContext = new Blob2(this.storageClientContext);
    this._snapshot = getURLParameter(this.url, URLConstants.Parameters.SNAPSHOT);
    this._versionId = getURLParameter(this.url, URLConstants.Parameters.VERSIONID);
  }
  /**
   * The name of the blob.
   */
  get name() {
    return this._name;
  }
  /**
   * The name of the storage container the blob is associated with.
   */
  get containerName() {
    return this._containerName;
  }
  /**
   * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.
   * Provide "" will remove the snapshot and return a Client to the base blob.
   *
   * @param snapshot - The snapshot timestamp.
   * @returns A new BlobClient object identical to the source but with the specified snapshot timestamp
   */
  withSnapshot(snapshot2) {
    return new BlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot2.length === 0 ? void 0 : snapshot2), this.pipeline);
  }
  /**
   * Creates a new BlobClient object pointing to a version of this blob.
   * Provide "" will remove the versionId and return a Client to the base blob.
   *
   * @param versionId - The versionId.
   * @returns A new BlobClient object pointing to the version of this blob.
   */
  withVersion(versionId2) {
    return new BlobClient(setURLParameter(this.url, URLConstants.Parameters.VERSIONID, versionId2.length === 0 ? void 0 : versionId2), this.pipeline);
  }
  /**
   * Creates a AppendBlobClient object.
   *
   */
  getAppendBlobClient() {
    return new AppendBlobClient(this.url, this.pipeline);
  }
  /**
   * Creates a BlockBlobClient object.
   *
   */
  getBlockBlobClient() {
    return new BlockBlobClient(this.url, this.pipeline);
  }
  /**
   * Creates a PageBlobClient object.
   *
   */
  getPageBlobClient() {
    return new PageBlobClient(this.url, this.pipeline);
  }
  /**
   * Reads or downloads a blob from the system, including its metadata and properties.
   * You can also call Get Blob to read a snapshot.
   *
   * * In Node.js, data returns in a Readable stream readableStreamBody
   * * In browsers, data returns in a promise blobBody
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob
   *
   * @param offset - From which position of the blob to download, greater than or equal to 0
   * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined
   * @param options - Optional options to Blob Download operation.
   *
   *
   * Example usage (Node.js):
   *
   * ```js
   * // Download and convert a blob to a string
   * const downloadBlockBlobResponse = await blobClient.download();
   * const downloaded = await streamToBuffer(downloadBlockBlobResponse.readableStreamBody);
   * console.log("Downloaded blob content:", downloaded.toString());
   *
   * async function streamToBuffer(readableStream) {
   * return new Promise((resolve, reject) => {
   * const chunks = [];
   * readableStream.on("data", (data) => {
   * chunks.push(data instanceof Buffer ? data : Buffer.from(data));
   * });
   * readableStream.on("end", () => {
   * resolve(Buffer.concat(chunks));
   * });
   * readableStream.on("error", reject);
   * });
   * }
   * ```
   *
   * Example usage (browser):
   *
   * ```js
   * // Download and convert a blob to a string
   * const downloadBlockBlobResponse = await blobClient.download();
   * const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);
   * console.log(
   *   "Downloaded blob content",
   *   downloaded
   * );
   *
   * async function blobToString(blob: Blob): Promise<string> {
   *   const fileReader = new FileReader();
   *   return new Promise<string>((resolve, reject) => {
   *     fileReader.onloadend = (ev: any) => {
   *       resolve(ev.target!.result);
   *     };
   *     fileReader.onerror = reject;
   *     fileReader.readAsText(blob);
   *   });
   * }
   * ```
   */
  async download(offset = 0, count, options = {}) {
    var _a3;
    options.conditions = options.conditions || {};
    options.conditions = options.conditions || {};
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    const { span, updatedOptions } = createSpan2("BlobClient-download", options);
    try {
      const res = await this.blobContext.download(Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), requestOptions: {
        onDownloadProgress: isNode ? void 0 : options.onProgress
        // for Node.js, progress is reported by RetriableReadableStream
      }, range: offset === 0 && !count ? void 0 : rangeToString({ offset, count }), rangeGetContentMD5: options.rangeGetContentMD5, rangeGetContentCRC64: options.rangeGetContentCrc64, snapshot: options.snapshot, cpkInfo: options.customerProvidedKey }, convertTracingToRequestOptionsBase(updatedOptions)));
      const wrappedRes = Object.assign(Object.assign({}, res), { _response: res._response, objectReplicationDestinationPolicyId: res.objectReplicationPolicyId, objectReplicationSourceProperties: parseObjectReplicationRecord(res.objectReplicationRules) });
      if (!isNode) {
        return wrappedRes;
      }
      if (options.maxRetryRequests === void 0 || options.maxRetryRequests < 0) {
        options.maxRetryRequests = DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;
      }
      if (res.contentLength === void 0) {
        throw new RangeError(`File download response doesn't contain valid content length header`);
      }
      if (!res.etag) {
        throw new RangeError(`File download response doesn't contain valid etag header`);
      }
      return new BlobDownloadResponse(wrappedRes, async (start) => {
        var _a4;
        const updatedDownloadOptions = {
          leaseAccessConditions: options.conditions,
          modifiedAccessConditions: {
            ifMatch: options.conditions.ifMatch || res.etag,
            ifModifiedSince: options.conditions.ifModifiedSince,
            ifNoneMatch: options.conditions.ifNoneMatch,
            ifUnmodifiedSince: options.conditions.ifUnmodifiedSince,
            ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions
          },
          range: rangeToString({
            count: offset + res.contentLength - start,
            offset: start
          }),
          rangeGetContentMD5: options.rangeGetContentMD5,
          rangeGetContentCRC64: options.rangeGetContentCrc64,
          snapshot: options.snapshot,
          cpkInfo: options.customerProvidedKey
        };
        return (await this.blobContext.download(Object.assign({ abortSignal: options.abortSignal }, updatedDownloadOptions))).readableStreamBody;
      }, offset, res.contentLength, {
        maxRetryRequests: options.maxRetryRequests,
        onProgress: options.onProgress
      });
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Returns true if the Azure blob resource represented by this client exists; false otherwise.
   *
   * NOTE: use this function with care since an existing blob might be deleted by other clients or
   * applications. Vice versa new blobs might be added by other clients or applications after this
   * function completes.
   *
   * @param options - options to Exists operation.
   */
  async exists(options = {}) {
    const { span, updatedOptions } = createSpan2("BlobClient-exists", options);
    try {
      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
      await this.getProperties({
        abortSignal: options.abortSignal,
        customerProvidedKey: options.customerProvidedKey,
        conditions: options.conditions,
        tracingOptions: updatedOptions.tracingOptions
      });
      return true;
    } catch (e) {
      if (e.statusCode === 404) {
        return false;
      } else if (e.statusCode === 409 && (e.details.errorCode === BlobUsesCustomerSpecifiedEncryptionMsg || e.details.errorCode === BlobDoesNotUseCustomerSpecifiedEncryption)) {
        return true;
      }
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Returns all user-defined metadata, standard HTTP properties, and system properties
   * for the blob. It does not return the content of the blob.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties
   *
   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if
   * they originally contained uppercase characters. This differs from the metadata keys returned by
   * the methods of {@link ContainerClient} that list blobs using the `includeMetadata` option, which
   * will retain their original casing.
   *
   * @param options - Optional options to Get Properties operation.
   */
  async getProperties(options = {}) {
    var _a3;
    const { span, updatedOptions } = createSpan2("BlobClient-getProperties", options);
    try {
      options.conditions = options.conditions || {};
      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
      const res = await this.blobContext.getProperties(Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), cpkInfo: options.customerProvidedKey }, convertTracingToRequestOptionsBase(updatedOptions)));
      return Object.assign(Object.assign({}, res), { _response: res._response, objectReplicationDestinationPolicyId: res.objectReplicationPolicyId, objectReplicationSourceProperties: parseObjectReplicationRecord(res.objectReplicationRules) });
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Marks the specified blob or snapshot for deletion. The blob is later deleted
   * during garbage collection. Note that in order to delete a blob, you must delete
   * all of its snapshots. You can delete both at the same time with the Delete
   * Blob operation.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
   *
   * @param options - Optional options to Blob Delete operation.
   */
  async delete(options = {}) {
    var _a3;
    const { span, updatedOptions } = createSpan2("BlobClient-delete", options);
    options.conditions = options.conditions || {};
    try {
      return await this.blobContext.delete(Object.assign({ abortSignal: options.abortSignal, deleteSnapshots: options.deleteSnapshots, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Marks the specified blob or snapshot for deletion if it exists. The blob is later deleted
   * during garbage collection. Note that in order to delete a blob, you must delete
   * all of its snapshots. You can delete both at the same time with the Delete
   * Blob operation.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
   *
   * @param options - Optional options to Blob Delete operation.
   */
  async deleteIfExists(options = {}) {
    var _a3, _b2;
    const { span, updatedOptions } = createSpan2("BlobClient-deleteIfExists", options);
    try {
      const res = await this.delete(updatedOptions);
      return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });
    } catch (e) {
      if (((_a3 = e.details) === null || _a3 === void 0 ? void 0 : _a3.errorCode) === "BlobNotFound") {
        span.setStatus({
          code: SpanStatusCode2.ERROR,
          message: "Expected exception when deleting a blob or snapshot only if it exists."
        });
        return Object.assign(Object.assign({ succeeded: false }, (_b2 = e.response) === null || _b2 === void 0 ? void 0 : _b2.parsedHeaders), { _response: e.response });
      }
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Restores the contents and metadata of soft deleted blob and any associated
   * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29
   * or later.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob
   *
   * @param options - Optional options to Blob Undelete operation.
   */
  async undelete(options = {}) {
    const { span, updatedOptions } = createSpan2("BlobClient-undelete", options);
    try {
      return await this.blobContext.undelete(Object.assign({ abortSignal: options.abortSignal }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Sets system properties on the blob.
   *
   * If no value provided, or no value provided for the specified blob HTTP headers,
   * these blob HTTP headers without a value will be cleared.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
   *
   * @param blobHTTPHeaders - If no value provided, or no value provided for
   *                                                   the specified blob HTTP headers, these blob HTTP
   *                                                   headers without a value will be cleared.
   *                                                   A common header to set is `blobContentType`
   *                                                   enabling the browser to provide functionality
   *                                                   based on file type.
   * @param options - Optional options to Blob Set HTTP Headers operation.
   */
  async setHTTPHeaders(blobHTTPHeaders, options = {}) {
    var _a3;
    const { span, updatedOptions } = createSpan2("BlobClient-setHTTPHeaders", options);
    options.conditions = options.conditions || {};
    try {
      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
      return await this.blobContext.setHttpHeaders(Object.assign({ abortSignal: options.abortSignal, blobHttpHeaders: blobHTTPHeaders, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Sets user-defined metadata for the specified blob as one or more name-value pairs.
   *
   * If no option provided, or no metadata defined in the parameter, the blob
   * metadata will be removed.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata
   *
   * @param metadata - Replace existing metadata with this value.
   *                               If no value provided the existing metadata will be removed.
   * @param options - Optional options to Set Metadata operation.
   */
  async setMetadata(metadata2, options = {}) {
    var _a3;
    const { span, updatedOptions } = createSpan2("BlobClient-setMetadata", options);
    options.conditions = options.conditions || {};
    try {
      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
      return await this.blobContext.setMetadata(Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, metadata: metadata2, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), cpkInfo: options.customerProvidedKey, encryptionScope: options.encryptionScope }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Sets tags on the underlying blob.
   * A blob can have up to 10 tags. Tag keys must be between 1 and 128 characters.  Tag values must be between 0 and 256 characters.
   * Valid tag key and value characters include lower and upper case letters, digits (0-9),
   * space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'), colon (':'), equals ('='), and underscore ('_').
   *
   * @param tags -
   * @param options -
   */
  async setTags(tags2, options = {}) {
    var _a3;
    const { span, updatedOptions } = createSpan2("BlobClient-setTags", options);
    try {
      return await this.blobContext.setTags(Object.assign(Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions)), { tags: toBlobTags(tags2) }));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Gets the tags associated with the underlying blob.
   *
   * @param options -
   */
  async getTags(options = {}) {
    var _a3;
    const { span, updatedOptions } = createSpan2("BlobClient-getTags", options);
    try {
      const response = await this.blobContext.getTags(Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions)));
      const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, tags: toTags({ blobTagSet: response.blobTagSet }) || {} });
      return wrappedResponse;
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Get a {@link BlobLeaseClient} that manages leases on the blob.
   *
   * @param proposeLeaseId - Initial proposed lease Id.
   * @returns A new BlobLeaseClient object for managing leases on the blob.
   */
  getBlobLeaseClient(proposeLeaseId) {
    return new BlobLeaseClient(this, proposeLeaseId);
  }
  /**
   * Creates a read-only snapshot of a blob.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob
   *
   * @param options - Optional options to the Blob Create Snapshot operation.
   */
  async createSnapshot(options = {}) {
    var _a3;
    const { span, updatedOptions } = createSpan2("BlobClient-createSnapshot", options);
    options.conditions = options.conditions || {};
    try {
      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
      return await this.blobContext.createSnapshot(Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, metadata: options.metadata, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), cpkInfo: options.customerProvidedKey, encryptionScope: options.encryptionScope }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Asynchronously copies a blob to a destination within the storage account.
   * This method returns a long running operation poller that allows you to wait
   * indefinitely until the copy is completed.
   * You can also cancel a copy before it is completed by calling `cancelOperation` on the poller.
   * Note that the onProgress callback will not be invoked if the operation completes in the first
   * request, and attempting to cancel a completed copy will result in an error being thrown.
   *
   * In version 2012-02-12 and later, the source for a Copy Blob operation can be
   * a committed blob in any Azure storage account.
   * Beginning with version 2015-02-21, the source for a Copy Blob operation can be
   * an Azure file in any Azure storage account.
   * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob
   * operation to copy from another storage account.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob
   *
   * Example using automatic polling:
   *
   * ```js
   * const copyPoller = await blobClient.beginCopyFromURL('url');
   * const result = await copyPoller.pollUntilDone();
   * ```
   *
   * Example using manual polling:
   *
   * ```js
   * const copyPoller = await blobClient.beginCopyFromURL('url');
   * while (!poller.isDone()) {
   *    await poller.poll();
   * }
   * const result = copyPoller.getResult();
   * ```
   *
   * Example using progress updates:
   *
   * ```js
   * const copyPoller = await blobClient.beginCopyFromURL('url', {
   *   onProgress(state) {
   *     console.log(`Progress: ${state.copyProgress}`);
   *   }
   * });
   * const result = await copyPoller.pollUntilDone();
   * ```
   *
   * Example using a changing polling interval (default 15 seconds):
   *
   * ```js
   * const copyPoller = await blobClient.beginCopyFromURL('url', {
   *   intervalInMs: 1000 // poll blob every 1 second for copy progress
   * });
   * const result = await copyPoller.pollUntilDone();
   * ```
   *
   * Example using copy cancellation:
   *
   * ```js
   * const copyPoller = await blobClient.beginCopyFromURL('url');
   * // cancel operation after starting it.
   * try {
   *   await copyPoller.cancelOperation();
   *   // calls to get the result now throw PollerCancelledError
   *   await copyPoller.getResult();
   * } catch (err) {
   *   if (err.name === 'PollerCancelledError') {
   *     console.log('The copy was cancelled.');
   *   }
   * }
   * ```
   *
   * @param copySource - url to the source Azure Blob/File.
   * @param options - Optional options to the Blob Start Copy From URL operation.
   */
  async beginCopyFromURL(copySource2, options = {}) {
    const client = {
      abortCopyFromURL: (...args) => this.abortCopyFromURL(...args),
      getProperties: (...args) => this.getProperties(...args),
      startCopyFromURL: (...args) => this.startCopyFromURL(...args)
    };
    const poller = new BlobBeginCopyFromUrlPoller({
      blobClient: client,
      copySource: copySource2,
      intervalInMs: options.intervalInMs,
      onProgress: options.onProgress,
      resumeFrom: options.resumeFrom,
      startCopyFromURLOptions: options
    });
    await poller.poll();
    return poller;
  }
  /**
   * Aborts a pending asynchronous Copy Blob operation, and leaves a destination blob with zero
   * length and full metadata. Version 2012-02-12 and newer.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob
   *
   * @param copyId - Id of the Copy From URL operation.
   * @param options - Optional options to the Blob Abort Copy From URL operation.
   */
  async abortCopyFromURL(copyId2, options = {}) {
    const { span, updatedOptions } = createSpan2("BlobClient-abortCopyFromURL", options);
    try {
      return await this.blobContext.abortCopyFromURL(copyId2, Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * The synchronous Copy From URL operation copies a blob or an internet resource to a new blob. It will not
   * return a response until the copy is complete.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url
   *
   * @param copySource - The source URL to copy from, Shared Access Signature(SAS) maybe needed for authentication
   * @param options -
   */
  async syncCopyFromURL(copySource2, options = {}) {
    var _a3, _b2, _c2;
    const { span, updatedOptions } = createSpan2("BlobClient-syncCopyFromURL", options);
    options.conditions = options.conditions || {};
    options.sourceConditions = options.sourceConditions || {};
    try {
      return await this.blobContext.copyFromURL(copySource2, Object.assign({ abortSignal: options.abortSignal, metadata: options.metadata, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), sourceModifiedAccessConditions: {
        sourceIfMatch: options.sourceConditions.ifMatch,
        sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
        sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
        sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince
      }, sourceContentMD5: options.sourceContentMD5, copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization), tier: toAccessTier(options.tier), blobTagsString: toBlobTagsString(options.tags), immutabilityPolicyExpiry: (_b2 = options.immutabilityPolicy) === null || _b2 === void 0 ? void 0 : _b2.expiriesOn, immutabilityPolicyMode: (_c2 = options.immutabilityPolicy) === null || _c2 === void 0 ? void 0 : _c2.policyMode, legalHold: options.legalHold, encryptionScope: options.encryptionScope, copySourceTags: options.copySourceTags }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Sets the tier on a blob. The operation is allowed on a page blob in a premium
   * storage account and on a block blob in a blob storage account (locally redundant
   * storage only). A premium page blob's tier determines the allowed size, IOPS,
   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive
   * storage type. This operation does not update the blob's ETag.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier
   *
   * @param tier - The tier to be set on the blob. Valid values are Hot, Cool, or Archive.
   * @param options - Optional options to the Blob Set Tier operation.
   */
  async setAccessTier(tier2, options = {}) {
    var _a3;
    const { span, updatedOptions } = createSpan2("BlobClient-setAccessTier", options);
    try {
      return await this.blobContext.setTier(toAccessTier(tier2), Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), rehydratePriority: options.rehydratePriority }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  async downloadToBuffer(param1, param2, param3, param4 = {}) {
    let buffer;
    let offset = 0;
    let count = 0;
    let options = param4;
    if (param1 instanceof Buffer) {
      buffer = param1;
      offset = param2 || 0;
      count = typeof param3 === "number" ? param3 : 0;
    } else {
      offset = typeof param1 === "number" ? param1 : 0;
      count = typeof param2 === "number" ? param2 : 0;
      options = param3 || {};
    }
    const { span, updatedOptions } = createSpan2("BlobClient-downloadToBuffer", options);
    try {
      if (!options.blockSize) {
        options.blockSize = 0;
      }
      if (options.blockSize < 0) {
        throw new RangeError("blockSize option must be >= 0");
      }
      if (options.blockSize === 0) {
        options.blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;
      }
      if (offset < 0) {
        throw new RangeError("offset option must be >= 0");
      }
      if (count && count <= 0) {
        throw new RangeError("count option must be greater than 0");
      }
      if (!options.conditions) {
        options.conditions = {};
      }
      if (!count) {
        const response = await this.getProperties(Object.assign(Object.assign({}, options), { tracingOptions: Object.assign(Object.assign({}, options.tracingOptions), convertTracingToRequestOptionsBase(updatedOptions)) }));
        count = response.contentLength - offset;
        if (count < 0) {
          throw new RangeError(`offset ${offset} shouldn't be larger than blob size ${response.contentLength}`);
        }
      }
      if (!buffer) {
        try {
          buffer = Buffer.alloc(count);
        } catch (error) {
          throw new Error(`Unable to allocate the buffer of size: ${count}(in bytes). Please try passing your own buffer to the "downloadToBuffer" method or try using other methods like "download" or "downloadToFile".	 ${error.message}`);
        }
      }
      if (buffer.length < count) {
        throw new RangeError(`The buffer's size should be equal to or larger than the request count of bytes: ${count}`);
      }
      let transferProgress = 0;
      const batch = new Batch(options.concurrency);
      for (let off = offset; off < offset + count; off = off + options.blockSize) {
        batch.addOperation(async () => {
          let chunkEnd = offset + count;
          if (off + options.blockSize < chunkEnd) {
            chunkEnd = off + options.blockSize;
          }
          const response = await this.download(off, chunkEnd - off, {
            abortSignal: options.abortSignal,
            conditions: options.conditions,
            maxRetryRequests: options.maxRetryRequestsPerBlock,
            customerProvidedKey: options.customerProvidedKey,
            tracingOptions: Object.assign(Object.assign({}, options.tracingOptions), convertTracingToRequestOptionsBase(updatedOptions))
          });
          const stream = response.readableStreamBody;
          await streamToBuffer(stream, buffer, off - offset, chunkEnd - offset);
          transferProgress += chunkEnd - off;
          if (options.onProgress) {
            options.onProgress({ loadedBytes: transferProgress });
          }
        });
      }
      await batch.do();
      return buffer;
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * ONLY AVAILABLE IN NODE.JS RUNTIME.
   *
   * Downloads an Azure Blob to a local file.
   * Fails if the the given file path already exits.
   * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.
   *
   * @param filePath -
   * @param offset - From which position of the block blob to download.
   * @param count - How much data to be downloaded. Will download to the end when passing undefined.
   * @param options - Options to Blob download options.
   * @returns The response data for blob download operation,
   *                                                 but with readableStreamBody set to undefined since its
   *                                                 content is already read and written into a local file
   *                                                 at the specified path.
   */
  async downloadToFile(filePath, offset = 0, count, options = {}) {
    const { span, updatedOptions } = createSpan2("BlobClient-downloadToFile", options);
    try {
      const response = await this.download(offset, count, Object.assign(Object.assign({}, options), { tracingOptions: Object.assign(Object.assign({}, options.tracingOptions), convertTracingToRequestOptionsBase(updatedOptions)) }));
      if (response.readableStreamBody) {
        await readStreamToLocalFile(response.readableStreamBody, filePath);
      }
      response.blobDownloadStream = void 0;
      return response;
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  getBlobAndContainerNamesFromUrl() {
    let containerName;
    let blobName;
    try {
      const parsedUrl = URLBuilder.parse(this.url);
      if (parsedUrl.getHost().split(".")[1] === "blob") {
        const pathComponents = parsedUrl.getPath().match("/([^/]*)(/(.*))?");
        containerName = pathComponents[1];
        blobName = pathComponents[3];
      } else if (isIpEndpointStyle(parsedUrl)) {
        const pathComponents = parsedUrl.getPath().match("/([^/]*)/([^/]*)(/(.*))?");
        containerName = pathComponents[2];
        blobName = pathComponents[4];
      } else {
        const pathComponents = parsedUrl.getPath().match("/([^/]*)(/(.*))?");
        containerName = pathComponents[1];
        blobName = pathComponents[3];
      }
      containerName = decodeURIComponent(containerName);
      blobName = decodeURIComponent(blobName);
      blobName = blobName.replace(/\\/g, "/");
      if (!containerName) {
        throw new Error("Provided containerName is invalid.");
      }
      return { blobName, containerName };
    } catch (error) {
      throw new Error("Unable to extract blobName and containerName with provided information.");
    }
  }
  /**
   * Asynchronously copies a blob to a destination within the storage account.
   * In version 2012-02-12 and later, the source for a Copy Blob operation can be
   * a committed blob in any Azure storage account.
   * Beginning with version 2015-02-21, the source for a Copy Blob operation can be
   * an Azure file in any Azure storage account.
   * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob
   * operation to copy from another storage account.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob
   *
   * @param copySource - url to the source Azure Blob/File.
   * @param options - Optional options to the Blob Start Copy From URL operation.
   */
  async startCopyFromURL(copySource2, options = {}) {
    var _a3, _b2, _c2;
    const { span, updatedOptions } = createSpan2("BlobClient-startCopyFromURL", options);
    options.conditions = options.conditions || {};
    options.sourceConditions = options.sourceConditions || {};
    try {
      return await this.blobContext.startCopyFromURL(copySource2, Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, metadata: options.metadata, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), sourceModifiedAccessConditions: {
        sourceIfMatch: options.sourceConditions.ifMatch,
        sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
        sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
        sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,
        sourceIfTags: options.sourceConditions.tagConditions
      }, immutabilityPolicyExpiry: (_b2 = options.immutabilityPolicy) === null || _b2 === void 0 ? void 0 : _b2.expiriesOn, immutabilityPolicyMode: (_c2 = options.immutabilityPolicy) === null || _c2 === void 0 ? void 0 : _c2.policyMode, legalHold: options.legalHold, rehydratePriority: options.rehydratePriority, tier: toAccessTier(options.tier), blobTagsString: toBlobTagsString(options.tags), sealBlob: options.sealBlob }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Only available for BlobClient constructed with a shared key credential.
   *
   * Generates a Blob Service Shared Access Signature (SAS) URI based on the client properties
   * and parameters passed in. The SAS is signed by the shared key credential of the client.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
   *
   * @param options - Optional parameters.
   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
   */
  generateSasUrl(options) {
    return new Promise((resolve) => {
      if (!(this.credential instanceof StorageSharedKeyCredential)) {
        throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
      }
      const sas = generateBlobSASQueryParameters(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), this.credential).toString();
      resolve(appendToURLQuery(this.url, sas));
    });
  }
  /**
   * Delete the immutablility policy on the blob.
   *
   * @param options - Optional options to delete immutability policy on the blob.
   */
  async deleteImmutabilityPolicy(options) {
    const { span, updatedOptions } = createSpan2("BlobClient-deleteImmutabilityPolicy", options);
    try {
      return await this.blobContext.deleteImmutabilityPolicy(Object.assign({ abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Set immutablility policy on the blob.
   *
   * @param options - Optional options to set immutability policy on the blob.
   */
  async setImmutabilityPolicy(immutabilityPolicy, options) {
    const { span, updatedOptions } = createSpan2("BlobClient-setImmutabilityPolicy", options);
    try {
      return await this.blobContext.setImmutabilityPolicy(Object.assign({ abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal, immutabilityPolicyExpiry: immutabilityPolicy.expiriesOn, immutabilityPolicyMode: immutabilityPolicy.policyMode, modifiedAccessConditions: options === null || options === void 0 ? void 0 : options.modifiedAccessCondition }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Set legal hold on the blob.
   *
   * @param options - Optional options to set legal hold on the blob.
   */
  async setLegalHold(legalHoldEnabled, options) {
    const { span, updatedOptions } = createSpan2("BlobClient-setLegalHold", options);
    try {
      return await this.blobContext.setLegalHold(legalHoldEnabled, Object.assign({ abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
};
var AppendBlobClient = class extends BlobClient {
  constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
    let pipeline;
    let url2;
    options = options || {};
    if (isPipelineLike(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      options = blobNameOrOptions;
      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      url2 = urlOrConnectionString;
      pipeline = newPipeline(new AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
      const containerName = credentialOrPipelineOrContainerName;
      const blobName = blobNameOrOptions;
      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);
      if (extractedCreds.kind === "AccountConnString") {
        if (isNode) {
          const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
          if (!options.proxyOptions) {
            options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
          }
          pipeline = newPipeline(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
        pipeline = newPipeline(new AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName and blobName parameters");
    }
    super(url2, pipeline);
    this.appendBlobContext = new AppendBlob(this.storageClientContext);
  }
  /**
   * Creates a new AppendBlobClient object identical to the source but with the
   * specified snapshot timestamp.
   * Provide "" will remove the snapshot and return a Client to the base blob.
   *
   * @param snapshot - The snapshot timestamp.
   * @returns A new AppendBlobClient object identical to the source but with the specified snapshot timestamp.
   */
  withSnapshot(snapshot2) {
    return new AppendBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot2.length === 0 ? void 0 : snapshot2), this.pipeline);
  }
  /**
   * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.
   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param options - Options to the Append Block Create operation.
   *
   *
   * Example usage:
   *
   * ```js
   * const appendBlobClient = containerClient.getAppendBlobClient("<blob name>");
   * await appendBlobClient.create();
   * ```
   */
  async create(options = {}) {
    var _a3, _b2, _c2;
    const { span, updatedOptions } = createSpan2("AppendBlobClient-create", options);
    options.conditions = options.conditions || {};
    try {
      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
      return await this.appendBlobContext.create(0, Object.assign({ abortSignal: options.abortSignal, blobHttpHeaders: options.blobHTTPHeaders, leaseAccessConditions: options.conditions, metadata: options.metadata, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), cpkInfo: options.customerProvidedKey, encryptionScope: options.encryptionScope, immutabilityPolicyExpiry: (_b2 = options.immutabilityPolicy) === null || _b2 === void 0 ? void 0 : _b2.expiriesOn, immutabilityPolicyMode: (_c2 = options.immutabilityPolicy) === null || _c2 === void 0 ? void 0 : _c2.policyMode, legalHold: options.legalHold, blobTagsString: toBlobTagsString(options.tags) }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.
   * If the blob with the same name already exists, the content of the existing blob will remain unchanged.
   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param options -
   */
  async createIfNotExists(options = {}) {
    var _a3, _b2;
    const { span, updatedOptions } = createSpan2("AppendBlobClient-createIfNotExists", options);
    const conditions = { ifNoneMatch: ETagAny };
    try {
      const res = await this.create(Object.assign(Object.assign({}, updatedOptions), { conditions }));
      return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });
    } catch (e) {
      if (((_a3 = e.details) === null || _a3 === void 0 ? void 0 : _a3.errorCode) === "BlobAlreadyExists") {
        span.setStatus({
          code: SpanStatusCode2.ERROR,
          message: "Expected exception when creating a blob only if it does not already exist."
        });
        return Object.assign(Object.assign({ succeeded: false }, (_b2 = e.response) === null || _b2 === void 0 ? void 0 : _b2.parsedHeaders), { _response: e.response });
      }
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Seals the append blob, making it read only.
   *
   * @param options -
   */
  async seal(options = {}) {
    var _a3;
    const { span, updatedOptions } = createSpan2("AppendBlobClient-seal", options);
    options.conditions = options.conditions || {};
    try {
      return await this.appendBlobContext.seal(Object.assign({ abortSignal: options.abortSignal, appendPositionAccessConditions: options.conditions, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Commits a new block of data to the end of the existing append blob.
   * @see https://docs.microsoft.com/rest/api/storageservices/append-block
   *
   * @param body - Data to be appended.
   * @param contentLength - Length of the body in bytes.
   * @param options - Options to the Append Block operation.
   *
   *
   * Example usage:
   *
   * ```js
   * const content = "Hello World!";
   *
   * // Create a new append blob and append data to the blob.
   * const newAppendBlobClient = containerClient.getAppendBlobClient("<blob name>");
   * await newAppendBlobClient.create();
   * await newAppendBlobClient.appendBlock(content, content.length);
   *
   * // Append data to an existing append blob.
   * const existingAppendBlobClient = containerClient.getAppendBlobClient("<blob name>");
   * await existingAppendBlobClient.appendBlock(content, content.length);
   * ```
   */
  async appendBlock(body2, contentLength2, options = {}) {
    var _a3;
    const { span, updatedOptions } = createSpan2("AppendBlobClient-appendBlock", options);
    options.conditions = options.conditions || {};
    try {
      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
      return await this.appendBlobContext.appendBlock(contentLength2, body2, Object.assign({ abortSignal: options.abortSignal, appendPositionAccessConditions: options.conditions, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), requestOptions: {
        onUploadProgress: options.onProgress
      }, transactionalContentMD5: options.transactionalContentMD5, transactionalContentCrc64: options.transactionalContentCrc64, cpkInfo: options.customerProvidedKey, encryptionScope: options.encryptionScope }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * The Append Block operation commits a new block of data to the end of an existing append blob
   * where the contents are read from a source url.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url
   *
   * @param sourceURL -
   *                 The url to the blob that will be the source of the copy. A source blob in the same storage account can
   *                 be authenticated via Shared Key. However, if the source is a blob in another account, the source blob
   *                 must either be public or must be authenticated via a shared access signature. If the source blob is
   *                 public, no authentication is required to perform the operation.
   * @param sourceOffset - Offset in source to be appended
   * @param count - Number of bytes to be appended as a block
   * @param options -
   */
  async appendBlockFromURL(sourceURL, sourceOffset, count, options = {}) {
    var _a3;
    const { span, updatedOptions } = createSpan2("AppendBlobClient-appendBlockFromURL", options);
    options.conditions = options.conditions || {};
    options.sourceConditions = options.sourceConditions || {};
    try {
      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
      return await this.appendBlobContext.appendBlockFromUrl(sourceURL, 0, Object.assign({ abortSignal: options.abortSignal, sourceRange: rangeToString({ offset: sourceOffset, count }), sourceContentMD5: options.sourceContentMD5, sourceContentCrc64: options.sourceContentCrc64, leaseAccessConditions: options.conditions, appendPositionAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), sourceModifiedAccessConditions: {
        sourceIfMatch: options.sourceConditions.ifMatch,
        sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
        sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
        sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince
      }, copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization), cpkInfo: options.customerProvidedKey, encryptionScope: options.encryptionScope }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
};
var BlockBlobClient = class extends BlobClient {
  constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
    let pipeline;
    let url2;
    options = options || {};
    if (isPipelineLike(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      options = blobNameOrOptions;
      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      url2 = urlOrConnectionString;
      if (blobNameOrOptions && typeof blobNameOrOptions !== "string") {
        options = blobNameOrOptions;
      }
      pipeline = newPipeline(new AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
      const containerName = credentialOrPipelineOrContainerName;
      const blobName = blobNameOrOptions;
      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);
      if (extractedCreds.kind === "AccountConnString") {
        if (isNode) {
          const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
          if (!options.proxyOptions) {
            options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
          }
          pipeline = newPipeline(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
        pipeline = newPipeline(new AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName and blobName parameters");
    }
    super(url2, pipeline);
    this.blockBlobContext = new BlockBlob(this.storageClientContext);
    this._blobContext = new Blob2(this.storageClientContext);
  }
  /**
   * Creates a new BlockBlobClient object identical to the source but with the
   * specified snapshot timestamp.
   * Provide "" will remove the snapshot and return a URL to the base blob.
   *
   * @param snapshot - The snapshot timestamp.
   * @returns A new BlockBlobClient object identical to the source but with the specified snapshot timestamp.
   */
  withSnapshot(snapshot2) {
    return new BlockBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot2.length === 0 ? void 0 : snapshot2), this.pipeline);
  }
  /**
   * ONLY AVAILABLE IN NODE.JS RUNTIME.
   *
   * Quick query for a JSON or CSV formatted blob.
   *
   * Example usage (Node.js):
   *
   * ```js
   * // Query and convert a blob to a string
   * const queryBlockBlobResponse = await blockBlobClient.query("select * from BlobStorage");
   * const downloaded = (await streamToBuffer(queryBlockBlobResponse.readableStreamBody)).toString();
   * console.log("Query blob content:", downloaded);
   *
   * async function streamToBuffer(readableStream) {
   *   return new Promise((resolve, reject) => {
   *     const chunks = [];
   *     readableStream.on("data", (data) => {
   *       chunks.push(data instanceof Buffer ? data : Buffer.from(data));
   *     });
   *     readableStream.on("end", () => {
   *       resolve(Buffer.concat(chunks));
   *     });
   *     readableStream.on("error", reject);
   *   });
   * }
   * ```
   *
   * @param query -
   * @param options -
   */
  async query(query, options = {}) {
    var _a3;
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    const { span, updatedOptions } = createSpan2("BlockBlobClient-query", options);
    try {
      if (!isNode) {
        throw new Error("This operation currently is only supported in Node.js.");
      }
      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
      const response = await this._blobContext.query(Object.assign({ abortSignal: options.abortSignal, queryRequest: {
        queryType: "SQL",
        expression: query,
        inputSerialization: toQuerySerialization(options.inputTextConfiguration),
        outputSerialization: toQuerySerialization(options.outputTextConfiguration)
      }, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), cpkInfo: options.customerProvidedKey }, convertTracingToRequestOptionsBase(updatedOptions)));
      return new BlobQueryResponse(response, {
        abortSignal: options.abortSignal,
        onProgress: options.onProgress,
        onError: options.onError
      });
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Creates a new block blob, or updates the content of an existing block blob.
   * Updating an existing block blob overwrites any existing metadata on the blob.
   * Partial updates are not supported; the content of the existing blob is
   * overwritten with the new content. To perform a partial update of a block blob's,
   * use {@link stageBlock} and {@link commitBlockList}.
   *
   * This is a non-parallel uploading method, please use {@link uploadFile},
   * {@link uploadStream} or {@link uploadBrowserData} for better performance
   * with concurrency uploading.
   *
   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function
   *                               which returns a new Readable stream whose offset is from data source beginning.
   * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a
   *                               string including non non-Base64/Hex-encoded characters.
   * @param options - Options to the Block Blob Upload operation.
   * @returns Response data for the Block Blob Upload operation.
   *
   * Example usage:
   *
   * ```js
   * const content = "Hello world!";
   * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);
   * ```
   */
  async upload(body2, contentLength2, options = {}) {
    var _a3, _b2, _c2;
    options.conditions = options.conditions || {};
    const { span, updatedOptions } = createSpan2("BlockBlobClient-upload", options);
    try {
      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
      return await this.blockBlobContext.upload(contentLength2, body2, Object.assign({ abortSignal: options.abortSignal, blobHttpHeaders: options.blobHTTPHeaders, leaseAccessConditions: options.conditions, metadata: options.metadata, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), requestOptions: {
        onUploadProgress: options.onProgress
      }, cpkInfo: options.customerProvidedKey, encryptionScope: options.encryptionScope, immutabilityPolicyExpiry: (_b2 = options.immutabilityPolicy) === null || _b2 === void 0 ? void 0 : _b2.expiriesOn, immutabilityPolicyMode: (_c2 = options.immutabilityPolicy) === null || _c2 === void 0 ? void 0 : _c2.policyMode, legalHold: options.legalHold, tier: toAccessTier(options.tier), blobTagsString: toBlobTagsString(options.tags) }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Creates a new Block Blob where the contents of the blob are read from a given URL.
   * This API is supported beginning with the 2020-04-08 version. Partial updates
   * are not supported with Put Blob from URL; the content of an existing blob is overwritten with
   * the content of the new blob.  To perform partial updates to a block blob’s contents using a
   * source URL, use {@link stageBlockFromURL} and {@link commitBlockList}.
   *
   * @param sourceURL - Specifies the URL of the blob. The value
   *                           may be a URL of up to 2 KB in length that specifies a blob.
   *                           The value should be URL-encoded as it would appear
   *                           in a request URI. The source blob must either be public
   *                           or must be authenticated via a shared access signature.
   *                           If the source blob is public, no authentication is required
   *                           to perform the operation. Here are some examples of source object URLs:
   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob
   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
   * @param options - Optional parameters.
   */
  async syncUploadFromURL(sourceURL, options = {}) {
    var _a3, _b2, _c2, _d2, _e;
    options.conditions = options.conditions || {};
    const { span, updatedOptions } = createSpan2("BlockBlobClient-syncUploadFromURL", options);
    try {
      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
      return await this.blockBlobContext.putBlobFromUrl(0, sourceURL, Object.assign(Object.assign(Object.assign({}, options), { blobHttpHeaders: options.blobHTTPHeaders, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: options.conditions.tagConditions }), sourceModifiedAccessConditions: {
        sourceIfMatch: (_a3 = options.sourceConditions) === null || _a3 === void 0 ? void 0 : _a3.ifMatch,
        sourceIfModifiedSince: (_b2 = options.sourceConditions) === null || _b2 === void 0 ? void 0 : _b2.ifModifiedSince,
        sourceIfNoneMatch: (_c2 = options.sourceConditions) === null || _c2 === void 0 ? void 0 : _c2.ifNoneMatch,
        sourceIfUnmodifiedSince: (_d2 = options.sourceConditions) === null || _d2 === void 0 ? void 0 : _d2.ifUnmodifiedSince,
        sourceIfTags: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.tagConditions
      }, cpkInfo: options.customerProvidedKey, copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization), tier: toAccessTier(options.tier), blobTagsString: toBlobTagsString(options.tags), copySourceTags: options.copySourceTags }), convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Uploads the specified block to the block blob's "staging area" to be later
   * committed by a call to commitBlockList.
   * @see https://docs.microsoft.com/rest/api/storageservices/put-block
   *
   * @param blockId - A 64-byte value that is base64-encoded
   * @param body - Data to upload to the staging area.
   * @param contentLength - Number of bytes to upload.
   * @param options - Options to the Block Blob Stage Block operation.
   * @returns Response data for the Block Blob Stage Block operation.
   */
  async stageBlock(blockId2, body2, contentLength2, options = {}) {
    const { span, updatedOptions } = createSpan2("BlockBlobClient-stageBlock", options);
    try {
      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
      return await this.blockBlobContext.stageBlock(blockId2, contentLength2, body2, Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, requestOptions: {
        onUploadProgress: options.onProgress
      }, transactionalContentMD5: options.transactionalContentMD5, transactionalContentCrc64: options.transactionalContentCrc64, cpkInfo: options.customerProvidedKey, encryptionScope: options.encryptionScope }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * The Stage Block From URL operation creates a new block to be committed as part
   * of a blob where the contents are read from a URL.
   * This API is available starting in version 2018-03-28.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url
   *
   * @param blockId - A 64-byte value that is base64-encoded
   * @param sourceURL - Specifies the URL of the blob. The value
   *                           may be a URL of up to 2 KB in length that specifies a blob.
   *                           The value should be URL-encoded as it would appear
   *                           in a request URI. The source blob must either be public
   *                           or must be authenticated via a shared access signature.
   *                           If the source blob is public, no authentication is required
   *                           to perform the operation. Here are some examples of source object URLs:
   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob
   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
   * @param offset - From which position of the blob to download, greater than or equal to 0
   * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined
   * @param options - Options to the Block Blob Stage Block From URL operation.
   * @returns Response data for the Block Blob Stage Block From URL operation.
   */
  async stageBlockFromURL(blockId2, sourceURL, offset = 0, count, options = {}) {
    const { span, updatedOptions } = createSpan2("BlockBlobClient-stageBlockFromURL", options);
    try {
      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
      return await this.blockBlobContext.stageBlockFromURL(blockId2, 0, sourceURL, Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, sourceContentMD5: options.sourceContentMD5, sourceContentCrc64: options.sourceContentCrc64, sourceRange: offset === 0 && !count ? void 0 : rangeToString({ offset, count }), cpkInfo: options.customerProvidedKey, encryptionScope: options.encryptionScope, copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization) }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Writes a blob by specifying the list of block IDs that make up the blob.
   * In order to be written as part of a blob, a block must have been successfully written
   * to the server in a prior {@link stageBlock} operation. You can call {@link commitBlockList} to
   * update a blob by uploading only those blocks that have changed, then committing the new and existing
   * blocks together. Any blocks not specified in the block list and permanently deleted.
   * @see https://docs.microsoft.com/rest/api/storageservices/put-block-list
   *
   * @param blocks -  Array of 64-byte value that is base64-encoded
   * @param options - Options to the Block Blob Commit Block List operation.
   * @returns Response data for the Block Blob Commit Block List operation.
   */
  async commitBlockList(blocks2, options = {}) {
    var _a3, _b2, _c2;
    options.conditions = options.conditions || {};
    const { span, updatedOptions } = createSpan2("BlockBlobClient-commitBlockList", options);
    try {
      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
      return await this.blockBlobContext.commitBlockList({ latest: blocks2 }, Object.assign({ abortSignal: options.abortSignal, blobHttpHeaders: options.blobHTTPHeaders, leaseAccessConditions: options.conditions, metadata: options.metadata, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), cpkInfo: options.customerProvidedKey, encryptionScope: options.encryptionScope, immutabilityPolicyExpiry: (_b2 = options.immutabilityPolicy) === null || _b2 === void 0 ? void 0 : _b2.expiriesOn, immutabilityPolicyMode: (_c2 = options.immutabilityPolicy) === null || _c2 === void 0 ? void 0 : _c2.policyMode, legalHold: options.legalHold, tier: toAccessTier(options.tier), blobTagsString: toBlobTagsString(options.tags) }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Returns the list of blocks that have been uploaded as part of a block blob
   * using the specified block list filter.
   * @see https://docs.microsoft.com/rest/api/storageservices/get-block-list
   *
   * @param listType - Specifies whether to return the list of committed blocks,
   *                                        the list of uncommitted blocks, or both lists together.
   * @param options - Options to the Block Blob Get Block List operation.
   * @returns Response data for the Block Blob Get Block List operation.
   */
  async getBlockList(listType2, options = {}) {
    var _a3;
    const { span, updatedOptions } = createSpan2("BlockBlobClient-getBlockList", options);
    try {
      const res = await this.blockBlobContext.getBlockList(listType2, Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions)));
      if (!res.committedBlocks) {
        res.committedBlocks = [];
      }
      if (!res.uncommittedBlocks) {
        res.uncommittedBlocks = [];
      }
      return res;
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  // High level functions
  /**
   * Uploads a Buffer(Node.js)/Blob(browsers)/ArrayBuffer/ArrayBufferView object to a BlockBlob.
   *
   * When data length is no more than the specifiled {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is
   * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.
   * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}
   * to commit the block list.
   *
   * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is
   * `blobContentType`, enabling the browser to provide
   * functionality based on file type.
   *
   * @param data - Buffer(Node.js), Blob, ArrayBuffer or ArrayBufferView
   * @param options -
   */
  async uploadData(data, options = {}) {
    const { span, updatedOptions } = createSpan2("BlockBlobClient-uploadData", options);
    try {
      if (isNode) {
        let buffer;
        if (data instanceof Buffer) {
          buffer = data;
        } else if (data instanceof ArrayBuffer) {
          buffer = Buffer.from(data);
        } else {
          data = data;
          buffer = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
        }
        return this.uploadSeekableInternal((offset, size) => buffer.slice(offset, offset + size), buffer.byteLength, updatedOptions);
      } else {
        const browserBlob = new Blob([data]);
        return this.uploadSeekableInternal((offset, size) => browserBlob.slice(offset, offset + size), browserBlob.size, updatedOptions);
      }
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * ONLY AVAILABLE IN BROWSERS.
   *
   * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.
   *
   * When buffer length lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.
   * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call
   * {@link commitBlockList} to commit the block list.
   *
   * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is
   * `blobContentType`, enabling the browser to provide
   * functionality based on file type.
   *
   * @deprecated Use {@link uploadData} instead.
   *
   * @param browserData - Blob, File, ArrayBuffer or ArrayBufferView
   * @param options - Options to upload browser data.
   * @returns Response data for the Blob Upload operation.
   */
  async uploadBrowserData(browserData, options = {}) {
    const { span, updatedOptions } = createSpan2("BlockBlobClient-uploadBrowserData", options);
    try {
      const browserBlob = new Blob([browserData]);
      return await this.uploadSeekableInternal((offset, size) => browserBlob.slice(offset, offset + size), browserBlob.size, updatedOptions);
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   *
   * Uploads data to block blob. Requires a bodyFactory as the data source,
   * which need to return a {@link HttpRequestBody} object with the offset and size provided.
   *
   * When data length is no more than the specified {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is
   * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.
   * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}
   * to commit the block list.
   *
   * @param bodyFactory -
   * @param size - size of the data to upload.
   * @param options - Options to Upload to Block Blob operation.
   * @returns Response data for the Blob Upload operation.
   */
  async uploadSeekableInternal(bodyFactory, size, options = {}) {
    if (!options.blockSize) {
      options.blockSize = 0;
    }
    if (options.blockSize < 0 || options.blockSize > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {
      throw new RangeError(`blockSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES}`);
    }
    if (options.maxSingleShotSize !== 0 && !options.maxSingleShotSize) {
      options.maxSingleShotSize = BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;
    }
    if (options.maxSingleShotSize < 0 || options.maxSingleShotSize > BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES) {
      throw new RangeError(`maxSingleShotSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}`);
    }
    if (options.blockSize === 0) {
      if (size > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES * BLOCK_BLOB_MAX_BLOCKS) {
        throw new RangeError(`${size} is too larger to upload to a block blob.`);
      }
      if (size > options.maxSingleShotSize) {
        options.blockSize = Math.ceil(size / BLOCK_BLOB_MAX_BLOCKS);
        if (options.blockSize < DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {
          options.blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;
        }
      }
    }
    if (!options.blobHTTPHeaders) {
      options.blobHTTPHeaders = {};
    }
    if (!options.conditions) {
      options.conditions = {};
    }
    const { span, updatedOptions } = createSpan2("BlockBlobClient-uploadSeekableInternal", options);
    try {
      if (size <= options.maxSingleShotSize) {
        return await this.upload(bodyFactory(0, size), size, updatedOptions);
      }
      const numBlocks = Math.floor((size - 1) / options.blockSize) + 1;
      if (numBlocks > BLOCK_BLOB_MAX_BLOCKS) {
        throw new RangeError(`The buffer's size is too big or the BlockSize is too small;the number of blocks must be <= ${BLOCK_BLOB_MAX_BLOCKS}`);
      }
      const blockList = [];
      const blockIDPrefix = generateUuid();
      let transferProgress = 0;
      const batch = new Batch(options.concurrency);
      for (let i = 0; i < numBlocks; i++) {
        batch.addOperation(async () => {
          const blockID = generateBlockID(blockIDPrefix, i);
          const start = options.blockSize * i;
          const end = i === numBlocks - 1 ? size : start + options.blockSize;
          const contentLength2 = end - start;
          blockList.push(blockID);
          await this.stageBlock(blockID, bodyFactory(start, contentLength2), contentLength2, {
            abortSignal: options.abortSignal,
            conditions: options.conditions,
            encryptionScope: options.encryptionScope,
            tracingOptions: updatedOptions.tracingOptions
          });
          transferProgress += contentLength2;
          if (options.onProgress) {
            options.onProgress({
              loadedBytes: transferProgress
            });
          }
        });
      }
      await batch.do();
      return this.commitBlockList(blockList, updatedOptions);
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * ONLY AVAILABLE IN NODE.JS RUNTIME.
   *
   * Uploads a local file in blocks to a block blob.
   *
   * When file size lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.
   * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList
   * to commit the block list.
   *
   * @param filePath - Full path of local file
   * @param options - Options to Upload to Block Blob operation.
   * @returns Response data for the Blob Upload operation.
   */
  async uploadFile(filePath, options = {}) {
    const { span, updatedOptions } = createSpan2("BlockBlobClient-uploadFile", options);
    try {
      const size = (await fsStat(filePath)).size;
      return await this.uploadSeekableInternal((offset, count) => {
        return () => fsCreateReadStream(filePath, {
          autoClose: true,
          end: count ? offset + count - 1 : Infinity,
          start: offset
        });
      }, size, Object.assign(Object.assign({}, options), { tracingOptions: Object.assign(Object.assign({}, options.tracingOptions), convertTracingToRequestOptionsBase(updatedOptions)) }));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * ONLY AVAILABLE IN NODE.JS RUNTIME.
   *
   * Uploads a Node.js Readable stream into block blob.
   *
   * PERFORMANCE IMPROVEMENT TIPS:
   * * Input stream highWaterMark is better to set a same value with bufferSize
   *    parameter, which will avoid Buffer.concat() operations.
   *
   * @param stream - Node.js Readable stream
   * @param bufferSize - Size of every buffer allocated, also the block size in the uploaded block blob. Default value is 8MB
   * @param maxConcurrency -  Max concurrency indicates the max number of buffers that can be allocated,
   *                                 positive correlation with max uploading concurrency. Default value is 5
   * @param options - Options to Upload Stream to Block Blob operation.
   * @returns Response data for the Blob Upload operation.
   */
  async uploadStream(stream, bufferSize = DEFAULT_BLOCK_BUFFER_SIZE_BYTES, maxConcurrency = 5, options = {}) {
    if (!options.blobHTTPHeaders) {
      options.blobHTTPHeaders = {};
    }
    if (!options.conditions) {
      options.conditions = {};
    }
    const { span, updatedOptions } = createSpan2("BlockBlobClient-uploadStream", options);
    try {
      let blockNum = 0;
      const blockIDPrefix = generateUuid();
      let transferProgress = 0;
      const blockList = [];
      const scheduler = new BufferScheduler(
        stream,
        bufferSize,
        maxConcurrency,
        async (body2, length) => {
          const blockID = generateBlockID(blockIDPrefix, blockNum);
          blockList.push(blockID);
          blockNum++;
          await this.stageBlock(blockID, body2, length, {
            conditions: options.conditions,
            encryptionScope: options.encryptionScope,
            tracingOptions: updatedOptions.tracingOptions
          });
          transferProgress += length;
          if (options.onProgress) {
            options.onProgress({ loadedBytes: transferProgress });
          }
        },
        // concurrency should set a smaller value than maxConcurrency, which is helpful to
        // reduce the possibility when a outgoing handler waits for stream data, in
        // this situation, outgoing handlers are blocked.
        // Outgoing queue shouldn't be empty.
        Math.ceil(maxConcurrency / 4 * 3)
      );
      await scheduler.do();
      return await this.commitBlockList(blockList, Object.assign(Object.assign({}, options), { tracingOptions: Object.assign(Object.assign({}, options.tracingOptions), convertTracingToRequestOptionsBase(updatedOptions)) }));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
};
var PageBlobClient = class extends BlobClient {
  constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
    let pipeline;
    let url2;
    options = options || {};
    if (isPipelineLike(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      options = blobNameOrOptions;
      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      url2 = urlOrConnectionString;
      pipeline = newPipeline(new AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
      const containerName = credentialOrPipelineOrContainerName;
      const blobName = blobNameOrOptions;
      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);
      if (extractedCreds.kind === "AccountConnString") {
        if (isNode) {
          const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
          if (!options.proxyOptions) {
            options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
          }
          pipeline = newPipeline(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
        pipeline = newPipeline(new AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName and blobName parameters");
    }
    super(url2, pipeline);
    this.pageBlobContext = new PageBlob(this.storageClientContext);
  }
  /**
   * Creates a new PageBlobClient object identical to the source but with the
   * specified snapshot timestamp.
   * Provide "" will remove the snapshot and return a Client to the base blob.
   *
   * @param snapshot - The snapshot timestamp.
   * @returns A new PageBlobClient object identical to the source but with the specified snapshot timestamp.
   */
  withSnapshot(snapshot2) {
    return new PageBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot2.length === 0 ? void 0 : snapshot2), this.pipeline);
  }
  /**
   * Creates a page blob of the specified length. Call uploadPages to upload data
   * data to a page blob.
   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param size - size of the page blob.
   * @param options - Options to the Page Blob Create operation.
   * @returns Response data for the Page Blob Create operation.
   */
  async create(size, options = {}) {
    var _a3, _b2, _c2;
    options.conditions = options.conditions || {};
    const { span, updatedOptions } = createSpan2("PageBlobClient-create", options);
    try {
      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
      return await this.pageBlobContext.create(0, size, Object.assign({ abortSignal: options.abortSignal, blobHttpHeaders: options.blobHTTPHeaders, blobSequenceNumber: options.blobSequenceNumber, leaseAccessConditions: options.conditions, metadata: options.metadata, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), cpkInfo: options.customerProvidedKey, encryptionScope: options.encryptionScope, immutabilityPolicyExpiry: (_b2 = options.immutabilityPolicy) === null || _b2 === void 0 ? void 0 : _b2.expiriesOn, immutabilityPolicyMode: (_c2 = options.immutabilityPolicy) === null || _c2 === void 0 ? void 0 : _c2.policyMode, legalHold: options.legalHold, tier: toAccessTier(options.tier), blobTagsString: toBlobTagsString(options.tags) }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Creates a page blob of the specified length. Call uploadPages to upload data
   * data to a page blob. If the blob with the same name already exists, the content
   * of the existing blob will remain unchanged.
   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param size - size of the page blob.
   * @param options -
   */
  async createIfNotExists(size, options = {}) {
    var _a3, _b2;
    const { span, updatedOptions } = createSpan2("PageBlobClient-createIfNotExists", options);
    try {
      const conditions = { ifNoneMatch: ETagAny };
      const res = await this.create(size, Object.assign(Object.assign({}, options), { conditions, tracingOptions: updatedOptions.tracingOptions }));
      return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });
    } catch (e) {
      if (((_a3 = e.details) === null || _a3 === void 0 ? void 0 : _a3.errorCode) === "BlobAlreadyExists") {
        span.setStatus({
          code: SpanStatusCode2.ERROR,
          message: "Expected exception when creating a blob only if it does not already exist."
        });
        return Object.assign(Object.assign({ succeeded: false }, (_b2 = e.response) === null || _b2 === void 0 ? void 0 : _b2.parsedHeaders), { _response: e.response });
      }
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.
   * @see https://docs.microsoft.com/rest/api/storageservices/put-page
   *
   * @param body - Data to upload
   * @param offset - Offset of destination page blob
   * @param count - Content length of the body, also number of bytes to be uploaded
   * @param options - Options to the Page Blob Upload Pages operation.
   * @returns Response data for the Page Blob Upload Pages operation.
   */
  async uploadPages(body2, offset, count, options = {}) {
    var _a3;
    options.conditions = options.conditions || {};
    const { span, updatedOptions } = createSpan2("PageBlobClient-uploadPages", options);
    try {
      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
      return await this.pageBlobContext.uploadPages(count, body2, Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), requestOptions: {
        onUploadProgress: options.onProgress
      }, range: rangeToString({ offset, count }), sequenceNumberAccessConditions: options.conditions, transactionalContentMD5: options.transactionalContentMD5, transactionalContentCrc64: options.transactionalContentCrc64, cpkInfo: options.customerProvidedKey, encryptionScope: options.encryptionScope }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * The Upload Pages operation writes a range of pages to a page blob where the
   * contents are read from a URL.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-page-from-url
   *
   * @param sourceURL - Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication
   * @param sourceOffset - The source offset to copy from. Pass 0 to copy from the beginning of source page blob
   * @param destOffset - Offset of destination page blob
   * @param count - Number of bytes to be uploaded from source page blob
   * @param options -
   */
  async uploadPagesFromURL(sourceURL, sourceOffset, destOffset, count, options = {}) {
    var _a3;
    options.conditions = options.conditions || {};
    options.sourceConditions = options.sourceConditions || {};
    const { span, updatedOptions } = createSpan2("PageBlobClient-uploadPagesFromURL", options);
    try {
      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
      return await this.pageBlobContext.uploadPagesFromURL(sourceURL, rangeToString({ offset: sourceOffset, count }), 0, rangeToString({ offset: destOffset, count }), Object.assign({ abortSignal: options.abortSignal, sourceContentMD5: options.sourceContentMD5, sourceContentCrc64: options.sourceContentCrc64, leaseAccessConditions: options.conditions, sequenceNumberAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), sourceModifiedAccessConditions: {
        sourceIfMatch: options.sourceConditions.ifMatch,
        sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
        sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
        sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince
      }, cpkInfo: options.customerProvidedKey, encryptionScope: options.encryptionScope, copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization) }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Frees the specified pages from the page blob.
   * @see https://docs.microsoft.com/rest/api/storageservices/put-page
   *
   * @param offset - Starting byte position of the pages to clear.
   * @param count - Number of bytes to clear.
   * @param options - Options to the Page Blob Clear Pages operation.
   * @returns Response data for the Page Blob Clear Pages operation.
   */
  async clearPages(offset = 0, count, options = {}) {
    var _a3;
    options.conditions = options.conditions || {};
    const { span, updatedOptions } = createSpan2("PageBlobClient-clearPages", options);
    try {
      return await this.pageBlobContext.clearPages(0, Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), range: rangeToString({ offset, count }), sequenceNumberAccessConditions: options.conditions, cpkInfo: options.customerProvidedKey, encryptionScope: options.encryptionScope }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Returns the list of valid page ranges for a page blob or snapshot of a page blob.
   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
   *
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param options - Options to the Page Blob Get Ranges operation.
   * @returns Response data for the Page Blob Get Ranges operation.
   */
  async getPageRanges(offset = 0, count, options = {}) {
    var _a3;
    options.conditions = options.conditions || {};
    const { span, updatedOptions } = createSpan2("PageBlobClient-getPageRanges", options);
    try {
      return await this.pageBlobContext.getPageRanges(Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), range: rangeToString({ offset, count }) }, convertTracingToRequestOptionsBase(updatedOptions))).then(rangeResponseFromModel);
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * getPageRangesSegment returns a single segment of page ranges starting from the
   * specified Marker. Use an empty Marker to start enumeration from the beginning.
   * After getting a segment, process it, and then call getPageRangesSegment again
   * (passing the the previously-returned Marker) to get the next segment.
   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
   *
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
   * @param options - Options to PageBlob Get Page Ranges Segment operation.
   */
  async listPageRangesSegment(offset = 0, count, marker2, options = {}) {
    var _a3;
    const { span, updatedOptions } = createSpan2("PageBlobClient-getPageRangesSegment", options);
    try {
      return await this.pageBlobContext.getPageRanges(Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), range: rangeToString({ offset, count }), marker: marker2, maxPageSize: options.maxPageSize }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesResponseModel}
   *
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param marker - A string value that identifies the portion of
   *                          the get of page ranges to be returned with the next getting operation. The
   *                          operation returns the ContinuationToken value within the response body if the
   *                          getting operation did not return all page ranges remaining within the current page.
   *                          The ContinuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of get
   *                          items. The marker value is opaque to the client.
   * @param options - Options to List Page Ranges operation.
   */
  listPageRangeItemSegments(offset = 0, count, marker2, options = {}) {
    return __asyncGenerator(this, arguments, function* listPageRangeItemSegments_1() {
      let getPageRangeItemSegmentsResponse;
      if (!!marker2 || marker2 === void 0) {
        do {
          getPageRangeItemSegmentsResponse = yield __await(this.listPageRangesSegment(offset, count, marker2, options));
          marker2 = getPageRangeItemSegmentsResponse.continuationToken;
          yield yield __await(yield __await(getPageRangeItemSegmentsResponse));
        } while (marker2);
      }
    });
  }
  /**
   * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects
   *
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param options - Options to List Page Ranges operation.
   */
  listPageRangeItems(offset = 0, count, options = {}) {
    return __asyncGenerator(this, arguments, function* listPageRangeItems_1() {
      var e_1, _a3;
      let marker2;
      try {
        for (var _b2 = __asyncValues(this.listPageRangeItemSegments(offset, count, marker2, options)), _c2; _c2 = yield __await(_b2.next()), !_c2.done; ) {
          const getPageRangesSegment = _c2.value;
          yield __await(yield* __asyncDelegator(__asyncValues(ExtractPageRangeInfoItems(getPageRangesSegment))));
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c2 && !_c2.done && (_a3 = _b2.return))
            yield __await(_a3.call(_b2));
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    });
  }
  /**
   * Returns an async iterable iterator to list of page ranges for a page blob.
   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
   *
   *  .byPage() returns an async iterable iterator to list of page ranges for a page blob.
   *
   * Example using `for await` syntax:
   *
   * ```js
   * // Get the pageBlobClient before you run these snippets,
   * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>").getPageBlobClient("<your-blob-name>");`
   * let i = 1;
   * for await (const pageRange of pageBlobClient.listPageRanges()) {
   *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let i = 1;
   * let iter = pageBlobClient.listPageRanges();
   * let pageRangeItem = await iter.next();
   * while (!pageRangeItem.done) {
   *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);
   *   pageRangeItem = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * // passing optional maxPageSize in the page settings
   * let i = 1;
   * for await (const response of pageBlobClient.listPageRanges().byPage({ maxPageSize: 20 })) {
   *   for (const pageRange of response) {
   *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
   *   }
   * }
   * ```
   *
   * Example using paging with a marker:
   *
   * ```js
   * let i = 1;
   * let iterator = pageBlobClient.listPageRanges().byPage({ maxPageSize: 2 });
   * let response = (await iterator.next()).value;
   *
   * // Prints 2 page ranges
   * for (const pageRange of response) {
   *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
   * }
   *
   * // Gets next marker
   * let marker = response.continuationToken;
   *
   * // Passing next marker as continuationToken
   *
   * iterator = pageBlobClient.listPageRanges().byPage({ continuationToken: marker, maxPageSize: 10 });
   * response = (await iterator.next()).value;
   *
   * // Prints 10 page ranges
   * for (const blob of response) {
   *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
   * }
   * ```
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param options - Options to the Page Blob Get Ranges operation.
   * @returns An asyncIterableIterator that supports paging.
   */
  listPageRanges(offset = 0, count, options = {}) {
    options.conditions = options.conditions || {};
    const iter = this.listPageRangeItems(offset, count, options);
    return {
      /**
       * The next method, part of the iteration protocol
       */
      next() {
        return iter.next();
      },
      /**
       * The connection to the async iterator, part of the iteration protocol
       */
      [Symbol.asyncIterator]() {
        return this;
      },
      /**
       * Return an AsyncIterableIterator that works a page at a time
       */
      byPage: (settings = {}) => {
        return this.listPageRangeItemSegments(offset, count, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, options));
      }
    };
  }
  /**
   * Gets the collection of page ranges that differ between a specified snapshot and this page blob.
   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
   *
   * @param offset - Starting byte position of the page blob
   * @param count - Number of bytes to get ranges diff.
   * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.
   * @param options - Options to the Page Blob Get Page Ranges Diff operation.
   * @returns Response data for the Page Blob Get Page Range Diff operation.
   */
  async getPageRangesDiff(offset, count, prevSnapshot, options = {}) {
    var _a3;
    options.conditions = options.conditions || {};
    const { span, updatedOptions } = createSpan2("PageBlobClient-getPageRangesDiff", options);
    try {
      return await this.pageBlobContext.getPageRangesDiff(Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), prevsnapshot: prevSnapshot, range: rangeToString({ offset, count }) }, convertTracingToRequestOptionsBase(updatedOptions))).then(rangeResponseFromModel);
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * getPageRangesDiffSegment returns a single segment of page ranges starting from the
   * specified Marker for difference between previous snapshot and the target page blob.
   * Use an empty Marker to start enumeration from the beginning.
   * After getting a segment, process it, and then call getPageRangesDiffSegment again
   * (passing the the previously-returned Marker) to get the next segment.
   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
   *
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.
   * @param marker - A string value that identifies the portion of the get to be returned with the next get operation.
   * @param options - Options to the Page Blob Get Page Ranges Diff operation.
   */
  async listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker2, options) {
    var _a3;
    const { span, updatedOptions } = createSpan2("PageBlobClient-getPageRangesDiffSegment", options);
    try {
      return await this.pageBlobContext.getPageRangesDiff(Object.assign({ abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal, leaseAccessConditions: options === null || options === void 0 ? void 0 : options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.conditions), { ifTags: (_a3 = options === null || options === void 0 ? void 0 : options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), prevsnapshot: prevSnapshotOrUrl, range: rangeToString({
        offset,
        count
      }), marker: marker2, maxPageSize: options === null || options === void 0 ? void 0 : options.maxPageSize }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesDiffResponseModel}
   *
   *
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.
   * @param marker - A string value that identifies the portion of
   *                          the get of page ranges to be returned with the next getting operation. The
   *                          operation returns the ContinuationToken value within the response body if the
   *                          getting operation did not return all page ranges remaining within the current page.
   *                          The ContinuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of get
   *                          items. The marker value is opaque to the client.
   * @param options - Options to the Page Blob Get Page Ranges Diff operation.
   */
  listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker2, options) {
    return __asyncGenerator(this, arguments, function* listPageRangeDiffItemSegments_1() {
      let getPageRangeItemSegmentsResponse;
      if (!!marker2 || marker2 === void 0) {
        do {
          getPageRangeItemSegmentsResponse = yield __await(this.listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker2, options));
          marker2 = getPageRangeItemSegmentsResponse.continuationToken;
          yield yield __await(yield __await(getPageRangeItemSegmentsResponse));
        } while (marker2);
      }
    });
  }
  /**
   * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects
   *
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.
   * @param options - Options to the Page Blob Get Page Ranges Diff operation.
   */
  listPageRangeDiffItems(offset, count, prevSnapshotOrUrl, options) {
    return __asyncGenerator(this, arguments, function* listPageRangeDiffItems_1() {
      var e_2, _a3;
      let marker2;
      try {
        for (var _b2 = __asyncValues(this.listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker2, options)), _c2; _c2 = yield __await(_b2.next()), !_c2.done; ) {
          const getPageRangesSegment = _c2.value;
          yield __await(yield* __asyncDelegator(__asyncValues(ExtractPageRangeInfoItems(getPageRangesSegment))));
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c2 && !_c2.done && (_a3 = _b2.return))
            yield __await(_a3.call(_b2));
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
    });
  }
  /**
   * Returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.
   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
   *
   *  .byPage() returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.
   *
   * Example using `for await` syntax:
   *
   * ```js
   * // Get the pageBlobClient before you run these snippets,
   * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>").getPageBlobClient("<your-blob-name>");`
   * let i = 1;
   * for await (const pageRange of pageBlobClient.listPageRangesDiff()) {
   *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let i = 1;
   * let iter = pageBlobClient.listPageRangesDiff();
   * let pageRangeItem = await iter.next();
   * while (!pageRangeItem.done) {
   *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);
   *   pageRangeItem = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * // passing optional maxPageSize in the page settings
   * let i = 1;
   * for await (const response of pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 20 })) {
   *   for (const pageRange of response) {
   *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
   *   }
   * }
   * ```
   *
   * Example using paging with a marker:
   *
   * ```js
   * let i = 1;
   * let iterator = pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 2 });
   * let response = (await iterator.next()).value;
   *
   * // Prints 2 page ranges
   * for (const pageRange of response) {
   *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
   * }
   *
   * // Gets next marker
   * let marker = response.continuationToken;
   *
   * // Passing next marker as continuationToken
   *
   * iterator = pageBlobClient.listPageRangesDiff().byPage({ continuationToken: marker, maxPageSize: 10 });
   * response = (await iterator.next()).value;
   *
   * // Prints 10 page ranges
   * for (const blob of response) {
   *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
   * }
   * ```
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.
   * @param options - Options to the Page Blob Get Ranges operation.
   * @returns An asyncIterableIterator that supports paging.
   */
  listPageRangesDiff(offset, count, prevSnapshot, options = {}) {
    options.conditions = options.conditions || {};
    const iter = this.listPageRangeDiffItems(offset, count, prevSnapshot, Object.assign({}, options));
    return {
      /**
       * The next method, part of the iteration protocol
       */
      next() {
        return iter.next();
      },
      /**
       * The connection to the async iterator, part of the iteration protocol
       */
      [Symbol.asyncIterator]() {
        return this;
      },
      /**
       * Return an AsyncIterableIterator that works a page at a time
       */
      byPage: (settings = {}) => {
        return this.listPageRangeDiffItemSegments(offset, count, prevSnapshot, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, options));
      }
    };
  }
  /**
   * Gets the collection of page ranges that differ between a specified snapshot and this page blob for managed disks.
   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
   *
   * @param offset - Starting byte position of the page blob
   * @param count - Number of bytes to get ranges diff.
   * @param prevSnapshotUrl - URL of snapshot to retrieve the difference.
   * @param options - Options to the Page Blob Get Page Ranges Diff operation.
   * @returns Response data for the Page Blob Get Page Range Diff operation.
   */
  async getPageRangesDiffForManagedDisks(offset, count, prevSnapshotUrl2, options = {}) {
    var _a3;
    options.conditions = options.conditions || {};
    const { span, updatedOptions } = createSpan2("PageBlobClient-GetPageRangesDiffForManagedDisks", options);
    try {
      return await this.pageBlobContext.getPageRangesDiff(Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), prevSnapshotUrl: prevSnapshotUrl2, range: rangeToString({ offset, count }) }, convertTracingToRequestOptionsBase(updatedOptions))).then(rangeResponseFromModel);
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Resizes the page blob to the specified size (which must be a multiple of 512).
   * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties
   *
   * @param size - Target size
   * @param options - Options to the Page Blob Resize operation.
   * @returns Response data for the Page Blob Resize operation.
   */
  async resize(size, options = {}) {
    var _a3;
    options.conditions = options.conditions || {};
    const { span, updatedOptions } = createSpan2("PageBlobClient-resize", options);
    try {
      return await this.pageBlobContext.resize(size, Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }), encryptionScope: options.encryptionScope }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Sets a page blob's sequence number.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
   *
   * @param sequenceNumberAction - Indicates how the service should modify the blob's sequence number.
   * @param sequenceNumber - Required if sequenceNumberAction is max or update
   * @param options - Options to the Page Blob Update Sequence Number operation.
   * @returns Response data for the Page Blob Update Sequence Number operation.
   */
  async updateSequenceNumber(sequenceNumberAction2, sequenceNumber, options = {}) {
    var _a3;
    options.conditions = options.conditions || {};
    const { span, updatedOptions } = createSpan2("PageBlobClient-updateSequenceNumber", options);
    try {
      return await this.pageBlobContext.updateSequenceNumber(sequenceNumberAction2, Object.assign({ abortSignal: options.abortSignal, blobSequenceNumber: sequenceNumber, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.
   * The snapshot is copied such that only the differential changes between the previously
   * copied snapshot are transferred to the destination.
   * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.
   * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob
   * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots
   *
   * @param copySource - Specifies the name of the source page blob snapshot. For example,
   *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
   * @param options - Options to the Page Blob Copy Incremental operation.
   * @returns Response data for the Page Blob Copy Incremental operation.
   */
  async startCopyIncremental(copySource2, options = {}) {
    var _a3;
    const { span, updatedOptions } = createSpan2("PageBlobClient-startCopyIncremental", options);
    try {
      return await this.pageBlobContext.copyIncremental(copySource2, Object.assign({ abortSignal: options.abortSignal, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js
async function getBodyAsText(batchResponse) {
  const blob = await batchResponse.blobBody;
  return blobToString(blob);
}
function utf8ByteLength(str) {
  return new Blob([str]).size;
}

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js
var HTTP_HEADER_DELIMITER = ": ";
var SPACE_DELIMITER = " ";
var NOT_FOUND = -1;
var BatchResponseParser = class {
  constructor(batchResponse, subRequests) {
    if (!batchResponse || !batchResponse.contentType) {
      throw new RangeError("batchResponse is malformed or doesn't contain valid content-type.");
    }
    if (!subRequests || subRequests.size === 0) {
      throw new RangeError("Invalid state: subRequests is not provided or size is 0.");
    }
    this.batchResponse = batchResponse;
    this.subRequests = subRequests;
    this.responseBatchBoundary = this.batchResponse.contentType.split("=")[1];
    this.perResponsePrefix = `--${this.responseBatchBoundary}${HTTP_LINE_ENDING}`;
    this.batchResponseEnding = `--${this.responseBatchBoundary}--`;
  }
  // For example of response, please refer to https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#response
  async parseBatchResponse() {
    if (this.batchResponse._response.status !== HTTPURLConnection.HTTP_ACCEPTED) {
      throw new Error(`Invalid state: batch request failed with status: '${this.batchResponse._response.status}'.`);
    }
    const responseBodyAsText = await getBodyAsText(this.batchResponse);
    const subResponses = responseBodyAsText.split(this.batchResponseEnding)[0].split(this.perResponsePrefix).slice(1);
    const subResponseCount = subResponses.length;
    if (subResponseCount !== this.subRequests.size && subResponseCount !== 1) {
      throw new Error("Invalid state: sub responses' count is not equal to sub requests' count.");
    }
    const deserializedSubResponses = new Array(subResponseCount);
    let subResponsesSucceededCount = 0;
    let subResponsesFailedCount = 0;
    for (let index = 0; index < subResponseCount; index++) {
      const subResponse = subResponses[index];
      const deserializedSubResponse = {};
      deserializedSubResponse.headers = new HttpHeaders();
      const responseLines = subResponse.split(`${HTTP_LINE_ENDING}`);
      let subRespHeaderStartFound = false;
      let subRespHeaderEndFound = false;
      let subRespFailed = false;
      let contentId = NOT_FOUND;
      for (const responseLine of responseLines) {
        if (!subRespHeaderStartFound) {
          if (responseLine.startsWith(HeaderConstants2.CONTENT_ID)) {
            contentId = parseInt(responseLine.split(HTTP_HEADER_DELIMITER)[1]);
          }
          if (responseLine.startsWith(HTTP_VERSION_1_1)) {
            subRespHeaderStartFound = true;
            const tokens = responseLine.split(SPACE_DELIMITER);
            deserializedSubResponse.status = parseInt(tokens[1]);
            deserializedSubResponse.statusMessage = tokens.slice(2).join(SPACE_DELIMITER);
          }
          continue;
        }
        if (responseLine.trim() === "") {
          if (!subRespHeaderEndFound) {
            subRespHeaderEndFound = true;
          }
          continue;
        }
        if (!subRespHeaderEndFound) {
          if (responseLine.indexOf(HTTP_HEADER_DELIMITER) === -1) {
            throw new Error(`Invalid state: find non-empty line '${responseLine}' without HTTP header delimiter '${HTTP_HEADER_DELIMITER}'.`);
          }
          const tokens = responseLine.split(HTTP_HEADER_DELIMITER);
          deserializedSubResponse.headers.set(tokens[0], tokens[1]);
          if (tokens[0] === HeaderConstants2.X_MS_ERROR_CODE) {
            deserializedSubResponse.errorCode = tokens[1];
            subRespFailed = true;
          }
        } else {
          if (!deserializedSubResponse.bodyAsText) {
            deserializedSubResponse.bodyAsText = "";
          }
          deserializedSubResponse.bodyAsText += responseLine;
        }
      }
      if (contentId !== NOT_FOUND && Number.isInteger(contentId) && contentId >= 0 && contentId < this.subRequests.size && deserializedSubResponses[contentId] === void 0) {
        deserializedSubResponse._request = this.subRequests.get(contentId);
        deserializedSubResponses[contentId] = deserializedSubResponse;
      } else {
        logger2.error(`subResponses[${index}] is dropped as the Content-ID is not found or invalid, Content-ID: ${contentId}`);
      }
      if (subRespFailed) {
        subResponsesFailedCount++;
      } else {
        subResponsesSucceededCount++;
      }
    }
    return {
      subResponses: deserializedSubResponses,
      subResponsesSucceededCount,
      subResponsesFailedCount
    };
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js
var MutexLockStatus;
(function(MutexLockStatus2) {
  MutexLockStatus2[MutexLockStatus2["LOCKED"] = 0] = "LOCKED";
  MutexLockStatus2[MutexLockStatus2["UNLOCKED"] = 1] = "UNLOCKED";
})(MutexLockStatus || (MutexLockStatus = {}));
var Mutex = class {
  /**
   * Lock for a specific key. If the lock has been acquired by another customer, then
   * will wait until getting the lock.
   *
   * @param key - lock key
   */
  static async lock(key) {
    return new Promise((resolve) => {
      if (this.keys[key] === void 0 || this.keys[key] === MutexLockStatus.UNLOCKED) {
        this.keys[key] = MutexLockStatus.LOCKED;
        resolve();
      } else {
        this.onUnlockEvent(key, () => {
          this.keys[key] = MutexLockStatus.LOCKED;
          resolve();
        });
      }
    });
  }
  /**
   * Unlock a key.
   *
   * @param key -
   */
  static async unlock(key) {
    return new Promise((resolve) => {
      if (this.keys[key] === MutexLockStatus.LOCKED) {
        this.emitUnlockEvent(key);
      }
      delete this.keys[key];
      resolve();
    });
  }
  static onUnlockEvent(key, handler) {
    if (this.listeners[key] === void 0) {
      this.listeners[key] = [handler];
    } else {
      this.listeners[key].push(handler);
    }
  }
  static emitUnlockEvent(key) {
    if (this.listeners[key] !== void 0 && this.listeners[key].length > 0) {
      const handler = this.listeners[key].shift();
      setImmediate(() => {
        handler.call(this);
      });
    }
  }
};
Mutex.keys = {};
Mutex.listeners = {};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js
var BlobBatch = class {
  constructor() {
    this.batch = "batch";
    this.batchRequest = new InnerBatchRequest();
  }
  /**
   * Get the value of Content-Type for a batch request.
   * The value must be multipart/mixed with a batch boundary.
   * Example: multipart/mixed; boundary=batch_a81786c8-e301-4e42-a729-a32ca24ae252
   */
  getMultiPartContentType() {
    return this.batchRequest.getMultipartContentType();
  }
  /**
   * Get assembled HTTP request body for sub requests.
   */
  getHttpRequestBody() {
    return this.batchRequest.getHttpRequestBody();
  }
  /**
   * Get sub requests that are added into the batch request.
   */
  getSubRequests() {
    return this.batchRequest.getSubRequests();
  }
  async addSubRequestInternal(subRequest, assembleSubRequestFunc) {
    await Mutex.lock(this.batch);
    try {
      this.batchRequest.preAddSubRequest(subRequest);
      await assembleSubRequestFunc();
      this.batchRequest.postAddSubRequest(subRequest);
    } finally {
      await Mutex.unlock(this.batch);
    }
  }
  setBatchType(batchType) {
    if (!this.batchType) {
      this.batchType = batchType;
    }
    if (this.batchType !== batchType) {
      throw new RangeError(`BlobBatch only supports one operation type per batch and it already is being used for ${this.batchType} operations.`);
    }
  }
  async deleteBlob(urlOrBlobClient, credentialOrOptions, options) {
    let url2;
    let credential;
    if (typeof urlOrBlobClient === "string" && (isNode && credentialOrOptions instanceof StorageSharedKeyCredential || credentialOrOptions instanceof AnonymousCredential || isTokenCredential(credentialOrOptions))) {
      url2 = urlOrBlobClient;
      credential = credentialOrOptions;
    } else if (urlOrBlobClient instanceof BlobClient) {
      url2 = urlOrBlobClient.url;
      credential = urlOrBlobClient.credential;
      options = credentialOrOptions;
    } else {
      throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");
    }
    if (!options) {
      options = {};
    }
    const { span, updatedOptions } = createSpan2("BatchDeleteRequest-addSubRequest", options);
    try {
      this.setBatchType("delete");
      await this.addSubRequestInternal({
        url: url2,
        credential
      }, async () => {
        await new BlobClient(url2, this.batchRequest.createPipeline(credential)).delete(updatedOptions);
      });
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  async setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options) {
    let url2;
    let credential;
    let tier2;
    if (typeof urlOrBlobClient === "string" && (isNode && credentialOrTier instanceof StorageSharedKeyCredential || credentialOrTier instanceof AnonymousCredential || isTokenCredential(credentialOrTier))) {
      url2 = urlOrBlobClient;
      credential = credentialOrTier;
      tier2 = tierOrOptions;
    } else if (urlOrBlobClient instanceof BlobClient) {
      url2 = urlOrBlobClient.url;
      credential = urlOrBlobClient.credential;
      tier2 = credentialOrTier;
      options = tierOrOptions;
    } else {
      throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");
    }
    if (!options) {
      options = {};
    }
    const { span, updatedOptions } = createSpan2("BatchSetTierRequest-addSubRequest", options);
    try {
      this.setBatchType("setAccessTier");
      await this.addSubRequestInternal({
        url: url2,
        credential
      }, async () => {
        await new BlobClient(url2, this.batchRequest.createPipeline(credential)).setAccessTier(tier2, updatedOptions);
      });
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
};
var InnerBatchRequest = class {
  constructor() {
    this.operationCount = 0;
    this.body = "";
    const tempGuid = generateUuid();
    this.boundary = `batch_${tempGuid}`;
    this.subRequestPrefix = `--${this.boundary}${HTTP_LINE_ENDING}${HeaderConstants2.CONTENT_TYPE}: application/http${HTTP_LINE_ENDING}${HeaderConstants2.CONTENT_TRANSFER_ENCODING}: binary`;
    this.multipartContentType = `multipart/mixed; boundary=${this.boundary}`;
    this.batchRequestEnding = `--${this.boundary}--`;
    this.subRequests = /* @__PURE__ */ new Map();
  }
  /**
   * Create pipeline to assemble sub requests. The idea here is to use existing
   * credential and serialization/deserialization components, with additional policies to
   * filter unnecessary headers, assemble sub requests into request's body
   * and intercept request from going to wire.
   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
   */
  createPipeline(credential) {
    const isAnonymousCreds = credential instanceof AnonymousCredential;
    const policyFactoryLength = 3 + (isAnonymousCreds ? 0 : 1);
    const factories = new Array(policyFactoryLength);
    factories[0] = deserializationPolicy();
    factories[1] = new BatchHeaderFilterPolicyFactory();
    if (!isAnonymousCreds) {
      factories[2] = isTokenCredential(credential) ? attachCredential(bearerTokenAuthenticationPolicy(credential, StorageOAuthScopes), credential) : credential;
    }
    factories[policyFactoryLength - 1] = new BatchRequestAssemblePolicyFactory(this);
    return new Pipeline(factories, {});
  }
  appendSubRequestToBody(request) {
    this.body += [
      this.subRequestPrefix,
      `${HeaderConstants2.CONTENT_ID}: ${this.operationCount}`,
      "",
      `${request.method.toString()} ${getURLPathAndQuery(request.url)} ${HTTP_VERSION_1_1}${HTTP_LINE_ENDING}`
      // sub request start line with method
    ].join(HTTP_LINE_ENDING);
    for (const header of request.headers.headersArray()) {
      this.body += `${header.name}: ${header.value}${HTTP_LINE_ENDING}`;
    }
    this.body += HTTP_LINE_ENDING;
  }
  preAddSubRequest(subRequest) {
    if (this.operationCount >= BATCH_MAX_REQUEST) {
      throw new RangeError(`Cannot exceed ${BATCH_MAX_REQUEST} sub requests in a single batch`);
    }
    const path = getURLPath(subRequest.url);
    if (!path || path === "") {
      throw new RangeError(`Invalid url for sub request: '${subRequest.url}'`);
    }
  }
  postAddSubRequest(subRequest) {
    this.subRequests.set(this.operationCount, subRequest);
    this.operationCount++;
  }
  // Return the http request body with assembling the ending line to the sub request body.
  getHttpRequestBody() {
    return `${this.body}${this.batchRequestEnding}${HTTP_LINE_ENDING}`;
  }
  getMultipartContentType() {
    return this.multipartContentType;
  }
  getSubRequests() {
    return this.subRequests;
  }
};
var BatchRequestAssemblePolicy = class extends BaseRequestPolicy {
  constructor(batchRequest, nextPolicy, options) {
    super(nextPolicy, options);
    this.dummyResponse = {
      request: new WebResource(),
      status: 200,
      headers: new HttpHeaders()
    };
    this.batchRequest = batchRequest;
  }
  async sendRequest(request) {
    await this.batchRequest.appendSubRequestToBody(request);
    return this.dummyResponse;
  }
};
var BatchRequestAssemblePolicyFactory = class {
  constructor(batchRequest) {
    this.batchRequest = batchRequest;
  }
  create(nextPolicy, options) {
    return new BatchRequestAssemblePolicy(this.batchRequest, nextPolicy, options);
  }
};
var BatchHeaderFilterPolicy = class extends BaseRequestPolicy {
  // The base class has a protected constructor. Adding a public one to enable constructing of this class.
  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/
  constructor(nextPolicy, options) {
    super(nextPolicy, options);
  }
  async sendRequest(request) {
    let xMsHeaderName = "";
    for (const header of request.headers.headersArray()) {
      if (iEqual(header.name, HeaderConstants2.X_MS_VERSION)) {
        xMsHeaderName = header.name;
      }
    }
    if (xMsHeaderName !== "") {
      request.headers.remove(xMsHeaderName);
    }
    return this._nextPolicy.sendRequest(request);
  }
};
var BatchHeaderFilterPolicyFactory = class {
  create(nextPolicy, options) {
    return new BatchHeaderFilterPolicy(nextPolicy, options);
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js
var BlobBatchClient = class {
  constructor(url2, credentialOrPipeline, options) {
    let pipeline;
    if (isPipelineLike(credentialOrPipeline)) {
      pipeline = credentialOrPipeline;
    } else if (!credentialOrPipeline) {
      pipeline = newPipeline(new AnonymousCredential(), options);
    } else {
      pipeline = newPipeline(credentialOrPipeline, options);
    }
    const storageClientContext = new StorageClientContext(url2, pipeline.toServiceClientOptions());
    const path = getURLPath(url2);
    if (path && path !== "/") {
      this.serviceOrContainerContext = new Container(storageClientContext);
    } else {
      this.serviceOrContainerContext = new Service(storageClientContext);
    }
  }
  /**
   * Creates a {@link BlobBatch}.
   * A BlobBatch represents an aggregated set of operations on blobs.
   */
  createBatch() {
    return new BlobBatch();
  }
  async deleteBlobs(urlsOrBlobClients, credentialOrOptions, options) {
    const batch = new BlobBatch();
    for (const urlOrBlobClient of urlsOrBlobClients) {
      if (typeof urlOrBlobClient === "string") {
        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);
      } else {
        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions);
      }
    }
    return this.submitBatch(batch);
  }
  async setBlobsAccessTier(urlsOrBlobClients, credentialOrTier, tierOrOptions, options) {
    const batch = new BlobBatch();
    for (const urlOrBlobClient of urlsOrBlobClients) {
      if (typeof urlOrBlobClient === "string") {
        await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);
      } else {
        await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);
      }
    }
    return this.submitBatch(batch);
  }
  /**
   * Submit batch request which consists of multiple subrequests.
   *
   * Get `blobBatchClient` and other details before running the snippets.
   * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`
   *
   * Example usage:
   *
   * ```js
   * let batchRequest = new BlobBatch();
   * await batchRequest.deleteBlob(urlInString0, credential0);
   * await batchRequest.deleteBlob(urlInString1, credential1, {
   *  deleteSnapshots: "include"
   * });
   * const batchResp = await blobBatchClient.submitBatch(batchRequest);
   * console.log(batchResp.subResponsesSucceededCount);
   * ```
   *
   * Example using a lease:
   *
   * ```js
   * let batchRequest = new BlobBatch();
   * await batchRequest.setBlobAccessTier(blockBlobClient0, "Cool");
   * await batchRequest.setBlobAccessTier(blockBlobClient1, "Cool", {
   *  conditions: { leaseId: leaseId }
   * });
   * const batchResp = await blobBatchClient.submitBatch(batchRequest);
   * console.log(batchResp.subResponsesSucceededCount);
   * ```
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
   *
   * @param batchRequest - A set of Delete or SetTier operations.
   * @param options -
   */
  async submitBatch(batchRequest, options = {}) {
    if (!batchRequest || batchRequest.getSubRequests().size === 0) {
      throw new RangeError("Batch request should contain one or more sub requests.");
    }
    const { span, updatedOptions } = createSpan2("BlobBatchClient-submitBatch", options);
    try {
      const batchRequestBody = batchRequest.getHttpRequestBody();
      const rawBatchResponse = await this.serviceOrContainerContext.submitBatch(utf8ByteLength(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign(Object.assign({}, options), convertTracingToRequestOptionsBase(updatedOptions)));
      const batchResponseParser = new BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());
      const responseSummary = await batchResponseParser.parseBatchResponse();
      const res = {
        _response: rawBatchResponse._response,
        contentType: rawBatchResponse.contentType,
        errorCode: rawBatchResponse.errorCode,
        requestId: rawBatchResponse.requestId,
        clientRequestId: rawBatchResponse.clientRequestId,
        version: rawBatchResponse.version,
        subResponses: responseSummary.subResponses,
        subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,
        subResponsesFailedCount: responseSummary.subResponsesFailedCount
      };
      return res;
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js
var ContainerClient = class extends StorageClient {
  constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, options) {
    let pipeline;
    let url2;
    options = options || {};
    if (isPipelineLike(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      url2 = urlOrConnectionString;
      pipeline = newPipeline(new AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string") {
      const containerName = credentialOrPipelineOrContainerName;
      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);
      if (extractedCreds.kind === "AccountConnString") {
        if (isNode) {
          const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url2 = appendToURLPath(extractedCreds.url, encodeURIComponent(containerName));
          if (!options.proxyOptions) {
            options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
          }
          pipeline = newPipeline(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url2 = appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)) + "?" + extractedCreds.accountSas;
        pipeline = newPipeline(new AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName parameter");
    }
    super(url2, pipeline);
    this._containerName = this.getContainerNameFromUrl();
    this.containerContext = new Container(this.storageClientContext);
  }
  /**
   * The name of the container.
   */
  get containerName() {
    return this._containerName;
  }
  /**
   * Creates a new container under the specified account. If the container with
   * the same name already exists, the operation fails.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
   * Naming rules: @see https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata
   *
   * @param options - Options to Container Create operation.
   *
   *
   * Example usage:
   *
   * ```js
   * const containerClient = blobServiceClient.getContainerClient("<container name>");
   * const createContainerResponse = await containerClient.create();
   * console.log("Container was created successfully", createContainerResponse.requestId);
   * ```
   */
  async create(options = {}) {
    const { span, updatedOptions } = createSpan2("ContainerClient-create", options);
    try {
      return await this.containerContext.create(Object.assign(Object.assign({}, options), convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Creates a new container under the specified account. If the container with
   * the same name already exists, it is not changed.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
   * Naming rules: @see https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata
   *
   * @param options -
   */
  async createIfNotExists(options = {}) {
    var _a3, _b2;
    const { span, updatedOptions } = createSpan2("ContainerClient-createIfNotExists", options);
    try {
      const res = await this.create(updatedOptions);
      return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });
    } catch (e) {
      if (((_a3 = e.details) === null || _a3 === void 0 ? void 0 : _a3.errorCode) === "ContainerAlreadyExists") {
        span.setStatus({
          code: SpanStatusCode2.ERROR,
          message: "Expected exception when creating a container only if it does not already exist."
        });
        return Object.assign(Object.assign({ succeeded: false }, (_b2 = e.response) === null || _b2 === void 0 ? void 0 : _b2.parsedHeaders), { _response: e.response });
      }
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Returns true if the Azure container resource represented by this client exists; false otherwise.
   *
   * NOTE: use this function with care since an existing container might be deleted by other clients or
   * applications. Vice versa new containers with the same name might be added by other clients or
   * applications after this function completes.
   *
   * @param options -
   */
  async exists(options = {}) {
    const { span, updatedOptions } = createSpan2("ContainerClient-exists", options);
    try {
      await this.getProperties({
        abortSignal: options.abortSignal,
        tracingOptions: updatedOptions.tracingOptions
      });
      return true;
    } catch (e) {
      if (e.statusCode === 404) {
        span.setStatus({
          code: SpanStatusCode2.ERROR,
          message: "Expected exception when checking container existence"
        });
        return false;
      }
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Creates a {@link BlobClient}
   *
   * @param blobName - A blob name
   * @returns A new BlobClient object for the given blob name.
   */
  getBlobClient(blobName) {
    return new BlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);
  }
  /**
   * Creates an {@link AppendBlobClient}
   *
   * @param blobName - An append blob name
   */
  getAppendBlobClient(blobName) {
    return new AppendBlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);
  }
  /**
   * Creates a {@link BlockBlobClient}
   *
   * @param blobName - A block blob name
   *
   *
   * Example usage:
   *
   * ```js
   * const content = "Hello world!";
   *
   * const blockBlobClient = containerClient.getBlockBlobClient("<blob name>");
   * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);
   * ```
   */
  getBlockBlobClient(blobName) {
    return new BlockBlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);
  }
  /**
   * Creates a {@link PageBlobClient}
   *
   * @param blobName - A page blob name
   */
  getPageBlobClient(blobName) {
    return new PageBlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);
  }
  /**
   * Returns all user-defined metadata and system properties for the specified
   * container. The data returned does not include the container's list of blobs.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties
   *
   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if
   * they originally contained uppercase characters. This differs from the metadata keys returned by
   * the `listContainers` method of {@link BlobServiceClient} using the `includeMetadata` option, which
   * will retain their original casing.
   *
   * @param options - Options to Container Get Properties operation.
   */
  async getProperties(options = {}) {
    if (!options.conditions) {
      options.conditions = {};
    }
    const { span, updatedOptions } = createSpan2("ContainerClient-getProperties", options);
    try {
      return await this.containerContext.getProperties(Object.assign(Object.assign({ abortSignal: options.abortSignal }, options.conditions), convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Marks the specified container for deletion. The container and any blobs
   * contained within it are later deleted during garbage collection.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
   *
   * @param options - Options to Container Delete operation.
   */
  async delete(options = {}) {
    if (!options.conditions) {
      options.conditions = {};
    }
    const { span, updatedOptions } = createSpan2("ContainerClient-delete", options);
    try {
      return await this.containerContext.delete(Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, modifiedAccessConditions: options.conditions }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Marks the specified container for deletion if it exists. The container and any blobs
   * contained within it are later deleted during garbage collection.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
   *
   * @param options - Options to Container Delete operation.
   */
  async deleteIfExists(options = {}) {
    var _a3, _b2;
    const { span, updatedOptions } = createSpan2("ContainerClient-deleteIfExists", options);
    try {
      const res = await this.delete(updatedOptions);
      return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });
    } catch (e) {
      if (((_a3 = e.details) === null || _a3 === void 0 ? void 0 : _a3.errorCode) === "ContainerNotFound") {
        span.setStatus({
          code: SpanStatusCode2.ERROR,
          message: "Expected exception when deleting a container only if it exists."
        });
        return Object.assign(Object.assign({ succeeded: false }, (_b2 = e.response) === null || _b2 === void 0 ? void 0 : _b2.parsedHeaders), { _response: e.response });
      }
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Sets one or more user-defined name-value pairs for the specified container.
   *
   * If no option provided, or no metadata defined in the parameter, the container
   * metadata will be removed.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata
   *
   * @param metadata - Replace existing metadata with this value.
   *                            If no value provided the existing metadata will be removed.
   * @param options - Options to Container Set Metadata operation.
   */
  async setMetadata(metadata2, options = {}) {
    if (!options.conditions) {
      options.conditions = {};
    }
    if (options.conditions.ifUnmodifiedSince) {
      throw new RangeError("the IfUnmodifiedSince must have their default values because they are ignored by the blob service");
    }
    const { span, updatedOptions } = createSpan2("ContainerClient-setMetadata", options);
    try {
      return await this.containerContext.setMetadata(Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions, metadata: metadata2, modifiedAccessConditions: options.conditions }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Gets the permissions for the specified container. The permissions indicate
   * whether container data may be accessed publicly.
   *
   * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.
   * For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will get "2018-12-31T03:44:23.882Z".
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl
   *
   * @param options - Options to Container Get Access Policy operation.
   */
  async getAccessPolicy(options = {}) {
    if (!options.conditions) {
      options.conditions = {};
    }
    const { span, updatedOptions } = createSpan2("ContainerClient-getAccessPolicy", options);
    try {
      const response = await this.containerContext.getAccessPolicy(Object.assign({ abortSignal: options.abortSignal, leaseAccessConditions: options.conditions }, convertTracingToRequestOptionsBase(updatedOptions)));
      const res = {
        _response: response._response,
        blobPublicAccess: response.blobPublicAccess,
        date: response.date,
        etag: response.etag,
        errorCode: response.errorCode,
        lastModified: response.lastModified,
        requestId: response.requestId,
        clientRequestId: response.clientRequestId,
        signedIdentifiers: [],
        version: response.version
      };
      for (const identifier of response) {
        let accessPolicy = void 0;
        if (identifier.accessPolicy) {
          accessPolicy = {
            permissions: identifier.accessPolicy.permissions
          };
          if (identifier.accessPolicy.expiresOn) {
            accessPolicy.expiresOn = new Date(identifier.accessPolicy.expiresOn);
          }
          if (identifier.accessPolicy.startsOn) {
            accessPolicy.startsOn = new Date(identifier.accessPolicy.startsOn);
          }
        }
        res.signedIdentifiers.push({
          accessPolicy,
          id: identifier.id
        });
      }
      return res;
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Sets the permissions for the specified container. The permissions indicate
   * whether blobs in a container may be accessed publicly.
   *
   * When you set permissions for a container, the existing permissions are replaced.
   * If no access or containerAcl provided, the existing container ACL will be
   * removed.
   *
   * When you establish a stored access policy on a container, it may take up to 30 seconds to take effect.
   * During this interval, a shared access signature that is associated with the stored access policy will
   * fail with status code 403 (Forbidden), until the access policy becomes active.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl
   *
   * @param access - The level of public access to data in the container.
   * @param containerAcl - Array of elements each having a unique Id and details of the access policy.
   * @param options - Options to Container Set Access Policy operation.
   */
  async setAccessPolicy(access2, containerAcl2, options = {}) {
    options.conditions = options.conditions || {};
    const { span, updatedOptions } = createSpan2("ContainerClient-setAccessPolicy", options);
    try {
      const acl = [];
      for (const identifier of containerAcl2 || []) {
        acl.push({
          accessPolicy: {
            expiresOn: identifier.accessPolicy.expiresOn ? truncatedISO8061Date(identifier.accessPolicy.expiresOn) : "",
            permissions: identifier.accessPolicy.permissions,
            startsOn: identifier.accessPolicy.startsOn ? truncatedISO8061Date(identifier.accessPolicy.startsOn) : ""
          },
          id: identifier.id
        });
      }
      return await this.containerContext.setAccessPolicy(Object.assign({ abortSignal: options.abortSignal, access: access2, containerAcl: acl, leaseAccessConditions: options.conditions, modifiedAccessConditions: options.conditions }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Get a {@link BlobLeaseClient} that manages leases on the container.
   *
   * @param proposeLeaseId - Initial proposed lease Id.
   * @returns A new BlobLeaseClient object for managing leases on the container.
   */
  getBlobLeaseClient(proposeLeaseId) {
    return new BlobLeaseClient(this, proposeLeaseId);
  }
  /**
   * Creates a new block blob, or updates the content of an existing block blob.
   *
   * Updating an existing block blob overwrites any existing metadata on the blob.
   * Partial updates are not supported; the content of the existing blob is
   * overwritten with the new content. To perform a partial update of a block blob's,
   * use {@link BlockBlobClient.stageBlock} and {@link BlockBlobClient.commitBlockList}.
   *
   * This is a non-parallel uploading method, please use {@link BlockBlobClient.uploadFile},
   * {@link BlockBlobClient.uploadStream} or {@link BlockBlobClient.uploadBrowserData} for better
   * performance with concurrency uploading.
   *
   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param blobName - Name of the block blob to create or update.
   * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function
   *                               which returns a new Readable stream whose offset is from data source beginning.
   * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a
   *                               string including non non-Base64/Hex-encoded characters.
   * @param options - Options to configure the Block Blob Upload operation.
   * @returns Block Blob upload response data and the corresponding BlockBlobClient instance.
   */
  async uploadBlockBlob(blobName, body2, contentLength2, options = {}) {
    const { span, updatedOptions } = createSpan2("ContainerClient-uploadBlockBlob", options);
    try {
      const blockBlobClient = this.getBlockBlobClient(blobName);
      const response = await blockBlobClient.upload(body2, contentLength2, updatedOptions);
      return {
        blockBlobClient,
        response
      };
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Marks the specified blob or snapshot for deletion. The blob is later deleted
   * during garbage collection. Note that in order to delete a blob, you must delete
   * all of its snapshots. You can delete both at the same time with the Delete
   * Blob operation.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
   *
   * @param blobName -
   * @param options - Options to Blob Delete operation.
   * @returns Block blob deletion response data.
   */
  async deleteBlob(blobName, options = {}) {
    const { span, updatedOptions } = createSpan2("ContainerClient-deleteBlob", options);
    try {
      let blobClient = this.getBlobClient(blobName);
      if (options.versionId) {
        blobClient = blobClient.withVersion(options.versionId);
      }
      return await blobClient.delete(updatedOptions);
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * listBlobFlatSegment returns a single segment of blobs starting from the
   * specified Marker. Use an empty Marker to start enumeration from the beginning.
   * After getting a segment, process it, and then call listBlobsFlatSegment again
   * (passing the the previously-returned Marker) to get the next segment.
   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs
   *
   * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
   * @param options - Options to Container List Blob Flat Segment operation.
   */
  async listBlobFlatSegment(marker2, options = {}) {
    const { span, updatedOptions } = createSpan2("ContainerClient-listBlobFlatSegment", options);
    try {
      const response = await this.containerContext.listBlobFlatSegment(Object.assign(Object.assign({ marker: marker2 }, options), convertTracingToRequestOptionsBase(updatedOptions)));
      const wrappedResponse = Object.assign(Object.assign({}, response), { _response: Object.assign(Object.assign({}, response._response), { parsedBody: ConvertInternalResponseOfListBlobFlat(response._response.parsedBody) }), segment: Object.assign(Object.assign({}, response.segment), { blobItems: response.segment.blobItems.map((blobItemInteral) => {
        const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name), tags: toTags(blobItemInteral.blobTags), objectReplicationSourceProperties: parseObjectReplicationRecord(blobItemInteral.objectReplicationMetadata) });
        return blobItem;
      }) }) });
      return wrappedResponse;
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * listBlobHierarchySegment returns a single segment of blobs starting from
   * the specified Marker. Use an empty Marker to start enumeration from the
   * beginning. After getting a segment, process it, and then call listBlobsHierarchicalSegment
   * again (passing the the previously-returned Marker) to get the next segment.
   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs
   *
   * @param delimiter - The character or string used to define the virtual hierarchy
   * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
   * @param options - Options to Container List Blob Hierarchy Segment operation.
   */
  async listBlobHierarchySegment(delimiter2, marker2, options = {}) {
    var _a3;
    const { span, updatedOptions } = createSpan2("ContainerClient-listBlobHierarchySegment", options);
    try {
      const response = await this.containerContext.listBlobHierarchySegment(delimiter2, Object.assign(Object.assign({ marker: marker2 }, options), convertTracingToRequestOptionsBase(updatedOptions)));
      const wrappedResponse = Object.assign(Object.assign({}, response), { _response: Object.assign(Object.assign({}, response._response), { parsedBody: ConvertInternalResponseOfListBlobHierarchy(response._response.parsedBody) }), segment: Object.assign(Object.assign({}, response.segment), { blobItems: response.segment.blobItems.map((blobItemInteral) => {
        const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name), tags: toTags(blobItemInteral.blobTags), objectReplicationSourceProperties: parseObjectReplicationRecord(blobItemInteral.objectReplicationMetadata) });
        return blobItem;
      }), blobPrefixes: (_a3 = response.segment.blobPrefixes) === null || _a3 === void 0 ? void 0 : _a3.map((blobPrefixInternal) => {
        const blobPrefix = Object.assign(Object.assign({}, blobPrefixInternal), { name: BlobNameToString(blobPrefixInternal.name) });
        return blobPrefix;
      }) }) });
      return wrappedResponse;
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Returns an AsyncIterableIterator for ContainerListBlobFlatSegmentResponse
   *
   * @param marker - A string value that identifies the portion of
   *                          the list of blobs to be returned with the next listing operation. The
   *                          operation returns the ContinuationToken value within the response body if the
   *                          listing operation did not return all blobs remaining to be listed
   *                          with the current page. The ContinuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of list
   *                          items. The marker value is opaque to the client.
   * @param options - Options to list blobs operation.
   */
  listSegments(marker2, options = {}) {
    return __asyncGenerator(this, arguments, function* listSegments_1() {
      let listBlobsFlatSegmentResponse;
      if (!!marker2 || marker2 === void 0) {
        do {
          listBlobsFlatSegmentResponse = yield __await(this.listBlobFlatSegment(marker2, options));
          marker2 = listBlobsFlatSegmentResponse.continuationToken;
          yield yield __await(yield __await(listBlobsFlatSegmentResponse));
        } while (marker2);
      }
    });
  }
  /**
   * Returns an AsyncIterableIterator of {@link BlobItem} objects
   *
   * @param options - Options to list blobs operation.
   */
  listItems(options = {}) {
    return __asyncGenerator(this, arguments, function* listItems_1() {
      var e_1, _a3;
      let marker2;
      try {
        for (var _b2 = __asyncValues(this.listSegments(marker2, options)), _c2; _c2 = yield __await(_b2.next()), !_c2.done; ) {
          const listBlobsFlatSegmentResponse = _c2.value;
          yield __await(yield* __asyncDelegator(__asyncValues(listBlobsFlatSegmentResponse.segment.blobItems)));
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c2 && !_c2.done && (_a3 = _b2.return))
            yield __await(_a3.call(_b2));
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    });
  }
  /**
   * Returns an async iterable iterator to list all the blobs
   * under the specified account.
   *
   * .byPage() returns an async iterable iterator to list the blobs in pages.
   *
   * Example using `for await` syntax:
   *
   * ```js
   * // Get the containerClient before you run these snippets,
   * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>");`
   * let i = 1;
   * for await (const blob of containerClient.listBlobsFlat()) {
   *   console.log(`Blob ${i++}: ${blob.name}`);
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let i = 1;
   * let iter = containerClient.listBlobsFlat();
   * let blobItem = await iter.next();
   * while (!blobItem.done) {
   *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
   *   blobItem = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * // passing optional maxPageSize in the page settings
   * let i = 1;
   * for await (const response of containerClient.listBlobsFlat().byPage({ maxPageSize: 20 })) {
   *   for (const blob of response.segment.blobItems) {
   *     console.log(`Blob ${i++}: ${blob.name}`);
   *   }
   * }
   * ```
   *
   * Example using paging with a marker:
   *
   * ```js
   * let i = 1;
   * let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });
   * let response = (await iterator.next()).value;
   *
   * // Prints 2 blob names
   * for (const blob of response.segment.blobItems) {
   *   console.log(`Blob ${i++}: ${blob.name}`);
   * }
   *
   * // Gets next marker
   * let marker = response.continuationToken;
   *
   * // Passing next marker as continuationToken
   *
   * iterator = containerClient.listBlobsFlat().byPage({ continuationToken: marker, maxPageSize: 10 });
   * response = (await iterator.next()).value;
   *
   * // Prints 10 blob names
   * for (const blob of response.segment.blobItems) {
   *   console.log(`Blob ${i++}: ${blob.name}`);
   * }
   * ```
   *
   * @param options - Options to list blobs.
   * @returns An asyncIterableIterator that supports paging.
   */
  listBlobsFlat(options = {}) {
    const include2 = [];
    if (options.includeCopy) {
      include2.push("copy");
    }
    if (options.includeDeleted) {
      include2.push("deleted");
    }
    if (options.includeMetadata) {
      include2.push("metadata");
    }
    if (options.includeSnapshots) {
      include2.push("snapshots");
    }
    if (options.includeVersions) {
      include2.push("versions");
    }
    if (options.includeUncommitedBlobs) {
      include2.push("uncommittedblobs");
    }
    if (options.includeTags) {
      include2.push("tags");
    }
    if (options.includeDeletedWithVersions) {
      include2.push("deletedwithversions");
    }
    if (options.includeImmutabilityPolicy) {
      include2.push("immutabilitypolicy");
    }
    if (options.includeLegalHold) {
      include2.push("legalhold");
    }
    if (options.prefix === "") {
      options.prefix = void 0;
    }
    const updatedOptions = Object.assign(Object.assign({}, options), include2.length > 0 ? { include: include2 } : {});
    const iter = this.listItems(updatedOptions);
    return {
      /**
       * The next method, part of the iteration protocol
       */
      next() {
        return iter.next();
      },
      /**
       * The connection to the async iterator, part of the iteration protocol
       */
      [Symbol.asyncIterator]() {
        return this;
      },
      /**
       * Return an AsyncIterableIterator that works a page at a time
       */
      byPage: (settings = {}) => {
        return this.listSegments(settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, updatedOptions));
      }
    };
  }
  /**
   * Returns an AsyncIterableIterator for ContainerListBlobHierarchySegmentResponse
   *
   * @param delimiter - The character or string used to define the virtual hierarchy
   * @param marker - A string value that identifies the portion of
   *                          the list of blobs to be returned with the next listing operation. The
   *                          operation returns the ContinuationToken value within the response body if the
   *                          listing operation did not return all blobs remaining to be listed
   *                          with the current page. The ContinuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of list
   *                          items. The marker value is opaque to the client.
   * @param options - Options to list blobs operation.
   */
  listHierarchySegments(delimiter2, marker2, options = {}) {
    return __asyncGenerator(this, arguments, function* listHierarchySegments_1() {
      let listBlobsHierarchySegmentResponse;
      if (!!marker2 || marker2 === void 0) {
        do {
          listBlobsHierarchySegmentResponse = yield __await(this.listBlobHierarchySegment(delimiter2, marker2, options));
          marker2 = listBlobsHierarchySegmentResponse.continuationToken;
          yield yield __await(yield __await(listBlobsHierarchySegmentResponse));
        } while (marker2);
      }
    });
  }
  /**
   * Returns an AsyncIterableIterator for {@link BlobPrefix} and {@link BlobItem} objects.
   *
   * @param delimiter - The character or string used to define the virtual hierarchy
   * @param options - Options to list blobs operation.
   */
  listItemsByHierarchy(delimiter2, options = {}) {
    return __asyncGenerator(this, arguments, function* listItemsByHierarchy_1() {
      var e_2, _a3;
      let marker2;
      try {
        for (var _b2 = __asyncValues(this.listHierarchySegments(delimiter2, marker2, options)), _c2; _c2 = yield __await(_b2.next()), !_c2.done; ) {
          const listBlobsHierarchySegmentResponse = _c2.value;
          const segment = listBlobsHierarchySegmentResponse.segment;
          if (segment.blobPrefixes) {
            for (const prefix2 of segment.blobPrefixes) {
              yield yield __await(Object.assign({ kind: "prefix" }, prefix2));
            }
          }
          for (const blob of segment.blobItems) {
            yield yield __await(Object.assign({ kind: "blob" }, blob));
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c2 && !_c2.done && (_a3 = _b2.return))
            yield __await(_a3.call(_b2));
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
    });
  }
  /**
   * Returns an async iterable iterator to list all the blobs by hierarchy.
   * under the specified account.
   *
   * .byPage() returns an async iterable iterator to list the blobs by hierarchy in pages.
   *
   * Example using `for await` syntax:
   *
   * ```js
   * for await (const item of containerClient.listBlobsByHierarchy("/")) {
   *   if (item.kind === "prefix") {
   *     console.log(`\tBlobPrefix: ${item.name}`);
   *   } else {
   *     console.log(`\tBlobItem: name - ${item.name}`);
   *   }
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let iter = containerClient.listBlobsByHierarchy("/", { prefix: "prefix1/" });
   * let entity = await iter.next();
   * while (!entity.done) {
   *   let item = entity.value;
   *   if (item.kind === "prefix") {
   *     console.log(`\tBlobPrefix: ${item.name}`);
   *   } else {
   *     console.log(`\tBlobItem: name - ${item.name}`);
   *   }
   *   entity = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * console.log("Listing blobs by hierarchy by page");
   * for await (const response of containerClient.listBlobsByHierarchy("/").byPage()) {
   *   const segment = response.segment;
   *   if (segment.blobPrefixes) {
   *     for (const prefix of segment.blobPrefixes) {
   *       console.log(`\tBlobPrefix: ${prefix.name}`);
   *     }
   *   }
   *   for (const blob of response.segment.blobItems) {
   *     console.log(`\tBlobItem: name - ${blob.name}`);
   *   }
   * }
   * ```
   *
   * Example using paging with a max page size:
   *
   * ```js
   * console.log("Listing blobs by hierarchy by page, specifying a prefix and a max page size");
   *
   * let i = 1;
   * for await (const response of containerClient
   *   .listBlobsByHierarchy("/", { prefix: "prefix2/sub1/" })
   *   .byPage({ maxPageSize: 2 })) {
   *   console.log(`Page ${i++}`);
   *   const segment = response.segment;
   *
   *   if (segment.blobPrefixes) {
   *     for (const prefix of segment.blobPrefixes) {
   *       console.log(`\tBlobPrefix: ${prefix.name}`);
   *     }
   *   }
   *
   *   for (const blob of response.segment.blobItems) {
   *     console.log(`\tBlobItem: name - ${blob.name}`);
   *   }
   * }
   * ```
   *
   * @param delimiter - The character or string used to define the virtual hierarchy
   * @param options - Options to list blobs operation.
   */
  listBlobsByHierarchy(delimiter2, options = {}) {
    if (delimiter2 === "") {
      throw new RangeError("delimiter should contain one or more characters");
    }
    const include2 = [];
    if (options.includeCopy) {
      include2.push("copy");
    }
    if (options.includeDeleted) {
      include2.push("deleted");
    }
    if (options.includeMetadata) {
      include2.push("metadata");
    }
    if (options.includeSnapshots) {
      include2.push("snapshots");
    }
    if (options.includeVersions) {
      include2.push("versions");
    }
    if (options.includeUncommitedBlobs) {
      include2.push("uncommittedblobs");
    }
    if (options.includeTags) {
      include2.push("tags");
    }
    if (options.includeDeletedWithVersions) {
      include2.push("deletedwithversions");
    }
    if (options.includeImmutabilityPolicy) {
      include2.push("immutabilitypolicy");
    }
    if (options.includeLegalHold) {
      include2.push("legalhold");
    }
    if (options.prefix === "") {
      options.prefix = void 0;
    }
    const updatedOptions = Object.assign(Object.assign({}, options), include2.length > 0 ? { include: include2 } : {});
    const iter = this.listItemsByHierarchy(delimiter2, updatedOptions);
    return {
      /**
       * The next method, part of the iteration protocol
       */
      async next() {
        return iter.next();
      },
      /**
       * The connection to the async iterator, part of the iteration protocol
       */
      [Symbol.asyncIterator]() {
        return this;
      },
      /**
       * Return an AsyncIterableIterator that works a page at a time
       */
      byPage: (settings = {}) => {
        return this.listHierarchySegments(delimiter2, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, updatedOptions));
      }
    };
  }
  /**
   * The Filter Blobs operation enables callers to list blobs in the container whose tags
   * match a given search expression.
   *
   * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                        The given expression must evaluate to true for a blob to be returned in the results.
   *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                        however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param marker - A string value that identifies the portion of
   *                          the list of blobs to be returned with the next listing operation. The
   *                          operation returns the continuationToken value within the response body if the
   *                          listing operation did not return all blobs remaining to be listed
   *                          with the current page. The continuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of list
   *                          items. The marker value is opaque to the client.
   * @param options - Options to find blobs by tags.
   */
  async findBlobsByTagsSegment(tagFilterSqlExpression, marker2, options = {}) {
    const { span, updatedOptions } = createSpan2("ContainerClient-findBlobsByTagsSegment", options);
    try {
      const response = await this.containerContext.filterBlobs(Object.assign({ abortSignal: options.abortSignal, where: tagFilterSqlExpression, marker: marker2, maxPageSize: options.maxPageSize }, convertTracingToRequestOptionsBase(updatedOptions)));
      const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, blobs: response.blobs.map((blob) => {
        var _a3;
        let tagValue = "";
        if (((_a3 = blob.tags) === null || _a3 === void 0 ? void 0 : _a3.blobTagSet.length) === 1) {
          tagValue = blob.tags.blobTagSet[0].value;
        }
        return Object.assign(Object.assign({}, blob), { tags: toTags(blob.tags), tagValue });
      }) });
      return wrappedResponse;
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Returns an AsyncIterableIterator for ContainerFindBlobsByTagsSegmentResponse.
   *
   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                         The given expression must evaluate to true for a blob to be returned in the results.
   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param marker - A string value that identifies the portion of
   *                          the list of blobs to be returned with the next listing operation. The
   *                          operation returns the continuationToken value within the response body if the
   *                          listing operation did not return all blobs remaining to be listed
   *                          with the current page. The continuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of list
   *                          items. The marker value is opaque to the client.
   * @param options - Options to find blobs by tags.
   */
  findBlobsByTagsSegments(tagFilterSqlExpression, marker2, options = {}) {
    return __asyncGenerator(this, arguments, function* findBlobsByTagsSegments_1() {
      let response;
      if (!!marker2 || marker2 === void 0) {
        do {
          response = yield __await(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker2, options));
          response.blobs = response.blobs || [];
          marker2 = response.continuationToken;
          yield yield __await(response);
        } while (marker2);
      }
    });
  }
  /**
   * Returns an AsyncIterableIterator for blobs.
   *
   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                         The given expression must evaluate to true for a blob to be returned in the results.
   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param options - Options to findBlobsByTagsItems.
   */
  findBlobsByTagsItems(tagFilterSqlExpression, options = {}) {
    return __asyncGenerator(this, arguments, function* findBlobsByTagsItems_1() {
      var e_3, _a3;
      let marker2;
      try {
        for (var _b2 = __asyncValues(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker2, options)), _c2; _c2 = yield __await(_b2.next()), !_c2.done; ) {
          const segment = _c2.value;
          yield __await(yield* __asyncDelegator(__asyncValues(segment.blobs)));
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (_c2 && !_c2.done && (_a3 = _b2.return))
            yield __await(_a3.call(_b2));
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
    });
  }
  /**
   * Returns an async iterable iterator to find all blobs with specified tag
   * under the specified container.
   *
   * .byPage() returns an async iterable iterator to list the blobs in pages.
   *
   * Example using `for await` syntax:
   *
   * ```js
   * let i = 1;
   * for await (const blob of containerClient.findBlobsByTags("tagkey='tagvalue'")) {
   *   console.log(`Blob ${i++}: ${blob.name}`);
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let i = 1;
   * const iter = containerClient.findBlobsByTags("tagkey='tagvalue'");
   * let blobItem = await iter.next();
   * while (!blobItem.done) {
   *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
   *   blobItem = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * // passing optional maxPageSize in the page settings
   * let i = 1;
   * for await (const response of containerClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 20 })) {
   *   if (response.blobs) {
   *     for (const blob of response.blobs) {
   *       console.log(`Blob ${i++}: ${blob.name}`);
   *     }
   *   }
   * }
   * ```
   *
   * Example using paging with a marker:
   *
   * ```js
   * let i = 1;
   * let iterator = containerClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 2 });
   * let response = (await iterator.next()).value;
   *
   * // Prints 2 blob names
   * if (response.blobs) {
   *   for (const blob of response.blobs) {
   *     console.log(`Blob ${i++}: ${blob.name}`);
   *   }
   * }
   *
   * // Gets next marker
   * let marker = response.continuationToken;
   * // Passing next marker as continuationToken
   * iterator = containerClient
   *   .findBlobsByTags("tagkey='tagvalue'")
   *   .byPage({ continuationToken: marker, maxPageSize: 10 });
   * response = (await iterator.next()).value;
   *
   * // Prints blob names
   * if (response.blobs) {
   *   for (const blob of response.blobs) {
   *      console.log(`Blob ${i++}: ${blob.name}`);
   *   }
   * }
   * ```
   *
   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                         The given expression must evaluate to true for a blob to be returned in the results.
   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param options - Options to find blobs by tags.
   */
  findBlobsByTags(tagFilterSqlExpression, options = {}) {
    const listSegmentOptions = Object.assign({}, options);
    const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);
    return {
      /**
       * The next method, part of the iteration protocol
       */
      next() {
        return iter.next();
      },
      /**
       * The connection to the async iterator, part of the iteration protocol
       */
      [Symbol.asyncIterator]() {
        return this;
      },
      /**
       * Return an AsyncIterableIterator that works a page at a time
       */
      byPage: (settings = {}) => {
        return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));
      }
    };
  }
  getContainerNameFromUrl() {
    let containerName;
    try {
      const parsedUrl = URLBuilder.parse(this.url);
      if (parsedUrl.getHost().split(".")[1] === "blob") {
        containerName = parsedUrl.getPath().split("/")[1];
      } else if (isIpEndpointStyle(parsedUrl)) {
        containerName = parsedUrl.getPath().split("/")[2];
      } else {
        containerName = parsedUrl.getPath().split("/")[1];
      }
      containerName = decodeURIComponent(containerName);
      if (!containerName) {
        throw new Error("Provided containerName is invalid.");
      }
      return containerName;
    } catch (error) {
      throw new Error("Unable to extract containerName with provided information.");
    }
  }
  /**
   * Only available for ContainerClient constructed with a shared key credential.
   *
   * Generates a Blob Container Service Shared Access Signature (SAS) URI based on the client properties
   * and parameters passed in. The SAS is signed by the shared key credential of the client.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
   *
   * @param options - Optional parameters.
   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
   */
  generateSasUrl(options) {
    return new Promise((resolve) => {
      if (!(this.credential instanceof StorageSharedKeyCredential)) {
        throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
      }
      const sas = generateBlobSASQueryParameters(Object.assign({ containerName: this._containerName }, options), this.credential).toString();
      resolve(appendToURLQuery(this.url, sas));
    });
  }
  /**
   * Creates a BlobBatchClient object to conduct batch operations.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
   *
   * @returns A new BlobBatchClient object for this container.
   */
  getBlobBatchClient() {
    return new BlobBatchClient(this.url, this.pipeline);
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js
var AccountSASPermissions = class {
  constructor() {
    this.read = false;
    this.write = false;
    this.delete = false;
    this.deleteVersion = false;
    this.list = false;
    this.add = false;
    this.create = false;
    this.update = false;
    this.process = false;
    this.tag = false;
    this.filter = false;
    this.setImmutabilityPolicy = false;
    this.permanentDelete = false;
  }
  /**
   * Parse initializes the AccountSASPermissions fields from a string.
   *
   * @param permissions -
   */
  static parse(permissions) {
    const accountSASPermissions = new AccountSASPermissions();
    for (const c of permissions) {
      switch (c) {
        case "r":
          accountSASPermissions.read = true;
          break;
        case "w":
          accountSASPermissions.write = true;
          break;
        case "d":
          accountSASPermissions.delete = true;
          break;
        case "x":
          accountSASPermissions.deleteVersion = true;
          break;
        case "l":
          accountSASPermissions.list = true;
          break;
        case "a":
          accountSASPermissions.add = true;
          break;
        case "c":
          accountSASPermissions.create = true;
          break;
        case "u":
          accountSASPermissions.update = true;
          break;
        case "p":
          accountSASPermissions.process = true;
          break;
        case "t":
          accountSASPermissions.tag = true;
          break;
        case "f":
          accountSASPermissions.filter = true;
          break;
        case "i":
          accountSASPermissions.setImmutabilityPolicy = true;
          break;
        case "y":
          accountSASPermissions.permanentDelete = true;
          break;
        default:
          throw new RangeError(`Invalid permission character: ${c}`);
      }
    }
    return accountSASPermissions;
  }
  /**
   * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it
   * and boolean values for them.
   *
   * @param permissionLike -
   */
  static from(permissionLike) {
    const accountSASPermissions = new AccountSASPermissions();
    if (permissionLike.read) {
      accountSASPermissions.read = true;
    }
    if (permissionLike.write) {
      accountSASPermissions.write = true;
    }
    if (permissionLike.delete) {
      accountSASPermissions.delete = true;
    }
    if (permissionLike.deleteVersion) {
      accountSASPermissions.deleteVersion = true;
    }
    if (permissionLike.filter) {
      accountSASPermissions.filter = true;
    }
    if (permissionLike.tag) {
      accountSASPermissions.tag = true;
    }
    if (permissionLike.list) {
      accountSASPermissions.list = true;
    }
    if (permissionLike.add) {
      accountSASPermissions.add = true;
    }
    if (permissionLike.create) {
      accountSASPermissions.create = true;
    }
    if (permissionLike.update) {
      accountSASPermissions.update = true;
    }
    if (permissionLike.process) {
      accountSASPermissions.process = true;
    }
    if (permissionLike.setImmutabilityPolicy) {
      accountSASPermissions.setImmutabilityPolicy = true;
    }
    if (permissionLike.permanentDelete) {
      accountSASPermissions.permanentDelete = true;
    }
    return accountSASPermissions;
  }
  /**
   * Produces the SAS permissions string for an Azure Storage account.
   * Call this method to set AccountSASSignatureValues Permissions field.
   *
   * Using this method will guarantee the resource types are in
   * an order accepted by the service.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
   *
   */
  toString() {
    const permissions = [];
    if (this.read) {
      permissions.push("r");
    }
    if (this.write) {
      permissions.push("w");
    }
    if (this.delete) {
      permissions.push("d");
    }
    if (this.deleteVersion) {
      permissions.push("x");
    }
    if (this.filter) {
      permissions.push("f");
    }
    if (this.tag) {
      permissions.push("t");
    }
    if (this.list) {
      permissions.push("l");
    }
    if (this.add) {
      permissions.push("a");
    }
    if (this.create) {
      permissions.push("c");
    }
    if (this.update) {
      permissions.push("u");
    }
    if (this.process) {
      permissions.push("p");
    }
    if (this.setImmutabilityPolicy) {
      permissions.push("i");
    }
    if (this.permanentDelete) {
      permissions.push("y");
    }
    return permissions.join("");
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js
var AccountSASResourceTypes = class {
  constructor() {
    this.service = false;
    this.container = false;
    this.object = false;
  }
  /**
   * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an
   * Error if it encounters a character that does not correspond to a valid resource type.
   *
   * @param resourceTypes -
   */
  static parse(resourceTypes) {
    const accountSASResourceTypes = new AccountSASResourceTypes();
    for (const c of resourceTypes) {
      switch (c) {
        case "s":
          accountSASResourceTypes.service = true;
          break;
        case "c":
          accountSASResourceTypes.container = true;
          break;
        case "o":
          accountSASResourceTypes.object = true;
          break;
        default:
          throw new RangeError(`Invalid resource type: ${c}`);
      }
    }
    return accountSASResourceTypes;
  }
  /**
   * Converts the given resource types to a string.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
   *
   */
  toString() {
    const resourceTypes = [];
    if (this.service) {
      resourceTypes.push("s");
    }
    if (this.container) {
      resourceTypes.push("c");
    }
    if (this.object) {
      resourceTypes.push("o");
    }
    return resourceTypes.join("");
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js
var AccountSASServices = class {
  constructor() {
    this.blob = false;
    this.file = false;
    this.queue = false;
    this.table = false;
  }
  /**
   * Creates an {@link AccountSASServices} from the specified services string. This method will throw an
   * Error if it encounters a character that does not correspond to a valid service.
   *
   * @param services -
   */
  static parse(services) {
    const accountSASServices = new AccountSASServices();
    for (const c of services) {
      switch (c) {
        case "b":
          accountSASServices.blob = true;
          break;
        case "f":
          accountSASServices.file = true;
          break;
        case "q":
          accountSASServices.queue = true;
          break;
        case "t":
          accountSASServices.table = true;
          break;
        default:
          throw new RangeError(`Invalid service character: ${c}`);
      }
    }
    return accountSASServices;
  }
  /**
   * Converts the given services to a string.
   *
   */
  toString() {
    const services = [];
    if (this.blob) {
      services.push("b");
    }
    if (this.table) {
      services.push("t");
    }
    if (this.queue) {
      services.push("q");
    }
    if (this.file) {
      services.push("f");
    }
    return services.join("");
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js
function generateAccountSASQueryParameters(accountSASSignatureValues, sharedKeyCredential) {
  const version2 = accountSASSignatureValues.version ? accountSASSignatureValues.version : SERVICE_VERSION;
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.setImmutabilityPolicy && version2 < "2020-08-04") {
    throw RangeError("'version' must be >= '2020-08-04' when provided 'i' permission.");
  }
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.deleteVersion && version2 < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when provided 'x' permission.");
  }
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.permanentDelete && version2 < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when provided 'y' permission.");
  }
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.tag && version2 < "2019-12-12") {
    throw RangeError("'version' must be >= '2019-12-12' when provided 't' permission.");
  }
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.filter && version2 < "2019-12-12") {
    throw RangeError("'version' must be >= '2019-12-12' when provided 'f' permission.");
  }
  if (accountSASSignatureValues.encryptionScope && version2 < "2020-12-06") {
    throw RangeError("'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.");
  }
  const parsedPermissions = AccountSASPermissions.parse(accountSASSignatureValues.permissions.toString());
  const parsedServices = AccountSASServices.parse(accountSASSignatureValues.services).toString();
  const parsedResourceTypes = AccountSASResourceTypes.parse(accountSASSignatureValues.resourceTypes).toString();
  let stringToSign;
  if (version2 >= "2020-12-06") {
    stringToSign = [
      sharedKeyCredential.accountName,
      parsedPermissions,
      parsedServices,
      parsedResourceTypes,
      accountSASSignatureValues.startsOn ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false) : "",
      truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),
      accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : "",
      accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : "",
      version2,
      accountSASSignatureValues.encryptionScope ? accountSASSignatureValues.encryptionScope : "",
      ""
      // Account SAS requires an additional newline character
    ].join("\n");
  } else {
    stringToSign = [
      sharedKeyCredential.accountName,
      parsedPermissions,
      parsedServices,
      parsedResourceTypes,
      accountSASSignatureValues.startsOn ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false) : "",
      truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),
      accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : "",
      accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : "",
      version2,
      ""
      // Account SAS requires an additional newline character
    ].join("\n");
  }
  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return new SASQueryParameters(version2, signature, parsedPermissions.toString(), parsedServices, parsedResourceTypes, accountSASSignatureValues.protocol, accountSASSignatureValues.startsOn, accountSASSignatureValues.expiresOn, accountSASSignatureValues.ipRange, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, accountSASSignatureValues.encryptionScope);
}

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js
var BlobServiceClient = class extends StorageClient {
  constructor(url2, credentialOrPipeline, options) {
    let pipeline;
    if (isPipelineLike(credentialOrPipeline)) {
      pipeline = credentialOrPipeline;
    } else if (isNode && credentialOrPipeline instanceof StorageSharedKeyCredential || credentialOrPipeline instanceof AnonymousCredential || isTokenCredential(credentialOrPipeline)) {
      pipeline = newPipeline(credentialOrPipeline, options);
    } else {
      pipeline = newPipeline(new AnonymousCredential(), options);
    }
    super(url2, pipeline);
    this.serviceContext = new Service(this.storageClientContext);
  }
  /**
   *
   * Creates an instance of BlobServiceClient from connection string.
   *
   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.
   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]
   *                                  Account connection string example -
   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
   *                                  SAS connection string example -
   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
   * @param options - Optional. Options to configure the HTTP pipeline.
   */
  static fromConnectionString(connectionString, options) {
    options = options || {};
    const extractedCreds = extractConnectionStringParts(connectionString);
    if (extractedCreds.kind === "AccountConnString") {
      if (isNode) {
        const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
        if (!options.proxyOptions) {
          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
        }
        const pipeline = newPipeline(sharedKeyCredential, options);
        return new BlobServiceClient(extractedCreds.url, pipeline);
      } else {
        throw new Error("Account connection string is only supported in Node.js environment");
      }
    } else if (extractedCreds.kind === "SASConnString") {
      const pipeline = newPipeline(new AnonymousCredential(), options);
      return new BlobServiceClient(extractedCreds.url + "?" + extractedCreds.accountSas, pipeline);
    } else {
      throw new Error("Connection string must be either an Account connection string or a SAS connection string");
    }
  }
  /**
   * Creates a {@link ContainerClient} object
   *
   * @param containerName - A container name
   * @returns A new ContainerClient object for the given container name.
   *
   * Example usage:
   *
   * ```js
   * const containerClient = blobServiceClient.getContainerClient("<container name>");
   * ```
   */
  getContainerClient(containerName) {
    return new ContainerClient(appendToURLPath(this.url, encodeURIComponent(containerName)), this.pipeline);
  }
  /**
   * Create a Blob container. @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
   *
   * @param containerName - Name of the container to create.
   * @param options - Options to configure Container Create operation.
   * @returns Container creation response and the corresponding container client.
   */
  async createContainer(containerName, options = {}) {
    const { span, updatedOptions } = createSpan2("BlobServiceClient-createContainer", options);
    try {
      const containerClient = this.getContainerClient(containerName);
      const containerCreateResponse = await containerClient.create(updatedOptions);
      return {
        containerClient,
        containerCreateResponse
      };
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Deletes a Blob container.
   *
   * @param containerName - Name of the container to delete.
   * @param options - Options to configure Container Delete operation.
   * @returns Container deletion response.
   */
  async deleteContainer(containerName, options = {}) {
    const { span, updatedOptions } = createSpan2("BlobServiceClient-deleteContainer", options);
    try {
      const containerClient = this.getContainerClient(containerName);
      return await containerClient.delete(updatedOptions);
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Restore a previously deleted Blob container.
   * This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.
   *
   * @param deletedContainerName - Name of the previously deleted container.
   * @param deletedContainerVersion - Version of the previously deleted container, used to uniquely identify the deleted container.
   * @param options - Options to configure Container Restore operation.
   * @returns Container deletion response.
   */
  async undeleteContainer(deletedContainerName2, deletedContainerVersion2, options = {}) {
    const { span, updatedOptions } = createSpan2("BlobServiceClient-undeleteContainer", options);
    try {
      const containerClient = this.getContainerClient(options.destinationContainerName || deletedContainerName2);
      const containerContext = new Container(containerClient["storageClientContext"]);
      const containerUndeleteResponse = await containerContext.restore(Object.assign({
        deletedContainerName: deletedContainerName2,
        deletedContainerVersion: deletedContainerVersion2
      }, updatedOptions));
      return { containerClient, containerUndeleteResponse };
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Rename an existing Blob Container.
   *
   * @param sourceContainerName - The name of the source container.
   * @param destinationContainerName - The new name of the container.
   * @param options - Options to configure Container Rename operation.
   */
  /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */
  // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.
  async renameContainer(sourceContainerName2, destinationContainerName, options = {}) {
    var _a3;
    const { span, updatedOptions } = createSpan2("BlobServiceClient-renameContainer", options);
    try {
      const containerClient = this.getContainerClient(destinationContainerName);
      const containerContext = new Container(containerClient["storageClientContext"]);
      const containerRenameResponse = await containerContext.rename(sourceContainerName2, Object.assign(Object.assign({}, updatedOptions), { sourceLeaseId: (_a3 = options.sourceCondition) === null || _a3 === void 0 ? void 0 : _a3.leaseId }));
      return { containerClient, containerRenameResponse };
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Gets the properties of a storage account’s Blob service, including properties
   * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
   *
   * @param options - Options to the Service Get Properties operation.
   * @returns Response data for the Service Get Properties operation.
   */
  async getProperties(options = {}) {
    const { span, updatedOptions } = createSpan2("BlobServiceClient-getProperties", options);
    try {
      return await this.serviceContext.getProperties(Object.assign({ abortSignal: options.abortSignal }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Sets properties for a storage account’s Blob service endpoint, including properties
   * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties
   *
   * @param properties -
   * @param options - Options to the Service Set Properties operation.
   * @returns Response data for the Service Set Properties operation.
   */
  async setProperties(properties, options = {}) {
    const { span, updatedOptions } = createSpan2("BlobServiceClient-setProperties", options);
    try {
      return await this.serviceContext.setProperties(properties, Object.assign({ abortSignal: options.abortSignal }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Retrieves statistics related to replication for the Blob service. It is only
   * available on the secondary location endpoint when read-access geo-redundant
   * replication is enabled for the storage account.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats
   *
   * @param options - Options to the Service Get Statistics operation.
   * @returns Response data for the Service Get Statistics operation.
   */
  async getStatistics(options = {}) {
    const { span, updatedOptions } = createSpan2("BlobServiceClient-getStatistics", options);
    try {
      return await this.serviceContext.getStatistics(Object.assign({ abortSignal: options.abortSignal }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * The Get Account Information operation returns the sku name and account kind
   * for the specified account.
   * The Get Account Information operation is available on service versions beginning
   * with version 2018-03-28.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information
   *
   * @param options - Options to the Service Get Account Info operation.
   * @returns Response data for the Service Get Account Info operation.
   */
  async getAccountInfo(options = {}) {
    const { span, updatedOptions } = createSpan2("BlobServiceClient-getAccountInfo", options);
    try {
      return await this.serviceContext.getAccountInfo(Object.assign({ abortSignal: options.abortSignal }, convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Returns a list of the containers under the specified account.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2
   *
   * @param marker - A string value that identifies the portion of
   *                        the list of containers to be returned with the next listing operation. The
   *                        operation returns the continuationToken value within the response body if the
   *                        listing operation did not return all containers remaining to be listed
   *                        with the current page. The continuationToken value can be used as the value for
   *                        the marker parameter in a subsequent call to request the next page of list
   *                        items. The marker value is opaque to the client.
   * @param options - Options to the Service List Container Segment operation.
   * @returns Response data for the Service List Container Segment operation.
   */
  async listContainersSegment(marker2, options = {}) {
    const { span, updatedOptions } = createSpan2("BlobServiceClient-listContainersSegment", options);
    try {
      return await this.serviceContext.listContainersSegment(Object.assign(Object.assign(Object.assign({ abortSignal: options.abortSignal, marker: marker2 }, options), { include: typeof options.include === "string" ? [options.include] : options.include }), convertTracingToRequestOptionsBase(updatedOptions)));
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * The Filter Blobs operation enables callers to list blobs across all containers whose tags
   * match a given search expression. Filter blobs searches across all containers within a
   * storage account but can be scoped within the expression to a single container.
   *
   * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                        The given expression must evaluate to true for a blob to be returned in the results.
   *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                        however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param marker - A string value that identifies the portion of
   *                          the list of blobs to be returned with the next listing operation. The
   *                          operation returns the continuationToken value within the response body if the
   *                          listing operation did not return all blobs remaining to be listed
   *                          with the current page. The continuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of list
   *                          items. The marker value is opaque to the client.
   * @param options - Options to find blobs by tags.
   */
  async findBlobsByTagsSegment(tagFilterSqlExpression, marker2, options = {}) {
    const { span, updatedOptions } = createSpan2("BlobServiceClient-findBlobsByTagsSegment", options);
    try {
      const response = await this.serviceContext.filterBlobs(Object.assign({ abortSignal: options.abortSignal, where: tagFilterSqlExpression, marker: marker2, maxPageSize: options.maxPageSize }, convertTracingToRequestOptionsBase(updatedOptions)));
      const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, blobs: response.blobs.map((blob) => {
        var _a3;
        let tagValue = "";
        if (((_a3 = blob.tags) === null || _a3 === void 0 ? void 0 : _a3.blobTagSet.length) === 1) {
          tagValue = blob.tags.blobTagSet[0].value;
        }
        return Object.assign(Object.assign({}, blob), { tags: toTags(blob.tags), tagValue });
      }) });
      return wrappedResponse;
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Returns an AsyncIterableIterator for ServiceFindBlobsByTagsSegmentResponse.
   *
   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                         The given expression must evaluate to true for a blob to be returned in the results.
   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param marker - A string value that identifies the portion of
   *                          the list of blobs to be returned with the next listing operation. The
   *                          operation returns the continuationToken value within the response body if the
   *                          listing operation did not return all blobs remaining to be listed
   *                          with the current page. The continuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of list
   *                          items. The marker value is opaque to the client.
   * @param options - Options to find blobs by tags.
   */
  findBlobsByTagsSegments(tagFilterSqlExpression, marker2, options = {}) {
    return __asyncGenerator(this, arguments, function* findBlobsByTagsSegments_1() {
      let response;
      if (!!marker2 || marker2 === void 0) {
        do {
          response = yield __await(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker2, options));
          response.blobs = response.blobs || [];
          marker2 = response.continuationToken;
          yield yield __await(response);
        } while (marker2);
      }
    });
  }
  /**
   * Returns an AsyncIterableIterator for blobs.
   *
   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                         The given expression must evaluate to true for a blob to be returned in the results.
   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param options - Options to findBlobsByTagsItems.
   */
  findBlobsByTagsItems(tagFilterSqlExpression, options = {}) {
    return __asyncGenerator(this, arguments, function* findBlobsByTagsItems_1() {
      var e_1, _a3;
      let marker2;
      try {
        for (var _b2 = __asyncValues(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker2, options)), _c2; _c2 = yield __await(_b2.next()), !_c2.done; ) {
          const segment = _c2.value;
          yield __await(yield* __asyncDelegator(__asyncValues(segment.blobs)));
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c2 && !_c2.done && (_a3 = _b2.return))
            yield __await(_a3.call(_b2));
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    });
  }
  /**
   * Returns an async iterable iterator to find all blobs with specified tag
   * under the specified account.
   *
   * .byPage() returns an async iterable iterator to list the blobs in pages.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
   *
   * Example using `for await` syntax:
   *
   * ```js
   * let i = 1;
   * for await (const blob of blobServiceClient.findBlobsByTags("tagkey='tagvalue'")) {
   *   console.log(`Blob ${i++}: ${container.name}`);
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let i = 1;
   * const iter = blobServiceClient.findBlobsByTags("tagkey='tagvalue'");
   * let blobItem = await iter.next();
   * while (!blobItem.done) {
   *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
   *   blobItem = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * // passing optional maxPageSize in the page settings
   * let i = 1;
   * for await (const response of blobServiceClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 20 })) {
   *   if (response.blobs) {
   *     for (const blob of response.blobs) {
   *       console.log(`Blob ${i++}: ${blob.name}`);
   *     }
   *   }
   * }
   * ```
   *
   * Example using paging with a marker:
   *
   * ```js
   * let i = 1;
   * let iterator = blobServiceClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 2 });
   * let response = (await iterator.next()).value;
   *
   * // Prints 2 blob names
   * if (response.blobs) {
   *   for (const blob of response.blobs) {
   *     console.log(`Blob ${i++}: ${blob.name}`);
   *   }
   * }
   *
   * // Gets next marker
   * let marker = response.continuationToken;
   * // Passing next marker as continuationToken
   * iterator = blobServiceClient
   *   .findBlobsByTags("tagkey='tagvalue'")
   *   .byPage({ continuationToken: marker, maxPageSize: 10 });
   * response = (await iterator.next()).value;
   *
   * // Prints blob names
   * if (response.blobs) {
   *   for (const blob of response.blobs) {
   *      console.log(`Blob ${i++}: ${blob.name}`);
   *   }
   * }
   * ```
   *
   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                         The given expression must evaluate to true for a blob to be returned in the results.
   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param options - Options to find blobs by tags.
   */
  findBlobsByTags(tagFilterSqlExpression, options = {}) {
    const listSegmentOptions = Object.assign({}, options);
    const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);
    return {
      /**
       * The next method, part of the iteration protocol
       */
      next() {
        return iter.next();
      },
      /**
       * The connection to the async iterator, part of the iteration protocol
       */
      [Symbol.asyncIterator]() {
        return this;
      },
      /**
       * Return an AsyncIterableIterator that works a page at a time
       */
      byPage: (settings = {}) => {
        return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));
      }
    };
  }
  /**
   * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses
   *
   * @param marker - A string value that identifies the portion of
   *                        the list of containers to be returned with the next listing operation. The
   *                        operation returns the continuationToken value within the response body if the
   *                        listing operation did not return all containers remaining to be listed
   *                        with the current page. The continuationToken value can be used as the value for
   *                        the marker parameter in a subsequent call to request the next page of list
   *                        items. The marker value is opaque to the client.
   * @param options - Options to list containers operation.
   */
  listSegments(marker2, options = {}) {
    return __asyncGenerator(this, arguments, function* listSegments_1() {
      let listContainersSegmentResponse;
      if (!!marker2 || marker2 === void 0) {
        do {
          listContainersSegmentResponse = yield __await(this.listContainersSegment(marker2, options));
          listContainersSegmentResponse.containerItems = listContainersSegmentResponse.containerItems || [];
          marker2 = listContainersSegmentResponse.continuationToken;
          yield yield __await(yield __await(listContainersSegmentResponse));
        } while (marker2);
      }
    });
  }
  /**
   * Returns an AsyncIterableIterator for Container Items
   *
   * @param options - Options to list containers operation.
   */
  listItems(options = {}) {
    return __asyncGenerator(this, arguments, function* listItems_1() {
      var e_2, _a3;
      let marker2;
      try {
        for (var _b2 = __asyncValues(this.listSegments(marker2, options)), _c2; _c2 = yield __await(_b2.next()), !_c2.done; ) {
          const segment = _c2.value;
          yield __await(yield* __asyncDelegator(__asyncValues(segment.containerItems)));
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c2 && !_c2.done && (_a3 = _b2.return))
            yield __await(_a3.call(_b2));
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
    });
  }
  /**
   * Returns an async iterable iterator to list all the containers
   * under the specified account.
   *
   * .byPage() returns an async iterable iterator to list the containers in pages.
   *
   * Example using `for await` syntax:
   *
   * ```js
   * let i = 1;
   * for await (const container of blobServiceClient.listContainers()) {
   *   console.log(`Container ${i++}: ${container.name}`);
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let i = 1;
   * const iter = blobServiceClient.listContainers();
   * let containerItem = await iter.next();
   * while (!containerItem.done) {
   *   console.log(`Container ${i++}: ${containerItem.value.name}`);
   *   containerItem = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * // passing optional maxPageSize in the page settings
   * let i = 1;
   * for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {
   *   if (response.containerItems) {
   *     for (const container of response.containerItems) {
   *       console.log(`Container ${i++}: ${container.name}`);
   *     }
   *   }
   * }
   * ```
   *
   * Example using paging with a marker:
   *
   * ```js
   * let i = 1;
   * let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });
   * let response = (await iterator.next()).value;
   *
   * // Prints 2 container names
   * if (response.containerItems) {
   *   for (const container of response.containerItems) {
   *     console.log(`Container ${i++}: ${container.name}`);
   *   }
   * }
   *
   * // Gets next marker
   * let marker = response.continuationToken;
   * // Passing next marker as continuationToken
   * iterator = blobServiceClient
   *   .listContainers()
   *   .byPage({ continuationToken: marker, maxPageSize: 10 });
   * response = (await iterator.next()).value;
   *
   * // Prints 10 container names
   * if (response.containerItems) {
   *   for (const container of response.containerItems) {
   *      console.log(`Container ${i++}: ${container.name}`);
   *   }
   * }
   * ```
   *
   * @param options - Options to list containers.
   * @returns An asyncIterableIterator that supports paging.
   */
  listContainers(options = {}) {
    if (options.prefix === "") {
      options.prefix = void 0;
    }
    const include2 = [];
    if (options.includeDeleted) {
      include2.push("deleted");
    }
    if (options.includeMetadata) {
      include2.push("metadata");
    }
    if (options.includeSystem) {
      include2.push("system");
    }
    const listSegmentOptions = Object.assign(Object.assign({}, options), include2.length > 0 ? { include: include2 } : {});
    const iter = this.listItems(listSegmentOptions);
    return {
      /**
       * The next method, part of the iteration protocol
       */
      next() {
        return iter.next();
      },
      /**
       * The connection to the async iterator, part of the iteration protocol
       */
      [Symbol.asyncIterator]() {
        return this;
      },
      /**
       * Return an AsyncIterableIterator that works a page at a time
       */
      byPage: (settings = {}) => {
        return this.listSegments(settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));
      }
    };
  }
  /**
   * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).
   *
   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using
   * bearer token authentication.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key
   *
   * @param startsOn -      The start time for the user delegation SAS. Must be within 7 days of the current time
   * @param expiresOn -     The end time for the user delegation SAS. Must be within 7 days of the current time
   */
  async getUserDelegationKey(startsOn, expiresOn2, options = {}) {
    const { span, updatedOptions } = createSpan2("BlobServiceClient-getUserDelegationKey", options);
    try {
      const response = await this.serviceContext.getUserDelegationKey({
        startsOn: truncatedISO8061Date(startsOn, false),
        expiresOn: truncatedISO8061Date(expiresOn2, false)
      }, Object.assign({ abortSignal: options.abortSignal }, convertTracingToRequestOptionsBase(updatedOptions)));
      const userDelegationKey = {
        signedObjectId: response.signedObjectId,
        signedTenantId: response.signedTenantId,
        signedStartsOn: new Date(response.signedStartsOn),
        signedExpiresOn: new Date(response.signedExpiresOn),
        signedService: response.signedService,
        signedVersion: response.signedVersion,
        value: response.value
      };
      const res = Object.assign({ _response: response._response, requestId: response.requestId, clientRequestId: response.clientRequestId, version: response.version, date: response.date, errorCode: response.errorCode }, userDelegationKey);
      return res;
    } catch (e) {
      span.setStatus({
        code: SpanStatusCode2.ERROR,
        message: e.message
      });
      throw e;
    } finally {
      span.end();
    }
  }
  /**
   * Creates a BlobBatchClient object to conduct batch operations.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
   *
   * @returns A new BlobBatchClient object for this service.
   */
  getBlobBatchClient() {
    return new BlobBatchClient(this.url, this.pipeline);
  }
  /**
   * Only available for BlobServiceClient constructed with a shared key credential.
   *
   * Generates a Blob account Shared Access Signature (SAS) URI based on the client properties
   * and parameters passed in. The SAS is signed by the shared key credential of the client.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas
   *
   * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.
   * @param permissions - Specifies the list of permissions to be associated with the SAS.
   * @param resourceTypes - Specifies the resource types associated with the shared access signature.
   * @param options - Optional parameters.
   * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
   */
  generateAccountSasUrl(expiresOn2, permissions = AccountSASPermissions.parse("r"), resourceTypes = "sco", options = {}) {
    if (!(this.credential instanceof StorageSharedKeyCredential)) {
      throw RangeError("Can only generate the account SAS when the client is initialized with a shared key credential");
    }
    if (expiresOn2 === void 0) {
      const now = /* @__PURE__ */ new Date();
      expiresOn2 = new Date(now.getTime() + 3600 * 1e3);
    }
    const sas = generateAccountSASQueryParameters(Object.assign({
      permissions,
      expiresOn: expiresOn2,
      resourceTypes,
      services: AccountSASServices.parse("b").toString()
    }, options), this.credential).toString();
    return appendToURLQuery(this.url, sas);
  }
};

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generatedModels.js
var KnownEncryptionAlgorithmType;
(function(KnownEncryptionAlgorithmType2) {
  KnownEncryptionAlgorithmType2["AES256"] = "AES256";
})(KnownEncryptionAlgorithmType || (KnownEncryptionAlgorithmType = {}));
export {
  AnonymousCredential,
  AnonymousCredentialPolicy,
  AppendBlobClient,
  BaseRequestPolicy,
  BlobBatch,
  BlobBatchClient,
  BlobClient,
  BlobLeaseClient,
  BlobServiceClient,
  BlockBlobClient,
  BlockBlobTier,
  ContainerClient,
  Credential,
  CredentialPolicy,
  HttpHeaders,
  KnownEncryptionAlgorithmType,
  PageBlobClient,
  Pipeline,
  PremiumPageBlobTier,
  RequestPolicyOptions,
  RestError,
  StorageBrowserPolicy,
  StorageBrowserPolicyFactory,
  StorageOAuthScopes,
  StorageRetryPolicy,
  StorageRetryPolicyFactory,
  StorageRetryPolicyType,
  WebResource,
  deserializationPolicy,
  isPipelineLike,
  logger2 as logger,
  newPipeline
};
//# sourceMappingURL=@azure_storage-blob.js.map
