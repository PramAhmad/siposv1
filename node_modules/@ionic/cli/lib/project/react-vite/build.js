"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactViteBuildCLI = exports.ReactViteBuildRunner = void 0;
const build_1 = require("../../build");
class ReactViteBuildRunner extends build_1.BuildRunner {
    constructor(e) {
        super();
        this.e = e;
    }
    async getCommandMetadata() {
        return {};
    }
    createOptionsFromCommandLine(inputs, options) {
        const baseOptions = super.createBaseOptionsFromCommandLine(inputs, options);
        return {
            ...baseOptions,
            type: 'react',
        };
    }
    async buildProject(options) {
        const reactVite = new ReactViteBuildCLI(this.e);
        await reactVite.build(options);
    }
}
exports.ReactViteBuildRunner = ReactViteBuildRunner;
class ReactViteBuildCLI extends build_1.BuildCLI {
    constructor() {
        super(...arguments);
        this.name = 'Vite CLI Service';
        this.pkg = 'vite';
        this.program = 'vite';
        this.prefix = 'vite';
        this.script = build_1.BUILD_SCRIPT;
    }
    async buildArgs(options) {
        const { pkgManagerArgs } = await Promise.resolve().then(() => require('../../utils/npm'));
        if (this.resolvedProgram === this.program) {
            return ['build', ...(options['--'] || [])];
        }
        else {
            const [, ...pkgArgs] = await pkgManagerArgs(this.e.config.get('npmClient'), { command: 'run', script: this.script, scriptArgs: options['--'] });
            return pkgArgs;
        }
    }
    async buildEnvVars(options) {
        const env = {};
        return { ...await super.buildEnvVars(options), ...env };
    }
}
exports.ReactViteBuildCLI = ReactViteBuildCLI;
