import * as _nuxt_schema from '@nuxt/schema';

type ManifestCrossOrigin = 'anonymous' | 'use-credentials';
type ManifestDisplay = 'fullscreen' | 'standalone' | 'minimal-ui' | 'browser';
type ManifestDisplayOverride = ManifestDisplay | 'window-controls-overlay';
type ManifestOrientation = 'any' | 'natural' | 'landscape' | 'landscape-primary' | 'landscape-secondary' | 'portrait' | 'portrait-primary' | 'portrait-secondary';
type ManifestPlatform = 'chrome_web_store' | 'play' | 'itunes' | 'webapp' | 'windows' | 'f-droid' | 'amazon';
interface ManifestIcon {
    src: string;
    type: string;
    sizes: string;
    purpose: 'any' | 'maskable' | 'monochrome';
}
interface ManifestScreenshot {
    src: string;
    type: string;
    sizes: string;
}
interface ManifestShortcut {
    name: string;
    short_name: string;
    url: string;
    icons: ManifestIcon[];
}
interface ManifestRelatedApplication {
    id: string;
    platform: ManifestPlatform;
    url: string;
}
interface ManifestShareTarget {
    action: string;
    method?: 'GET' | 'POST';
    enctype?: string;
    params: {
        title?: string;
        text?: string;
        url?: string;
        files?: {
            name: string;
            accept: string;
        };
    };
}
interface ManifestProtocolHandler {
    protocol: string;
    url: string;
}
interface ManifestOptions {
    id?: string;
    name: string;
    short_name: string;
    description: string;
    lang: string;
    scope?: string;
    start_url: string;
    display: ManifestDisplay;
    display_override?: ManifestDisplayOverride;
    orientation?: ManifestOrientation;
    background_color: string;
    theme_color: string;
    categories?: string[];
    icons: ManifestIcon[];
    screenshots?: ManifestScreenshot[];
    shortcuts?: ManifestShortcut[];
    related_applications?: ManifestRelatedApplication[];
    prefer_related_applications?: boolean;
    share_target?: ManifestShareTarget;
    protocol_handlers?: ManifestProtocolHandler[];
    /**
     * Set manifest meta crossorigin attribute
     * @see https://developer.mozilla.org/fr/docs/Web/HTML/Attributes/crossorigin
     * @see https://web.dev/add-manifest/#link-manifest
     */
    crossorigin?: ManifestCrossOrigin;
}

interface Device {
    width: number;
    height: number;
    pixelRatio: number;
    orientation: 'portrait' | 'landscape';
}
interface IconOptions {
    source: string | null;
    fileName: string;
    sizes: number[];
    maskablePadding: number;
    maskableSource: string | null;
    targetDir: string;
    splash: {
        backgroundColor: string | undefined;
        devices: Device[];
        targetDir: string;
    };
}

interface MetaOptions {
    name: string;
    author: string | false;
    title: string | boolean;
    description: string | false;
    favicon: boolean;
    mobileApp: boolean;
    mobileAppIOS: boolean;
    appleStatusBarStyle: 'default' | 'black' | 'black-translucent' | false;
    theme_color: string | false | undefined;
    lang: string | false;
    ogType: string | false;
    ogSiteName: string | boolean;
    ogTitle: string | boolean;
    ogDescription: string | boolean;
    ogImage: string | boolean | {
        path: string;
        width?: number;
        height?: number;
        type?: string;
    };
    ogHost: string | undefined;
    ogUrl: string | boolean;
    twitterCard: 'summary' | 'summary_large_image' | 'app' | 'player' | false;
    twitterSite: string | undefined;
    twitterCreator: string | undefined;
}

interface WorkboxOptions {
    autoRegister: boolean;
    cacheOptions: {
        directoryIndex: string;
        revision: string | undefined;
    };
    enabled: boolean;
    preCaching: Array<string | {
        revision: string;
        url: string;
    }>;
    templatePath: string | null;
    workboxVersion: string;
    workboxUrl: string | null;
}

interface PWAOptions {
    icon: IconOptions | false;
    meta: MetaOptions | false;
    manifest: ManifestOptions | false;
    workbox: WorkboxOptions | false;
}
declare module '@nuxt/schema' {
    interface NuxtConfig {
        pwa?: {
            [K in keyof PWAOptions]?: Partial<PWAOptions[K]>;
        };
    }
    interface NuxtOptions {
        pwa: PWAOptions;
    }
}

declare const _default: _nuxt_schema.NuxtModule<PWAOptions>;

export { _default as default };
